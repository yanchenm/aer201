

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Feb 04 04:48:54 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 1.45
    18                           ; Generated 16/11/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4620 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     
    52                           	psect	smallconst
    53  001000                     __psmallconst:
    54                           	opt stack 0
    55  001000  00                 	db	0
    56  001001                     _keys:
    57                           	opt stack 0
    58  001001  31                 	db	49
    59  001002  32                 	db	50
    60  001003  33                 	db	51
    61  001004  41                 	db	65
    62  001005  34                 	db	52
    63  001006  35                 	db	53
    64  001007  36                 	db	54
    65  001008  42                 	db	66
    66  001009  37                 	db	55
    67  00100A  38                 	db	56
    68  00100B  39                 	db	57
    69  00100C  43                 	db	67
    70  00100D  2A                 	db	42
    71  00100E  30                 	db	48
    72  00100F  23                 	db	35
    73  001010  44                 	db	68
    74  001011  00                 	db	0
    75  001012                     __end_of_keys:
    76                           	opt stack 0
    77  001012                     _LCD_LEFT:
    78                           	opt stack 0
    79  001012  00                 	db	0
    80  001013                     __end_of_LCD_LEFT:
    81                           	opt stack 0
    82  001013                     _LCD_RIGHT:
    83                           	opt stack 0
    84  001013  01                 	db	1
    85  001014                     __end_of_LCD_RIGHT:
    86                           	opt stack 0
    87  001014                     _LCD_SIZE_VERT:
    88                           	opt stack 0
    89  001014  02                 	db	2
    90  001015                     __end_of_LCD_SIZE_VERT:
    91                           	opt stack 0
    92  001015                     _LCD_SIZE_HORZ:
    93                           	opt stack 0
    94  001015  10                 	db	16
    95  001016                     __end_of_LCD_SIZE_HORZ:
    96                           	opt stack 0
    97  001016                     _LCD_VERT_LIMIT:
    98                           	opt stack 0
    99  001016  02                 	db	2
   100  001017                     __end_of_LCD_VERT_LIMIT:
   101                           	opt stack 0
   102  001017                     _LCD_HORZ_LIMIT:
   103                           	opt stack 0
   104  001017  28                 	db	40
   105  001018                     __end_of_LCD_HORZ_LIMIT:
   106                           	opt stack 0
   107  0000                     _PORTB	set	3969
   108  0000                     _PORTBbits	set	3969
   109  0000                     _ADCON1	set	4033
   110  0000                     _ADCON0	set	4034
   111  0000                     _TRISE	set	3990
   112  0000                     _TRISD	set	3989
   113  0000                     _TRISC	set	3988
   114  0000                     _TRISB	set	3987
   115  0000                     _TRISA	set	3986
   116  0000                     _LATE	set	3981
   117  0000                     _LATC	set	3979
   118  0000                     _LATB	set	3978
   119  0000                     _LATA	set	3977
   120  0000                     _INTCONbits	set	4082
   121  0000                     _LATD	set	3980
   122  0000                     _LATDbits	set	3980
   123                           
   124                           ; #config settings
   125  001018  00                 	db	0	; dummy byte at the end
   126  0000                     
   127                           	psect	cinit
   128  00116C                     __pcinit:
   129                           	opt stack 0
   130  00116C                     start_initialization:
   131                           	opt stack 0
   132  00116C                     __initialization:
   133                           	opt stack 0
   134                           
   135                           ; Clear objects allocated to COMRAM (2 bytes)
   136  00116C  6A08               	clrf	(__pbssCOMRAM+1)& (0+255),c
   137  00116E  6A07               	clrf	__pbssCOMRAM& (0+255),c
   138  001170                     end_of_initialization:
   139                           	opt stack 0
   140  001170                     __end_of__initialization:
   141                           	opt stack 0
   142  001170  0E00               	movlw	low (__Lsmallconst shr (0+16))
   143  001172  6EF8               	movwf	tblptru,c
   144  001174  0E10               	movlw	high __Lsmallconst
   145  001176  6EF7               	movwf	tblptrh,c
   146  001178  0100               	movlb	0
   147  00117A  EF4C  F008         	goto	_main	;jump to C main() function
   148                           tblptru	equ	0xFF8
   149                           tblptrh	equ	0xFF7
   150                           
   151                           	psect	bssCOMRAM
   152  000007                     __pbssCOMRAM:
   153                           	opt stack 0
   154  000007                     	ds	1
   155  000008                     _LCDinterruptState:
   156                           	opt stack 0
   157  000008                     	ds	1
   158                           tblptru	equ	0xFF8
   159                           tblptrh	equ	0xFF7
   160                           
   161                           	psect	cstackCOMRAM
   162  000001                     __pcstackCOMRAM:
   163                           	opt stack 0
   164  000001                     lcdNibble@temp:
   165                           	opt stack 0
   166                           
   167                           ; 1 bytes @ 0x0
   168  000001                     	ds	1
   169  000002                     lcdNibble@data:
   170                           	opt stack 0
   171                           
   172                           ; 1 bytes @ 0x1
   173  000002                     	ds	1
   174  000003                     lcdInst@data:
   175                           	opt stack 0
   176  000003                     putch@data:
   177                           	opt stack 0
   178                           
   179                           ; 1 bytes @ 0x2
   180  000003                     	ds	1
   181  000004                     ??_initLCD:
   182                           
   183                           ; 1 bytes @ 0x3
   184  000004                     	ds	1
   185  000005                     main@keypress:
   186                           	opt stack 0
   187                           
   188                           ; 1 bytes @ 0x4
   189  000005                     	ds	1
   190  000006                     main@temp:
   191                           	opt stack 0
   192                           
   193                           ; 1 bytes @ 0x5
   194  000006                     	ds	1
   195                           tblptru	equ	0xFF8
   196                           tblptrh	equ	0xFF7
   197                           
   198 ;;
   199 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   200 ;;
   201 ;; *************** function _main *****************
   202 ;; Defined at:
   203 ;;		line 8 in file "main.c"
   204 ;; Parameters:    Size  Location     Type
   205 ;;		None
   206 ;; Auto vars:     Size  Location     Type
   207 ;;  temp            1    5[COMRAM] unsigned char 
   208 ;;  keypress        1    4[COMRAM] unsigned char 
   209 ;; Return value:  Size  Location     Type
   210 ;;                  1    wreg      void 
   211 ;; Registers used:
   212 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   213 ;; Tracked objects:
   214 ;;		On entry : 0/0
   215 ;;		On exit  : 0/0
   216 ;;		Unchanged: 0/0
   217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   219 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   221 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   222 ;;Total ram usage:        2 bytes
   223 ;; Hardware stack levels required when called:    3
   224 ;; This function calls:
   225 ;;		_initLCD
   226 ;;		_putch
   227 ;; This function is called by:
   228 ;;		Startup code after reset
   229 ;; This function uses a non-reentrant model
   230 ;;
   231                           
   232                           	psect	text0
   233  001098                     __ptext0:
   234                           	opt stack 0
   235  001098                     _main:
   236                           	opt stack 28
   237                           
   238                           ;main.c: 14: LATA = 0x00;
   239                           
   240                           ;incstack = 0
   241  001098  0E00               	movlw	0
   242  00109A  6E89               	movwf	3977,c	;volatile
   243                           
   244                           ;main.c: 15: LATB = 0x00;
   245  00109C  0E00               	movlw	0
   246  00109E  6E8A               	movwf	3978,c	;volatile
   247                           
   248                           ;main.c: 16: LATC = 0x00;
   249  0010A0  0E00               	movlw	0
   250  0010A2  6E8B               	movwf	3979,c	;volatile
   251                           
   252                           ;main.c: 17: LATD = 0x00;
   253  0010A4  0E00               	movlw	0
   254  0010A6  6E8C               	movwf	3980,c	;volatile
   255                           
   256                           ;main.c: 18: LATE = 0x00;
   257  0010A8  0E00               	movlw	0
   258  0010AA  6E8D               	movwf	3981,c	;volatile
   259                           
   260                           ;main.c: 22: TRISA = 0xFF;
   261  0010AC  6892               	setf	3986,c	;volatile
   262                           
   263                           ;main.c: 23: TRISB = 0xFF;
   264  0010AE  6893               	setf	3987,c	;volatile
   265                           
   266                           ;main.c: 24: TRISC = 0x00;
   267  0010B0  0E00               	movlw	0
   268  0010B2  6E94               	movwf	3988,c	;volatile
   269                           
   270                           ;main.c: 25: TRISD = 0x00;
   271  0010B4  0E00               	movlw	0
   272  0010B6  6E95               	movwf	3989,c	;volatile
   273                           
   274                           ;main.c: 26: TRISE = 0x00;
   275  0010B8  0E00               	movlw	0
   276  0010BA  6E96               	movwf	3990,c	;volatile
   277                           
   278                           ;main.c: 29: ADCON0 = 0x00;
   279  0010BC  0E00               	movlw	0
   280  0010BE  6EC2               	movwf	4034,c	;volatile
   281                           
   282                           ;main.c: 30: ADCON1 = 0b00001111;
   283  0010C0  0E0F               	movlw	15
   284  0010C2  6EC1               	movwf	4033,c	;volatile
   285                           
   286                           ;main.c: 34: initLCD();
   287  0010C4  EC7C  F008         	call	_initLCD	;wreg free
   288  0010C8                     
   289                           ;main.c: 40: while(PORTBbits.RB1 == 0){ continue; }
   290  0010C8  A281               	btfss	3969,1,c	;volatile
   291  0010CA  D7FE               	goto	l109
   292                           
   293                           ;main.c: 43: unsigned char keypress = (PORTB & 0xF0) >> 4;
   294  0010CC  3881               	swapf	3969,w,c	;volatile
   295  0010CE  0B0F               	andlw	15
   296  0010D0  0B0F               	andlw	15
   297  0010D2  6E05               	movwf	main@keypress,c
   298  0010D4  B281               	btfsc	3969,1,c	;volatile
   299  0010D6  D7FE               	goto	l114
   300                           
   301                           ;main.c: 48: __nop();
   302  0010D8  F000               	nop	
   303                           
   304                           ;main.c: 50: unsigned char temp = keys[keypress];
   305  0010DA  5005               	movf	main@keypress,w,c
   306  0010DC  0D01               	mullw	1
   307  0010DE  0E01               	movlw	low _keys
   308  0010E0  24F3               	addwf	prodl,w,c
   309  0010E2  6EF6               	movwf	tblptrl,c
   310  0010E4  0E10               	movlw	high _keys
   311  0010E6  20F4               	addwfc	prodh,w,c
   312  0010E8  6EF7               	movwf	tblptrh,c
   313  0010EA                     	if	0	;There are less than 3 active tblptr bytes
   314  0010EA                     	endif
   315  0010EA  0008               	tblrd		*
   316  0010EC  CFF5 F006          	movff	tablat,main@temp
   317                           
   318                           ;main.c: 51: putch(temp);
   319  0010F0  5006               	movf	main@temp,w,c
   320  0010F2  ECA2  F008         	call	_putch
   321  0010F6  D7E8               	goto	l109
   322  0010F8                     __end_of_main:
   323                           	opt stack 0
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           prodh	equ	0xFF4
   329                           prodl	equ	0xFF3
   330                           
   331 ;; *************** function _putch *****************
   332 ;; Defined at:
   333 ;;		line 24 in file "lcd.c"
   334 ;; Parameters:    Size  Location     Type
   335 ;;  data            1    wreg     unsigned char 
   336 ;; Auto vars:     Size  Location     Type
   337 ;;  data            1    2[COMRAM] unsigned char 
   338 ;; Return value:  Size  Location     Type
   339 ;;                  1    wreg      void 
   340 ;; Registers used:
   341 ;;		wreg, status,2, status,0, cstack
   342 ;; Tracked objects:
   343 ;;		On entry : 0/0
   344 ;;		On exit  : 0/0
   345 ;;		Unchanged: 0/0
   346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   350 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   351 ;;Total ram usage:        1 bytes
   352 ;; Hardware stack levels used:    1
   353 ;; Hardware stack levels required when called:    1
   354 ;; This function calls:
   355 ;;		_lcdNibble
   356 ;; This function is called by:
   357 ;;		_main
   358 ;; This function uses a non-reentrant model
   359 ;;
   360                           
   361                           	psect	text1
   362  001144                     __ptext1:
   363                           	opt stack 0
   364  001144                     _putch:
   365                           	opt stack 29
   366                           
   367                           ;incstack = 0
   368                           ;putch@data stored from wreg
   369  001144  6E03               	movwf	putch@data,c
   370                           
   371                           ;lcd.c: 32: LATDbits.LATD2 = 1;
   372  001146  848C               	bsf	3980,2,c	;volatile
   373                           
   374                           ;lcd.c: 33: lcdNibble(data);
   375  001148  5003               	movf	putch@data,w,c
   376  00114A  EC0D  F008         	call	_lcdNibble
   377                           
   378                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
   379  00114E  0EC8               	movlw	200
   380  001150                     u107:
   381  001150  D000               	nop2	
   382  001152  2EE8               	decfsz	wreg,f,c
   383  001154  D7FD               	bra	u107
   384  001156  0012               	return		;funcret
   385  001158                     __end_of_putch:
   386                           	opt stack 0
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           prodh	equ	0xFF4
   392                           prodl	equ	0xFF3
   393                           wreg	equ	0xFE8
   394                           
   395 ;; *************** function _initLCD *****************
   396 ;; Defined at:
   397 ;;		line 60 in file "lcd.c"
   398 ;; Parameters:    Size  Location     Type
   399 ;;		None
   400 ;; Auto vars:     Size  Location     Type
   401 ;;		None
   402 ;; Return value:  Size  Location     Type
   403 ;;                  1    wreg      void 
   404 ;; Registers used:
   405 ;;		wreg, status,2, status,0, cstack
   406 ;; Tracked objects:
   407 ;;		On entry : 0/0
   408 ;;		On exit  : 0/0
   409 ;;		Unchanged: 0/0
   410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   414 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   415 ;;Total ram usage:        1 bytes
   416 ;; Hardware stack levels used:    1
   417 ;; Hardware stack levels required when called:    2
   418 ;; This function calls:
   419 ;;		_lcdInst
   420 ;; This function is called by:
   421 ;;		_main
   422 ;; This function uses a non-reentrant model
   423 ;;
   424                           
   425                           	psect	text2
   426  0010F8                     __ptext2:
   427                           	opt stack 0
   428  0010F8                     _initLCD:
   429                           	opt stack 28
   430                           
   431                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
   432                           
   433                           ;incstack = 0
   434  0010F8  0EC3               	movlw	195
   435  0010FA  6E04               	movwf	??_initLCD& (0+255),c
   436  0010FC  0ECD               	movlw	205
   437  0010FE                     u117:
   438  0010FE  2EE8               	decfsz	wreg,f,c
   439  001100  D7FE               	bra	u117
   440  001102  2E04               	decfsz	??_initLCD& (0+255),f,c
   441  001104  D7FC               	bra	u117
   442  001106  F000               	nop	
   443                           
   444                           ;lcd.c: 69: lcdInst(0b00110011);
   445  001108  0E33               	movlw	51
   446  00110A  ECAC  F008         	call	_lcdInst
   447                           
   448                           ;lcd.c: 70: lcdInst(0b00110010);
   449  00110E  0E32               	movlw	50
   450  001110  ECAC  F008         	call	_lcdInst
   451                           
   452                           ;lcd.c: 71: lcdInst(0b00101000);
   453  001114  0E28               	movlw	40
   454  001116  ECAC  F008         	call	_lcdInst
   455                           
   456                           ;lcd.c: 72: lcdInst(0b00001111);
   457  00111A  0E0F               	movlw	15
   458  00111C  ECAC  F008         	call	_lcdInst
   459                           
   460                           ;lcd.c: 73: lcdInst(0b00000110);
   461  001120  0E06               	movlw	6
   462  001122  ECAC  F008         	call	_lcdInst
   463                           
   464                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
   465  001126  0E01               	movlw	1
   466  001128  ECAC  F008         	call	_lcdInst
   467  00112C  0EC3               	movlw	195
   468  00112E  6E04               	movwf	??_initLCD& (0+255),c
   469  001130  0ECD               	movlw	205
   470  001132                     u127:
   471  001132  2EE8               	decfsz	wreg,f,c
   472  001134  D7FE               	bra	u127
   473  001136  2E04               	decfsz	??_initLCD& (0+255),f,c
   474  001138  D7FC               	bra	u127
   475  00113A  F000               	nop	
   476                           
   477                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
   478  00113C  0E0F               	movlw	15
   479  00113E  ECAC  F008         	call	_lcdInst
   480  001142  0012               	return		;funcret
   481  001144                     __end_of_initLCD:
   482                           	opt stack 0
   483                           tblptru	equ	0xFF8
   484                           tblptrh	equ	0xFF7
   485                           tblptrl	equ	0xFF6
   486                           tablat	equ	0xFF5
   487                           prodh	equ	0xFF4
   488                           prodl	equ	0xFF3
   489                           wreg	equ	0xFE8
   490                           
   491 ;; *************** function _lcdInst *****************
   492 ;; Defined at:
   493 ;;		line 11 in file "lcd.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;  data            1    wreg     unsigned char 
   496 ;; Auto vars:     Size  Location     Type
   497 ;;  data            1    2[COMRAM] unsigned char 
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, status,2, status,0, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;Total ram usage:        1 bytes
   512 ;; Hardware stack levels used:    1
   513 ;; Hardware stack levels required when called:    1
   514 ;; This function calls:
   515 ;;		_lcdNibble
   516 ;; This function is called by:
   517 ;;		_initLCD
   518 ;;		_lcd_set_cursor
   519 ;;		_lcd_shift_cursor
   520 ;;		_lcd_shift_display
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524                           	psect	text3
   525  001158                     __ptext3:
   526                           	opt stack 0
   527  001158                     _lcdInst:
   528                           	opt stack 28
   529                           
   530                           ;incstack = 0
   531                           ;lcdInst@data stored from wreg
   532  001158  6E03               	movwf	lcdInst@data,c
   533                           
   534                           ;lcd.c: 19: LATDbits.LATD2 = 0;
   535  00115A  948C               	bcf	3980,2,c	;volatile
   536                           
   537                           ;lcd.c: 20: lcdNibble(data);
   538  00115C  5003               	movf	lcdInst@data,w,c
   539  00115E  EC0D  F008         	call	_lcdNibble
   540                           
   541                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
   542  001162  0EC8               	movlw	200
   543  001164                     u137:
   544  001164  D000               	nop2	
   545  001166  2EE8               	decfsz	wreg,f,c
   546  001168  D7FD               	bra	u137
   547  00116A  0012               	return		;funcret
   548  00116C                     __end_of_lcdInst:
   549                           	opt stack 0
   550                           tblptru	equ	0xFF8
   551                           tblptrh	equ	0xFF7
   552                           tblptrl	equ	0xFF6
   553                           tablat	equ	0xFF5
   554                           prodh	equ	0xFF4
   555                           prodl	equ	0xFF3
   556                           wreg	equ	0xFE8
   557                           
   558 ;; *************** function _lcdNibble *****************
   559 ;; Defined at:
   560 ;;		line 37 in file "lcd.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;  data            1    wreg     unsigned char 
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  data            1    1[COMRAM] unsigned char 
   565 ;;  temp            1    0[COMRAM] unsigned char 
   566 ;; Return value:  Size  Location     Type
   567 ;;                  1    wreg      void 
   568 ;; Registers used:
   569 ;;		wreg, status,2, status,0
   570 ;; Tracked objects:
   571 ;;		On entry : 0/0
   572 ;;		On exit  : 0/0
   573 ;;		Unchanged: 0/0
   574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   576 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   578 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   579 ;;Total ram usage:        2 bytes
   580 ;; Hardware stack levels used:    1
   581 ;; This function calls:
   582 ;;		Nothing
   583 ;; This function is called by:
   584 ;;		_lcdInst
   585 ;;		_putch
   586 ;; This function uses a non-reentrant model
   587 ;;
   588                           
   589                           	psect	text4
   590  00101A                     __ptext4:
   591                           	opt stack 0
   592  00101A                     _lcdNibble:
   593                           	opt stack 29
   594                           
   595                           ;incstack = 0
   596                           ;lcdNibble@data stored from wreg
   597  00101A  6E02               	movwf	lcdNibble@data,c
   598                           
   599                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
   600  00101C  5002               	movf	lcdNibble@data,w,c
   601  00101E  0BF0               	andlw	240
   602  001020  6E01               	movwf	lcdNibble@temp,c
   603                           
   604                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
   605  001022  508C               	movf	3980,w,c	;volatile
   606  001024  0B0F               	andlw	15
   607  001026  6E8C               	movwf	3980,c	;volatile
   608                           
   609                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
   610  001028  5001               	movf	lcdNibble@temp,w,c
   611  00102A  108C               	iorwf	3980,w,c	;volatile
   612  00102C  6E8C               	movwf	3980,c	;volatile
   613                           
   614                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   615  00102E  0E00               	movlw	0
   616  001030  BEF2               	btfsc	intcon,7,c	;volatile
   617  001032  0E01               	movlw	1
   618  001034  6E08               	movwf	_LCDinterruptState,c
   619  001036  9EF2               	bcf	intcon,7,c	;volatile
   620  001038  868C               	bsf	3980,3,c	;volatile
   621  00103A  0E53               	movlw	83
   622  00103C                     u147:
   623  00103C  2EE8               	decfsz	wreg,f,c
   624  00103E  D7FE               	bra	u147
   625  001040  F000               	nop	
   626  001042  968C               	bcf	3980,3,c	;volatile
   627  001044  0EC8               	movlw	200
   628  001046                     u157:
   629  001046  D000               	nop2	
   630  001048  2EE8               	decfsz	wreg,f,c
   631  00104A  D7FD               	bra	u157
   632  00104C  B008               	btfsc	_LCDinterruptState,0,c
   633  00104E  D002               	bra	u15
   634  001050  9EF2               	bcf	intcon,7,c	;volatile
   635  001052  D001               	bra	u16
   636  001054                     u15:
   637  001054  8EF2               	bsf	intcon,7,c	;volatile
   638  001056                     u16:
   639                           
   640                           ;lcd.c: 52: data = (unsigned char) (data << 4);
   641  001056  3802               	swapf	lcdNibble@data,w,c
   642  001058  0BF0               	andlw	240
   643  00105A  6E02               	movwf	lcdNibble@data,c
   644                           
   645                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
   646  00105C  5002               	movf	lcdNibble@data,w,c
   647  00105E  0BF0               	andlw	240
   648  001060  6E01               	movwf	lcdNibble@temp,c
   649                           
   650                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
   651  001062  508C               	movf	3980,w,c	;volatile
   652  001064  0B0F               	andlw	15
   653  001066  6E8C               	movwf	3980,c	;volatile
   654                           
   655                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
   656  001068  5001               	movf	lcdNibble@temp,w,c
   657  00106A  108C               	iorwf	3980,w,c	;volatile
   658  00106C  6E8C               	movwf	3980,c	;volatile
   659                           
   660                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
   661  00106E  0E00               	movlw	0
   662  001070  BEF2               	btfsc	intcon,7,c	;volatile
   663  001072  0E01               	movlw	1
   664  001074  6E08               	movwf	_LCDinterruptState,c
   665  001076  9EF2               	bcf	intcon,7,c	;volatile
   666  001078  868C               	bsf	3980,3,c	;volatile
   667  00107A  0E53               	movlw	83
   668  00107C                     u167:
   669  00107C  2EE8               	decfsz	wreg,f,c
   670  00107E  D7FE               	bra	u167
   671  001080  F000               	nop	
   672  001082  968C               	bcf	3980,3,c	;volatile
   673  001084  0EC8               	movlw	200
   674  001086                     u177:
   675  001086  D000               	nop2	
   676  001088  2EE8               	decfsz	wreg,f,c
   677  00108A  D7FD               	bra	u177
   678  00108C  B008               	btfsc	_LCDinterruptState,0,c
   679  00108E  D002               	bra	u25
   680  001090  9EF2               	bcf	intcon,7,c	;volatile
   681  001092  D001               	bra	u26
   682  001094                     u25:
   683  001094  8EF2               	bsf	intcon,7,c	;volatile
   684  001096                     u26:
   685  001096  0012               	return		;funcret
   686  001098                     __end_of_lcdNibble:
   687                           	opt stack 0
   688                           tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           prodh	equ	0xFF4
   693                           prodl	equ	0xFF3
   694                           intcon	equ	0xFF2
   695                           wreg	equ	0xFE8
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           prodh	equ	0xFF4
   701                           prodl	equ	0xFF3
   702                           intcon	equ	0xFF2
   703                           wreg	equ	0xFE8
   704                           
   705                           	psect	rparam
   706  0000                     tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           prodh	equ	0xFF4
   711                           prodl	equ	0xFF3
   712                           intcon	equ	0xFF2
   713                           wreg	equ	0xFE8


Data Sizes:
    Strings     0
    Constant    23
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127      6       8
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_initLCD
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     210
                                              4 COMRAM     2     2      0
                            _initLCD
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _putch
     _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F      6       8       1        6.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       8      34        0.0%
DATA                 0      0       8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Feb 04 04:48:54 2018

                     u15 1054                       u16 1056                       u25 1094  
                     u26 1096              __CFG_CPD$ON 000000              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l114 10D4                      l109 10C8  
           __CFG_CPB$OFF 000000                      u107 1150                      u117 10FE  
                    u127 1132                      u137 1164                      u147 103C  
                    u157 1046                      u167 107C                      u177 1086  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   _LATA 000F89                     _LATB 000F8A                     _LATC 000F8B  
                   _LATD 000F8C                     _LATE 000F8D                     _main 1098  
                   _keys 1001                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000         __end_of_LCD_LEFT 1013                    ?_main 0001  
                  _PORTB 000F81                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 116C  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000             main@keypress 0005           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initLCD 1144           __CFG_EBTRB$OFF 000000                    _putch 1144  
                  tablat 000FF5        _LCDinterruptState 0008           __CFG_PBADEN$ON 000000  
        __initialization 116C             __end_of_main 10F8             __end_of_keys 1012  
         __CFG_OSC$HSPLL 000000        __end_of_LCD_RIGHT 1014                   ??_main 0005  
          __activetblptr 000001                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 ?_putch 0001           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
              ??_lcdInst 0003                ??_initLCD 0004             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization 1170            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_putch 1158       __size_of_lcdNibble 007E  
                ??_putch 0003     lcd@LCDinterruptState 0007        __end_of_lcdNibble 1098  
                __Hparam 0000                  __Lparam 0000             __psmallconst 1000  
                __pcinit 116C                  __ramtop 1000                  _lcdInst 1158  
                __ptext0 1098                  __ptext1 1144                  __ptext2 10F8  
                __ptext3 1158                  __ptext4 101A                  _initLCD 10F8  
              _LCD_RIGHT 1013     end_of_initialization 1170    __end_of_LCD_SIZE_HORZ 1016  
  __end_of_LCD_SIZE_VERT 1015                _PORTBbits 000F81      start_initialization 116C  
       __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0007        __CFG_CCP2MX$PORTC 000000  
              _lcdNibble 101A                 ?_lcdInst 0001                 ?_initLCD 0001  
            __smallconst 1000           __size_of_putch 0014                 _LCD_LEFT 1012  
               _LATDbits 000F8C         __CFG_WDTPS$32768 000000               ?_lcdNibble 0001  
          lcdNibble@data 0002            lcdNibble@temp 0001           _LCD_HORZ_LIMIT 1017  
               __Hrparam 0000                 __Lrparam 0000             __Lsmallconst 1000  
     __CFG_BOREN$SBORDIS 000000         __size_of_lcdInst 0014         __size_of_initLCD 004C  
 __end_of_LCD_HORZ_LIMIT 1018           _LCD_VERT_LIMIT 1016            __size_of_main 0060  
            ??_lcdNibble 0001                 main@temp 0006                putch@data 0003  
             _INTCONbits 000FF2   __end_of_LCD_VERT_LIMIT 1017            _LCD_SIZE_HORZ 1015  
          _LCD_SIZE_VERT 1014              lcdInst@data 0003  
