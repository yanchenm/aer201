

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Feb 04 19:14:58 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4620 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  000C26                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for operation@F3020
    77  000C26  FFFF               	dw	65535
    78  000C28  FFFF               	dw	65535
    79  000C2A  FFFF               	dw	65535
    80                           
    81                           	psect	mediumconst
    82  00FEAE                     __pmediumconst:
    83                           	opt stack 0
    84  00FEAE  00                 	db	0
    85  00FEAF                     _keys:
    86                           	opt stack 0
    87  00FEAF  31                 	db	49
    88  00FEB0  32                 	db	50
    89  00FEB1  33                 	db	51
    90  00FEB2  41                 	db	65
    91  00FEB3  34                 	db	52
    92  00FEB4  35                 	db	53
    93  00FEB5  36                 	db	54
    94  00FEB6  42                 	db	66
    95  00FEB7  37                 	db	55
    96  00FEB8  38                 	db	56
    97  00FEB9  39                 	db	57
    98  00FEBA  43                 	db	67
    99  00FEBB  2A                 	db	42
   100  00FEBC  30                 	db	48
   101  00FEBD  23                 	db	35
   102  00FEBE  44                 	db	68
   103  00FEBF  00                 	db	0
   104  00FEC0                     __end_of_keys:
   105                           	opt stack 0
   106  00FEC0                     _hexpowers:
   107                           	opt stack 0
   108  00FEC0  0001               	dw	1
   109  00FEC2  0010               	dw	16
   110  00FEC4  0100               	dw	256
   111  00FEC6  1000               	dw	4096
   112  00FEC8                     __end_of_hexpowers:
   113                           	opt stack 0
   114  00FEC8                     _currDate:
   115                           	opt stack 0
   116  00FEC8  00                 	db	0
   117  00FEC9  30                 	db	48
   118  00FECA  07                 	db	7
   119  00FECB  00                 	db	0
   120  00FECC  04                 	db	4
   121  00FECD  02                 	db	2
   122  00FECE  18                 	db	24
   123  00FECF                     __end_of_currDate:
   124                           	opt stack 0
   125  00FECF                     _LCD_LEFT:
   126                           	opt stack 0
   127  00FECF  00                 	db	0
   128  00FED0                     __end_of_LCD_LEFT:
   129                           	opt stack 0
   130  00FED0                     _LCD_RIGHT:
   131                           	opt stack 0
   132  00FED0  01                 	db	1
   133  00FED1                     __end_of_LCD_RIGHT:
   134                           	opt stack 0
   135  00FED1                     _LCD_SIZE_VERT:
   136                           	opt stack 0
   137  00FED1  02                 	db	2
   138  00FED2                     __end_of_LCD_SIZE_VERT:
   139                           	opt stack 0
   140  00FED2                     _LCD_SIZE_HORZ:
   141                           	opt stack 0
   142  00FED2  10                 	db	16
   143  00FED3                     __end_of_LCD_SIZE_HORZ:
   144                           	opt stack 0
   145  00FED3                     _LCD_VERT_LIMIT:
   146                           	opt stack 0
   147  00FED3  04                 	db	4
   148  00FED4                     __end_of_LCD_VERT_LIMIT:
   149                           	opt stack 0
   150  00FED4                     _LCD_HORZ_LIMIT:
   151                           	opt stack 0
   152  00FED4  14                 	db	20
   153  00FED5                     __end_of_LCD_HORZ_LIMIT:
   154                           	opt stack 0
   155  0000                     _SSPBUF	set	4041
   156  0000                     _SSPCON2bits	set	4037
   157  0000                     _SSPADD	set	4040
   158  0000                     _SSPCON2	set	4037
   159  0000                     _SSPCON1	set	4038
   160  0000                     _SSPSTAT	set	4039
   161  0000                     _TRISCbits	set	3988
   162  0000                     _SSPCON1bits	set	4038
   163  0000                     _PORTB	set	3969
   164  0000                     _PORTBbits	set	3969
   165  0000                     _ADCON1	set	4033
   166  0000                     _ADCON0	set	4034
   167  0000                     _TRISE	set	3990
   168  0000                     _TRISD	set	3989
   169  0000                     _TRISC	set	3988
   170  0000                     _TRISB	set	3987
   171  0000                     _TRISA	set	3986
   172  0000                     _LATE	set	3981
   173  0000                     _LATC	set	3979
   174  0000                     _LATB	set	3978
   175  0000                     _LATA	set	3977
   176  0000                     _INTCONbits	set	4082
   177  0000                     _LATD	set	3980
   178  0000                     _LATDbits	set	3980
   179  0000                     _INT1IF	set	32640
   180  0000                     _INT1IE	set	32643
   181  00FED5                     STR_1:
   182  00FED5  25                 	db	37
   183  00FED6  30                 	db	48	;'0'
   184  00FED7  32                 	db	50	;'2'
   185  00FED8  78                 	db	120	;'x'
   186  00FED9  2F                 	db	47
   187  00FEDA  25                 	db	37
   188  00FEDB  30                 	db	48	;'0'
   189  00FEDC  32                 	db	50	;'2'
   190  00FEDD  78                 	db	120	;'x'
   191  00FEDE  2F                 	db	47
   192  00FEDF  25                 	db	37
   193  00FEE0  30                 	db	48	;'0'
   194  00FEE1  32                 	db	50	;'2'
   195  00FEE2  78                 	db	120	;'x'
   196  00FEE3  20                 	db	32
   197  00FEE4  20                 	db	32
   198  00FEE5  20                 	db	32
   199  00FEE6  20                 	db	32
   200  00FEE7  25                 	db	37
   201  00FEE8  30                 	db	48	;'0'
   202  00FEE9  32                 	db	50	;'2'
   203  00FEEA  78                 	db	120	;'x'
   204  00FEEB  3A                 	db	58	;':'
   205  00FEEC  25                 	db	37
   206  00FEED  30                 	db	48	;'0'
   207  00FEEE  32                 	db	50	;'2'
   208  00FEEF  78                 	db	120	;'x'
   209  00FEF0  3A                 	db	58	;':'
   210  00FEF1  25                 	db	37
   211  00FEF2  30                 	db	48	;'0'
   212  00FEF3  32                 	db	50	;'2'
   213  00FEF4  78                 	db	120	;'x'
   214  00FEF5  00                 	db	0
   215  00FEF6                     STR_12:
   216  00FEF6  20                 	db	32
   217  00FEF7  20                 	db	32
   218  00FEF8  20                 	db	32
   219  00FEF9  20                 	db	32
   220  00FEFA  20                 	db	32
   221  00FEFB  54                 	db	84	;'T'
   222  00FEFC  52                 	db	82	;'R'
   223  00FEFD  59                 	db	89	;'Y'
   224  00FEFE  20                 	db	32
   225  00FEFF  41                 	db	65	;'A'
   226  00FF00  47                 	db	71	;'G'
   227  00FF01  41                 	db	65	;'A'
   228  00FF02  49                 	db	73	;'I'
   229  00FF03  4E                 	db	78	;'N'
   230  00FF04  20                 	db	32
   231  00FF05  20                 	db	32
   232  00FF06  20                 	db	32
   233  00FF07  20                 	db	32
   234  00FF08  20                 	db	32
   235  00FF09  20                 	db	32
   236  00FF0A  00                 	db	0
   237  00FF0B                     STR_2:
   238  00FF0B  20                 	db	32
   239  00FF0C  20                 	db	32
   240  00FF0D  20                 	db	32
   241  00FF0E  20                 	db	32
   242  00FF0F  20                 	db	32
   243  00FF10  2A                 	db	42
   244  00FF11  20                 	db	32
   245  00FF12  74                 	db	116	;'t'
   246  00FF13  6F                 	db	111	;'o'
   247  00FF14  20                 	db	32
   248  00FF15  42                 	db	66	;'B'
   249  00FF16  45                 	db	69	;'E'
   250  00FF17  47                 	db	71	;'G'
   251  00FF18  49                 	db	73	;'I'
   252  00FF19  4E                 	db	78	;'N'
   253  00FF1A  20                 	db	32
   254  00FF1B  20                 	db	32
   255  00FF1C  20                 	db	32
   256  00FF1D  20                 	db	32
   257  00FF1E  20                 	db	32
   258  00FF1F  00                 	db	0
   259  00FF20                     STR_11:
   260  00FF20  20                 	db	32
   261  00FF21  20                 	db	32
   262  00FF22  20                 	db	32
   263  00FF23  49                 	db	73	;'I'
   264  00FF24  4E                 	db	78	;'N'
   265  00FF25  56                 	db	86	;'V'
   266  00FF26  41                 	db	65	;'A'
   267  00FF27  4C                 	db	76	;'L'
   268  00FF28  49                 	db	73	;'I'
   269  00FF29  44                 	db	68	;'D'
   270  00FF2A  20                 	db	32
   271  00FF2B  49                 	db	73	;'I'
   272  00FF2C  4E                 	db	78	;'N'
   273  00FF2D  50                 	db	80	;'P'
   274  00FF2E  55                 	db	85	;'U'
   275  00FF2F  54                 	db	84	;'T'
   276  00FF30  20                 	db	32
   277  00FF31  20                 	db	32
   278  00FF32  20                 	db	32
   279  00FF33  20                 	db	32
   280  00FF34  00                 	db	0
   281  00FF35                     STR_6:
   282  00FF35  20                 	db	32
   283  00FF36  20                 	db	32
   284  00FF37  20                 	db	32
   285  00FF38  20                 	db	32
   286  00FF39  23                 	db	35
   287  00FF3A  20                 	db	32
   288  00FF3B  74                 	db	116	;'t'
   289  00FF3C  6F                 	db	111	;'o'
   290  00FF3D  20                 	db	32
   291  00FF3E  63                 	db	99	;'c'
   292  00FF3F  6F                 	db	111	;'o'
   293  00FF40  6E                 	db	110	;'n'
   294  00FF41  66                 	db	102	;'f'
   295  00FF42  69                 	db	105	;'i'
   296  00FF43  72                 	db	114	;'r'
   297  00FF44  6D                 	db	109	;'m'
   298  00FF45  20                 	db	32
   299  00FF46  20                 	db	32
   300  00FF47  20                 	db	32
   301  00FF48  20                 	db	32
   302  00FF49  00                 	db	0
   303  00FF4A                     STR_3:
   304  00FF4A  20                 	db	32
   305  00FF4B  20                 	db	32
   306  00FF4C  20                 	db	32
   307  00FF4D  20                 	db	32
   308  00FF4E  23                 	db	35
   309  00FF4F  20                 	db	32
   310  00FF50  66                 	db	102	;'f'
   311  00FF51  6F                 	db	111	;'o'
   312  00FF52  72                 	db	114	;'r'
   313  00FF53  20                 	db	32
   314  00FF54  4C                 	db	76	;'L'
   315  00FF55  4F                 	db	79	;'O'
   316  00FF56  47                 	db	71	;'G'
   317  00FF57  47                 	db	71	;'G'
   318  00FF58  49                 	db	73	;'I'
   319  00FF59  4E                 	db	78	;'N'
   320  00FF5A  47                 	db	71	;'G'
   321  00FF5B  20                 	db	32
   322  00FF5C  20                 	db	32
   323  00FF5D  20                 	db	32
   324  00FF5E  00                 	db	0
   325  00FF5F                     STR_4:
   326  00FF5F  20                 	db	32
   327  00FF60  20                 	db	32
   328  00FF61  20                 	db	32
   329  00FF62  41                 	db	65	;'A'
   330  00FF63  66                 	db	102	;'f'
   331  00FF64  74                 	db	116	;'t'
   332  00FF65  65                 	db	101	;'e'
   333  00FF66  72                 	db	114	;'r'
   334  00FF67  20                 	db	32
   335  00FF68  65                 	db	101	;'e'
   336  00FF69  6E                 	db	110	;'n'
   337  00FF6A  74                 	db	116	;'t'
   338  00FF6B  65                 	db	101	;'e'
   339  00FF6C  72                 	db	114	;'r'
   340  00FF6D  69                 	db	105	;'i'
   341  00FF6E  6E                 	db	110	;'n'
   342  00FF6F  67                 	db	103	;'g'
   343  00FF70  20                 	db	32
   344  00FF71  20                 	db	32
   345  00FF72  20                 	db	32
   346  00FF73  00                 	db	0
   347  00FF74                     STR_5:
   348  00FF74  20                 	db	32
   349  00FF75  20                 	db	32
   350  00FF76  73                 	db	115	;'s'
   351  00FF77  65                 	db	101	;'e'
   352  00FF78  6C                 	db	108	;'l'
   353  00FF79  65                 	db	101	;'e'
   354  00FF7A  63                 	db	99	;'c'
   355  00FF7B  74                 	db	116	;'t'
   356  00FF7C  69                 	db	105	;'i'
   357  00FF7D  6F                 	db	111	;'o'
   358  00FF7E  6E                 	db	110	;'n'
   359  00FF7F  2C                 	db	44
   360  00FF80  20                 	db	32
   361  00FF81  70                 	db	112	;'p'
   362  00FF82  72                 	db	114	;'r'
   363  00FF83  65                 	db	101	;'e'
   364  00FF84  73                 	db	115	;'s'
   365  00FF85  73                 	db	115	;'s'
   366  00FF86  20                 	db	32
   367  00FF87  20                 	db	32
   368  00FF88  00                 	db	0
   369  00FF89                     STR_16:
   370  00FF89  28                 	db	40
   371  00FF8A  33                 	db	51	;'3'
   372  00FF8B  29                 	db	41
   373  00FF8C  42                 	db	66	;'B'
   374  00FF8D  6F                 	db	111	;'o'
   375  00FF8E  74                 	db	116	;'t'
   376  00FF8F  68                 	db	104	;'h'
   377  00FF90  20                 	db	32
   378  00FF91  28                 	db	40
   379  00FF92  34                 	db	52	;'4'
   380  00FF93  29                 	db	41
   381  00FF94  41                 	db	65	;'A'
   382  00FF95  6C                 	db	108	;'l'
   383  00FF96  74                 	db	116	;'t'
   384  00FF97  65                 	db	101	;'e'
   385  00FF98  72                 	db	114	;'r'
   386  00FF99  6E                 	db	110	;'n'
   387  00FF9A  61                 	db	97	;'a'
   388  00FF9B  74                 	db	116	;'t'
   389  00FF9C  65                 	db	101	;'e'
   390  00FF9D  00                 	db	0
   391  00FF9E                     STR_17:
   392  00FF9E  30                 	db	48	;'0'
   393  00FF9F  31                 	db	49	;'1'
   394  00FFA0  32                 	db	50	;'2'
   395  00FFA1  33                 	db	51	;'3'
   396  00FFA2  34                 	db	52	;'4'
   397  00FFA3  35                 	db	53	;'5'
   398  00FFA4  36                 	db	54	;'6'
   399  00FFA5  37                 	db	55	;'7'
   400  00FFA6  38                 	db	56	;'8'
   401  00FFA7  39                 	db	57	;'9'
   402  00FFA8  61                 	db	97	;'a'
   403  00FFA9  62                 	db	98	;'b'
   404  00FFAA  63                 	db	99	;'c'
   405  00FFAB  64                 	db	100	;'d'
   406  00FFAC  65                 	db	101	;'e'
   407  00FFAD  66                 	db	102	;'f'
   408  00FFAE  00                 	db	0
   409  00FFAF                     STR_7:
   410  00FFAF  4E                 	db	78	;'N'
   411  00FFB0  75                 	db	117	;'u'
   412  00FFB1  6D                 	db	109	;'m'
   413  00FFB2  62                 	db	98	;'b'
   414  00FFB3  65                 	db	101	;'e'
   415  00FFB4  72                 	db	114	;'r'
   416  00FFB5  20                 	db	32
   417  00FFB6  6F                 	db	111	;'o'
   418  00FFB7  66                 	db	102	;'f'
   419  00FFB8  20                 	db	32
   420  00FFB9  70                 	db	112	;'p'
   421  00FFBA  69                 	db	105	;'i'
   422  00FFBB  6C                 	db	108	;'l'
   423  00FFBC  6C                 	db	108	;'l'
   424  00FFBD  73                 	db	115	;'s'
   425  00FFBE  3A                 	db	58	;':'
   426  00FFBF  00                 	db	0
   427  00FFC0                     STR_13:
   428  00FFC0  52                 	db	82	;'R'
   429  00FFC1  65                 	db	101	;'e'
   430  00FFC2  70                 	db	112	;'p'
   431  00FFC3  65                 	db	101	;'e'
   432  00FFC4  74                 	db	116	;'t'
   433  00FFC5  69                 	db	105	;'i'
   434  00FFC6  74                 	db	116	;'t'
   435  00FFC7  69                 	db	105	;'i'
   436  00FFC8  6F                 	db	111	;'o'
   437  00FFC9  6E                 	db	110	;'n'
   438  00FFCA  3A                 	db	58	;':'
   439  00FFCB  20                 	db	32
   440  00FFCC  5F                 	db	95	;'_'
   441  00FFCD  00                 	db	0
   442  00FFCE                     STR_15:
   443  00FFCE  28                 	db	40
   444  00FFCF  32                 	db	50	;'2'
   445  00FFD0  29                 	db	41
   446  00FFD1  41                 	db	65	;'A'
   447  00FFD2  66                 	db	102	;'f'
   448  00FFD3  74                 	db	116	;'t'
   449  00FFD4  65                 	db	101	;'e'
   450  00FFD5  72                 	db	114	;'r'
   451  00FFD6  6E                 	db	110	;'n'
   452  00FFD7  6F                 	db	111	;'o'
   453  00FFD8  6F                 	db	111	;'o'
   454  00FFD9  6E                 	db	110	;'n'
   455  00FFDA  00                 	db	0
   456  00FFDB                     STR_14:
   457  00FFDB  28                 	db	40
   458  00FFDC  31                 	db	49	;'1'
   459  00FFDD  29                 	db	41
   460  00FFDE  4D                 	db	77	;'M'
   461  00FFDF  6F                 	db	111	;'o'
   462  00FFE0  72                 	db	114	;'r'
   463  00FFE1  6E                 	db	110	;'n'
   464  00FFE2  69                 	db	105	;'i'
   465  00FFE3  6E                 	db	110	;'n'
   466  00FFE4  67                 	db	103	;'g'
   467  00FFE5  00                 	db	0
   468  00FFE6                     STR_9:
   469  00FFE6  20                 	db	32
   470  00FFE7  20                 	db	32
   471  00FFE8  20                 	db	32
   472  00FFE9  46                 	db	70	;'F'
   473  00FFEA  3A                 	db	58	;':'
   474  00FFEB  20                 	db	32
   475  00FFEC  5F                 	db	95	;'_'
   476  00FFED  00                 	db	0
   477  00FFEE                     STR_10:
   478  00FFEE  20                 	db	32
   479  00FFEF  20                 	db	32
   480  00FFF0  20                 	db	32
   481  00FFF1  4C                 	db	76	;'L'
   482  00FFF2  3A                 	db	58	;':'
   483  00FFF3  20                 	db	32
   484  00FFF4  5F                 	db	95	;'_'
   485  00FFF5  00                 	db	0
   486  00FFF6                     STR_8:
   487  00FFF6  20                 	db	32
   488  00FFF7  20                 	db	32
   489  00FFF8  20                 	db	32
   490  00FFF9  52                 	db	82	;'R'
   491  00FFFA  3A                 	db	58	;':'
   492  00FFFB  20                 	db	32
   493  00FFFC  5F                 	db	95	;'_'
   494  00FFFD  00                 	db	0
   495                           
   496                           ; #config settings
   497  00FFFE  00                 	db	0	; dummy byte at the end
   498  0000                     
   499                           	psect	cinit
   500  000B14                     __pcinit:
   501                           	opt stack 0
   502  000B14                     start_initialization:
   503                           	opt stack 0
   504  000B14                     __initialization:
   505                           	opt stack 0
   506                           
   507                           ; Initialize objects allocated to COMRAM (6 bytes)
   508                           ; load TBLPTR registers with __pidataCOMRAM
   509  000B14  0E26               	movlw	low __pidataCOMRAM
   510  000B16  6EF6               	movwf	tblptrl,c
   511  000B18  0E0C               	movlw	high __pidataCOMRAM
   512  000B1A  6EF7               	movwf	tblptrh,c
   513  000B1C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   514  000B1E  6EF8               	movwf	tblptru,c
   515  000B20  EE00  F057         	lfsr	0,__pdataCOMRAM
   516  000B24  EE10 F006          	lfsr	1,6
   517  000B28                     copy_data0:
   518  000B28  0009               	tblrd		*+
   519  000B2A  CFF5 FFEE          	movff	tablat,postinc0
   520  000B2E  50E5               	movf	postdec1,w,c
   521  000B30  50E1               	movf	fsr1l,w,c
   522  000B32  E1FA               	bnz	copy_data0
   523                           
   524                           ; Clear objects allocated to COMRAM (8 bytes)
   525  000B34  EE00  F04F         	lfsr	0,__pbssCOMRAM
   526  000B38  0E08               	movlw	8
   527  000B3A                     clear_0:
   528  000B3A  6AEE               	clrf	postinc0,c
   529  000B3C  06E8               	decf	wreg,f,c
   530  000B3E  E1FD               	bnz	clear_0
   531  000B40                     end_of_initialization:
   532                           	opt stack 0
   533  000B40                     __end_of__initialization:
   534                           	opt stack 0
   535  000B40  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   536  000B42  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   537  000B44  0E00               	movlw	low (__Lmediumconst shr (0+16))
   538  000B46  6EF8               	movwf	tblptru,c
   539  000B48  0100               	movlb	0
   540  000B4A  EF37  F003         	goto	_main	;jump to C main() function
   541                           tblptru	equ	0xFF8
   542                           tblptrh	equ	0xFF7
   543                           tblptrl	equ	0xFF6
   544                           tablat	equ	0xFF5
   545                           postinc0	equ	0xFEE
   546                           wreg	equ	0xFE8
   547                           postdec1	equ	0xFE5
   548                           fsr1l	equ	0xFE1
   549                           
   550                           	psect	bssCOMRAM
   551  00004F                     __pbssCOMRAM:
   552                           	opt stack 0
   553  00004F                     _num_runs:
   554                           	opt stack 0
   555  00004F                     	ds	2
   556  000051                     _begin_logging:
   557                           	opt stack 0
   558  000051                     	ds	2
   559  000053                     _begin_operation:
   560                           	opt stack 0
   561  000053                     	ds	2
   562  000055                     	ds	1
   563  000056                     _LCDinterruptState:
   564                           	opt stack 0
   565  000056                     	ds	1
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           postinc0	equ	0xFEE
   571                           wreg	equ	0xFE8
   572                           postdec1	equ	0xFE5
   573                           fsr1l	equ	0xFE1
   574                           
   575                           	psect	dataCOMRAM
   576  000057                     __pdataCOMRAM:
   577                           	opt stack 0
   578  000057                     operation@F3020:
   579                           	opt stack 0
   580  000057                     	ds	6
   581                           tblptru	equ	0xFF8
   582                           tblptrh	equ	0xFF7
   583                           tblptrl	equ	0xFF6
   584                           tablat	equ	0xFF5
   585                           postinc0	equ	0xFEE
   586                           wreg	equ	0xFE8
   587                           postdec1	equ	0xFE5
   588                           fsr1l	equ	0xFE1
   589                           
   590                           	psect	cstackCOMRAM
   591  000001                     __pcstackCOMRAM:
   592                           	opt stack 0
   593  000001                     ??_interruptHandler:
   594  000001                     
   595                           ; 1 bytes @ 0x0
   596  000001                     	ds	18
   597  000013                     interruptHandler@keypress:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x12
   601  000013                     	ds	1
   602  000014                     ??_isdigit:
   603  000014                     ??_I2C_Master_Wait:
   604  000014                     ?___wmul:
   605                           	opt stack 0
   606  000014                     ?___lwdiv:
   607                           	opt stack 0
   608  000014                     ?___lldiv:
   609                           	opt stack 0
   610  000014                     lcdNibble@temp:
   611                           	opt stack 0
   612  000014                     ___wmul@multiplier:
   613                           	opt stack 0
   614  000014                     ___lwdiv@dividend:
   615                           	opt stack 0
   616  000014                     ___lldiv@dividend:
   617                           	opt stack 0
   618                           
   619                           ; 4 bytes @ 0x13
   620  000014                     	ds	1
   621  000015                     lcdNibble@data:
   622                           	opt stack 0
   623  000015                     I2C_Master_Read@ackBit:
   624                           	opt stack 0
   625  000015                     _isdigit$773:
   626                           	opt stack 0
   627  000015                     I2C_Master_Write@byteToWrite:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x14
   631  000015                     	ds	1
   632  000016                     lcdInst@data:
   633                           	opt stack 0
   634  000016                     putch@data:
   635                           	opt stack 0
   636  000016                     I2C_Master_Read@receivedByte:
   637                           	opt stack 0
   638  000016                     isdigit@c:
   639                           	opt stack 0
   640  000016                     ___wmul@multiplicand:
   641                           	opt stack 0
   642  000016                     ___lwdiv@divisor:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x15
   646  000016                     	ds	1
   647  000017                     ??_initLCD:
   648  000017                     lcd_shift_cursor@direction:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x16
   652  000017                     	ds	1
   653  000018                     lcd_shift_cursor@numChars:
   654                           	opt stack 0
   655  000018                     ___wmul@product:
   656                           	opt stack 0
   657  000018                     ___lwdiv@quotient:
   658                           	opt stack 0
   659  000018                     ___lldiv@divisor:
   660                           	opt stack 0
   661                           
   662                           ; 4 bytes @ 0x17
   663  000018                     	ds	1
   664  000019                     lcd_shift_cursor@n:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x18
   668  000019                     	ds	1
   669  00001A                     lcd_set_cursor@y:
   670                           	opt stack 0
   671  00001A                     ___lwdiv@counter:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x19
   675  00001A                     	ds	1
   676  00001B                     ??_lcd_set_cursor:
   677  00001B                     ?_printf:
   678                           	opt stack 0
   679  00001B                     printf@f:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x1A
   683  00001B                     	ds	1
   684  00001C                     lcd_set_cursor@x:
   685                           	opt stack 0
   686  00001C                     ___lldiv@quotient:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0x1B
   690  00001C                     	ds	4
   691  000020                     ___lldiv@counter:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x1F
   695  000020                     	ds	1
   696  000021                     I2C_Master_Init@clockFreq:
   697                           	opt stack 0
   698                           
   699                           ; 4 bytes @ 0x20
   700  000021                     	ds	4
   701  000025                     ??_I2C_Master_Init:
   702                           
   703                           ; 1 bytes @ 0x24
   704  000025                     	ds	4
   705  000029                     ??_printf:
   706                           
   707                           ; 1 bytes @ 0x28
   708  000029                     	ds	4
   709  00002D                     printf@ap:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x2C
   713  00002D                     	ds	2
   714  00002F                     printf@idx:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x2E
   718  00002F                     	ds	1
   719  000030                     printf@flag:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x2F
   723  000030                     	ds	1
   724  000031                     printf@val:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x30
   728  000031                     	ds	2
   729  000033                     printf@prec:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x32
   733  000033                     	ds	1
   734  000034                     printf@width:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x33
   738  000034                     	ds	2
   739  000036                     printf@c:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x35
   743  000036                     	ds	1
   744  000037                     ??_operation:
   745                           
   746                           ; 1 bytes @ 0x36
   747  000037                     	ds	2
   748  000039                     operation@repetition:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x38
   752  000039                     	ds	1
   753  00003A                     operation@frequency:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x39
   757  00003A                     	ds	1
   758  00003B                     operation@keypress:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x3A
   762  00003B                     	ds	1
   763  00003C                     operation@keypress_382:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x3B
   767  00003C                     	ds	1
   768  00003D                     operation@keypress_390:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x3C
   772  00003D                     	ds	1
   773  00003E                     operation@keypress_383:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x3D
   777  00003E                     	ds	1
   778  00003F                     operation@prescription:
   779                           	opt stack 0
   780                           
   781                           ; 6 bytes @ 0x3E
   782  00003F                     	ds	6
   783  000045                     ??_main:
   784                           
   785                           ; 1 bytes @ 0x44
   786  000045                     	ds	2
   787  000047                     main@time:
   788                           	opt stack 0
   789                           
   790                           ; 7 bytes @ 0x46
   791  000047                     	ds	7
   792  00004E                     main@i:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x4D
   796  00004E                     	ds	1
   797                           tblptru	equ	0xFF8
   798                           tblptrh	equ	0xFF7
   799                           tblptrl	equ	0xFF6
   800                           tablat	equ	0xFF5
   801                           postinc0	equ	0xFEE
   802                           wreg	equ	0xFE8
   803                           postdec1	equ	0xFE5
   804                           fsr1l	equ	0xFE1
   805                           
   806 ;;
   807 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   808 ;;
   809 ;; *************** function _main *****************
   810 ;; Defined at:
   811 ;;		line 38 in file "main.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  time            7   70[COMRAM] unsigned char [7]
   816 ;;  i               1   77[COMRAM] unsigned char 
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   827 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   828 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   829 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   830 ;;Total ram usage:       10 bytes
   831 ;; Hardware stack levels required when called:    6
   832 ;; This function calls:
   833 ;;		_I2C_Master_Init
   834 ;;		_I2C_Master_Read
   835 ;;		_I2C_Master_Start
   836 ;;		_I2C_Master_Stop
   837 ;;		_I2C_Master_Write
   838 ;;		_initLCD
   839 ;;		_lcdInst
   840 ;;		_logging
   841 ;;		_operation
   842 ;;		_printf
   843 ;; This function is called by:
   844 ;;		Startup code after reset
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           	psect	text0
   849  00066E                     __ptext0:
   850                           	opt stack 0
   851  00066E                     _main:
   852                           	opt stack 25
   853                           
   854                           ;main.c: 44: LATA = 0x00;
   855                           
   856                           ;incstack = 0
   857  00066E  0E00               	movlw	0
   858  000670  6E89               	movwf	3977,c	;volatile
   859                           
   860                           ;main.c: 45: LATB = 0x00;
   861  000672  0E00               	movlw	0
   862  000674  6E8A               	movwf	3978,c	;volatile
   863                           
   864                           ;main.c: 46: LATC = 0x00;
   865  000676  0E00               	movlw	0
   866  000678  6E8B               	movwf	3979,c	;volatile
   867                           
   868                           ;main.c: 47: LATD = 0x00;
   869  00067A  0E00               	movlw	0
   870  00067C  6E8C               	movwf	3980,c	;volatile
   871                           
   872                           ;main.c: 48: LATE = 0x00;
   873  00067E  0E00               	movlw	0
   874  000680  6E8D               	movwf	3981,c	;volatile
   875                           
   876                           ;main.c: 52: TRISA = 0xFF;
   877  000682  6892               	setf	3986,c	;volatile
   878                           
   879                           ;main.c: 53: TRISB = 0xFF;
   880  000684  6893               	setf	3987,c	;volatile
   881                           
   882                           ;main.c: 54: TRISC = 0b10000000;
   883  000686  0E80               	movlw	128
   884  000688  6E94               	movwf	3988,c	;volatile
   885                           
   886                           ;main.c: 58: TRISD = 0x00;
   887  00068A  0E00               	movlw	0
   888  00068C  6E95               	movwf	3989,c	;volatile
   889                           
   890                           ;main.c: 59: TRISE = 0x00;
   891  00068E  0E00               	movlw	0
   892  000690  6E96               	movwf	3990,c	;volatile
   893                           
   894                           ;main.c: 62: ADCON0 = 0x00;
   895  000692  0E00               	movlw	0
   896  000694  6EC2               	movwf	4034,c	;volatile
   897                           
   898                           ;main.c: 63: ADCON1 = 0b00001111;
   899  000696  0E0F               	movlw	15
   900  000698  6EC1               	movwf	4033,c	;volatile
   901                           
   902                           ;main.c: 65: INT1IE = 1;
   903  00069A  86F0               	bsf	intcon3,3,c	;volatile
   904                           
   905                           ;main.c: 66: (INTCONbits.GIE = 1);
   906  00069C  8EF2               	bsf	intcon,7,c	;volatile
   907                           
   908                           ;main.c: 71: initLCD();
   909  00069E  EC64  F005         	call	_initLCD	;wreg free
   910                           
   911                           ;main.c: 73: I2C_Master_Init(100000);
   912  0006A2  0EA0               	movlw	160
   913  0006A4  6E21               	movwf	I2C_Master_Init@clockFreq,c
   914  0006A6  0E86               	movlw	134
   915  0006A8  6E22               	movwf	I2C_Master_Init@clockFreq+1,c
   916  0006AA  0E01               	movlw	1
   917  0006AC  6E23               	movwf	I2C_Master_Init@clockFreq+2,c
   918  0006AE  0E00               	movlw	0
   919  0006B0  6E24               	movwf	I2C_Master_Init@clockFreq+3,c
   920  0006B2  EC0D  F005         	call	_I2C_Master_Init	;wreg free
   921  0006B6                     
   922                           ;main.c: 88: I2C_Master_Start();
   923  0006B6  EC0F  F006         	call	_I2C_Master_Start	;wreg free
   924                           
   925                           ;main.c: 89: I2C_Master_Write(0b11010000);
   926  0006BA  0E00               	movlw	0
   927  0006BC  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
   928  0006BE  0ED0               	movlw	208
   929  0006C0  6E15               	movwf	I2C_Master_Write@byteToWrite,c
   930  0006C2  EC06  F006         	call	_I2C_Master_Write	;wreg free
   931                           
   932                           ;main.c: 90: I2C_Master_Write(0x00);
   933  0006C6  0E00               	movlw	0
   934  0006C8  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
   935  0006CA  0E00               	movlw	0
   936  0006CC  6E15               	movwf	I2C_Master_Write@byteToWrite,c
   937  0006CE  EC06  F006         	call	_I2C_Master_Write	;wreg free
   938                           
   939                           ;main.c: 91: I2C_Master_Stop();
   940  0006D2  EC0B  F006         	call	_I2C_Master_Stop	;wreg free
   941                           
   942                           ;main.c: 94: I2C_Master_Start();
   943  0006D6  EC0F  F006         	call	_I2C_Master_Start	;wreg free
   944                           
   945                           ;main.c: 95: I2C_Master_Write(0b11010001);
   946  0006DA  0E00               	movlw	0
   947  0006DC  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
   948  0006DE  0ED1               	movlw	209
   949  0006E0  6E15               	movwf	I2C_Master_Write@byteToWrite,c
   950  0006E2  EC06  F006         	call	_I2C_Master_Write	;wreg free
   951                           
   952                           ;main.c: 96: for(i = 0; i < 6; i++){
   953  0006E6  0E00               	movlw	0
   954  0006E8  6E4E               	movwf	main@i,c
   955  0006EA                     l2006:
   956  0006EA  0E05               	movlw	5
   957  0006EC  644E               	cpfsgt	main@i,c
   958  0006EE  D001               	goto	l149
   959  0006F0  D00E               	goto	u1320
   960  0006F2                     l149:
   961                           
   962                           ;main.c: 97: time[i] = I2C_Master_Read(0);
   963  0006F2  504E               	movf	main@i,w,c
   964  0006F4  0D01               	mullw	1
   965  0006F6  0E47               	movlw	low main@time
   966  0006F8  24F3               	addwf	prodl,w,c
   967  0006FA  6ED9               	movwf	fsr2l,c
   968  0006FC  0E00               	movlw	high main@time
   969  0006FE  20F4               	addwfc	prodh,w,c
   970  000700  6EDA               	movwf	fsr2h,c
   971  000702  0E00               	movlw	0
   972  000704  ECBA  F005         	call	_I2C_Master_Read
   973  000708  6EDF               	movwf	indf2,c
   974  00070A  2A4E               	incf	main@i,f,c
   975  00070C  D7EE               	goto	l2006
   976  00070E                     u1320:
   977                           
   978                           ;main.c: 98: }
   979                           ;main.c: 99: time[6] = I2C_Master_Read(1);
   980  00070E  0E01               	movlw	1
   981  000710  ECBA  F005         	call	_I2C_Master_Read
   982  000714  6E4D               	movwf	main@time+6,c
   983                           
   984                           ;main.c: 100: I2C_Master_Stop();
   985  000716  EC0B  F006         	call	_I2C_Master_Stop	;wreg free
   986                           
   987                           ;main.c: 102: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
   988  00071A  0E0C               	movlw	12
   989  00071C  ECF3  F005         	call	_lcdInst
   990                           
   991                           ;main.c: 104: if (begin_operation || begin_logging) {
   992  000720  5053               	movf	_begin_operation,w,c
   993  000722  1054               	iorwf	_begin_operation+1,w,c
   994  000724  A4D8               	btfss	status,2,c
   995  000726  D045               	goto	l154
   996  000728  5051               	movf	_begin_logging,w,c
   997  00072A  1052               	iorwf	_begin_logging+1,w,c
   998  00072C  A4D8               	btfss	status,2,c
   999  00072E  D041               	goto	l154
  1000                           
  1001                           ;main.c: 106: }
  1002                           ;main.c: 109: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1003                           
  1004                           ;main.c: 105: break;
  1005  000730  0E80               	movlw	128
  1006  000732  ECF3  F005         	call	_lcdInst
  1007  000736  0E41               	movlw	65
  1008  000738  6E45               	movwf	??_main& (0+255),c
  1009  00073A  0EEE               	movlw	238
  1010  00073C                     u1397:
  1011  00073C  2EE8               	decfsz	wreg,f,c
  1012  00073E  D7FE               	bra	u1397
  1013  000740  2E45               	decfsz	??_main& (0+255),f,c
  1014  000742  D7FC               	bra	u1397
  1015  000744  D000               	nop2	
  1016                           
  1017                           ;main.c: 110: printf("%02x/%02x/%02x    %02x:%02x:%02x", time[6],time[5],time[4],time[2]
      +                          ,time[1],time[0]);
  1018  000746  0ED5               	movlw	low STR_1
  1019  000748  6E1B               	movwf	printf@f,c
  1020  00074A  0EFE               	movlw	high STR_1
  1021  00074C  6E1C               	movwf	printf@f+1,c
  1022  00074E  C04D  F01D         	movff	main@time+6,?_printf+2
  1023  000752  6A1E               	clrf	?_printf+3,c
  1024  000754  C04C  F01F         	movff	main@time+5,?_printf+4
  1025  000758  6A20               	clrf	?_printf+5,c
  1026  00075A  C04B  F021         	movff	main@time+4,?_printf+6
  1027  00075E  6A22               	clrf	?_printf+7,c
  1028  000760  C049  F023         	movff	main@time+2,?_printf+8
  1029  000764  6A24               	clrf	?_printf+9,c
  1030  000766  C048  F025         	movff	main@time+1,?_printf+10
  1031  00076A  6A26               	clrf	?_printf+11,c
  1032  00076C  C047  F027         	movff	main@time,?_printf+12
  1033  000770  6A28               	clrf	?_printf+13,c
  1034  000772  EC3D  F002         	call	_printf	;wreg free
  1035                           
  1036                           ;main.c: 111: lcdInst(0x94);;
  1037  000776  0E94               	movlw	148
  1038  000778  ECF3  F005         	call	_lcdInst
  1039                           
  1040                           ;main.c: 112: printf("     * to BEGIN     ");
  1041  00077C  0E0B               	movlw	low STR_2
  1042  00077E  6E1B               	movwf	printf@f,c
  1043  000780  0EFF               	movlw	high STR_2
  1044  000782  6E1C               	movwf	printf@f+1,c
  1045  000784  EC3D  F002         	call	_printf	;wreg free
  1046                           
  1047                           ;main.c: 113: lcdInst(0xD4);;
  1048  000788  0ED4               	movlw	212
  1049  00078A  ECF3  F005         	call	_lcdInst
  1050                           
  1051                           ;main.c: 114: printf("    # for LOGGING   ");
  1052  00078E  0E4A               	movlw	low STR_3
  1053  000790  6E1B               	movwf	printf@f,c
  1054  000792  0EFF               	movlw	high STR_3
  1055  000794  6E1C               	movwf	printf@f+1,c
  1056  000796  EC3D  F002         	call	_printf	;wreg free
  1057                           
  1058                           ;main.c: 115: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1059  00079A  0E33               	movlw	51
  1060  00079C  6E46               	movwf	(??_main+1)& (0+255),c
  1061  00079E  0EBB               	movlw	187
  1062  0007A0  6E45               	movwf	??_main& (0+255),c
  1063  0007A2  0EE0               	movlw	224
  1064  0007A4                     u1407:
  1065  0007A4  2EE8               	decfsz	wreg,f,c
  1066  0007A6  D7FE               	bra	u1407
  1067  0007A8  2E45               	decfsz	??_main& (0+255),f,c
  1068  0007AA  D7FC               	bra	u1407
  1069  0007AC  2E46               	decfsz	(??_main+1)& (0+255),f,c
  1070  0007AE  D7FA               	bra	u1407
  1071  0007B0  D782               	goto	l148
  1072  0007B2                     l154:
  1073                           
  1074                           ;main.c: 116: }
  1075                           ;main.c: 118: if (begin_operation) {
  1076  0007B2  5053               	movf	_begin_operation,w,c
  1077  0007B4  1054               	iorwf	_begin_operation+1,w,c
  1078  0007B6  B4D8               	btfsc	status,2,c
  1079  0007B8  D008               	goto	l156
  1080                           
  1081                           ;main.c: 119: begin_operation = 0;
  1082  0007BA  0E00               	movlw	0
  1083  0007BC  6E54               	movwf	_begin_operation+1,c
  1084  0007BE  0E00               	movlw	0
  1085  0007C0  6E53               	movwf	_begin_operation,c
  1086                           
  1087                           ;main.c: 120: operation();
  1088  0007C2  EC09  F000         	call	_operation	;wreg free
  1089                           
  1090                           ;main.c: 121: }
  1091  0007C6  EF07  F000         	goto	start
  1092  0007CA                     l156:
  1093                           
  1094                           ;main.c: 122: else if (begin_logging) {
  1095  0007CA  5051               	movf	_begin_logging,w,c
  1096  0007CC  1052               	iorwf	_begin_logging+1,w,c
  1097  0007CE  B4D8               	btfsc	status,2,c
  1098  0007D0  EF07  F000         	goto	start
  1099                           
  1100                           ;main.c: 123: begin_logging = 0;
  1101  0007D4  0E00               	movlw	0
  1102  0007D6  6E52               	movwf	_begin_logging+1,c
  1103  0007D8  0E00               	movlw	0
  1104  0007DA  6E51               	movwf	_begin_logging,c
  1105                           
  1106                           ;main.c: 124: logging();
  1107  0007DC  EC16  F006         	call	_logging	;wreg free
  1108  0007E0  EF07  F000         	goto	start
  1109  0007E4                     __end_of_main:
  1110                           	opt stack 0
  1111                           tblptru	equ	0xFF8
  1112                           tblptrh	equ	0xFF7
  1113                           tblptrl	equ	0xFF6
  1114                           tablat	equ	0xFF5
  1115                           prodh	equ	0xFF4
  1116                           prodl	equ	0xFF3
  1117                           intcon	equ	0xFF2
  1118                           intcon3	equ	0xFF0
  1119                           postinc0	equ	0xFEE
  1120                           wreg	equ	0xFE8
  1121                           postdec1	equ	0xFE5
  1122                           fsr1l	equ	0xFE1
  1123                           indf2	equ	0xFDF
  1124                           fsr2h	equ	0xFDA
  1125                           fsr2l	equ	0xFD9
  1126                           status	equ	0xFD8
  1127                           
  1128 ;; *************** function _operation *****************
  1129 ;; Defined at:
  1130 ;;		line 128 in file "main.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;		None
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;  keypress        1   61[COMRAM] unsigned char 
  1135 ;;  keypress        1   59[COMRAM] unsigned char 
  1136 ;;  keypress        1   58[COMRAM] unsigned char 
  1137 ;;  keypress        1   60[COMRAM] unsigned char 
  1138 ;;  prescription    6   62[COMRAM] int [3]
  1139 ;;  frequency       1   57[COMRAM] enum E3007
  1140 ;;  repetition      1   56[COMRAM] enum E3001
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  1    wreg      void 
  1143 ;; Registers used:
  1144 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1151 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1152 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1153 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1154 ;;Total ram usage:       14 bytes
  1155 ;; Hardware stack levels used:    1
  1156 ;; Hardware stack levels required when called:    5
  1157 ;; This function calls:
  1158 ;;		_lcdInst
  1159 ;;		_lcd_set_cursor
  1160 ;;		_printf
  1161 ;;		_putch
  1162 ;; This function is called by:
  1163 ;;		_main
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text1
  1168  000012                     __ptext1:
  1169                           	opt stack 0
  1170  000012                     _operation:
  1171                           	opt stack 25
  1172                           
  1173                           ;main.c: 130: (INTCONbits.GIE = 0);
  1174                           
  1175                           ;incstack = 0
  1176  000012  9EF2               	bcf	intcon,7,c	;volatile
  1177                           
  1178                           ;main.c: 132: int prescription[3] = {-1, -1, -1};
  1179  000014  EE20  F057         	lfsr	2,operation@F3020
  1180  000018  EE10  F03F         	lfsr	1,operation@prescription
  1181  00001C  0E05               	movlw	5
  1182  00001E                     u1001:
  1183  00001E  CFDB FFE3          	movff	plusw2,plusw1
  1184  000022  06E8               	decf	wreg,f,c
  1185  000024  E2FC               	bc	u1001
  1186                           
  1187                           ;main.c: 133: enum rep repetition = na_rep;
  1188  000026  0E04               	movlw	4
  1189  000028  6E39               	movwf	operation@repetition,c
  1190                           
  1191                           ;main.c: 134: enum freq frequency = na_freq;
  1192  00002A  0E03               	movlw	3
  1193  00002C  6E3A               	movwf	operation@frequency,c
  1194                           
  1195                           ;main.c: 136: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1196  00002E  0E01               	movlw	1
  1197  000030  ECF3  F005         	call	_lcdInst
  1198  000034  0EC3               	movlw	195
  1199  000036  6E37               	movwf	??_operation& (0+255),c
  1200  000038  0ECD               	movlw	205
  1201  00003A                     u1417:
  1202  00003A  2EE8               	decfsz	wreg,f,c
  1203  00003C  D7FE               	bra	u1417
  1204  00003E  2E37               	decfsz	??_operation& (0+255),f,c
  1205  000040  D7FC               	bra	u1417
  1206  000042  F000               	nop	
  1207                           
  1208                           ;main.c: 137: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1209  000044  0E80               	movlw	128
  1210  000046  ECF3  F005         	call	_lcdInst
  1211  00004A  0E41               	movlw	65
  1212  00004C  6E37               	movwf	??_operation& (0+255),c
  1213  00004E  0EEE               	movlw	238
  1214  000050                     u1427:
  1215  000050  2EE8               	decfsz	wreg,f,c
  1216  000052  D7FE               	bra	u1427
  1217  000054  2E37               	decfsz	??_operation& (0+255),f,c
  1218  000056  D7FC               	bra	u1427
  1219  000058  D000               	nop2	
  1220                           
  1221                           ;main.c: 138: printf("   After entering   ");
  1222  00005A  0E5F               	movlw	low STR_4
  1223  00005C  6E1B               	movwf	printf@f,c
  1224  00005E  0EFF               	movlw	high STR_4
  1225  000060  6E1C               	movwf	printf@f+1,c
  1226  000062  EC3D  F002         	call	_printf	;wreg free
  1227                           
  1228                           ;main.c: 139: lcdInst(0xC0);;
  1229  000066  0EC0               	movlw	192
  1230  000068  ECF3  F005         	call	_lcdInst
  1231                           
  1232                           ;main.c: 140: printf("  selection, press  ");
  1233  00006C  0E74               	movlw	low STR_5
  1234  00006E  6E1B               	movwf	printf@f,c
  1235  000070  0EFF               	movlw	high STR_5
  1236  000072  6E1C               	movwf	printf@f+1,c
  1237  000074  EC3D  F002         	call	_printf	;wreg free
  1238                           
  1239                           ;main.c: 141: lcdInst(0x94);;
  1240  000078  0E94               	movlw	148
  1241  00007A  ECF3  F005         	call	_lcdInst
  1242                           
  1243                           ;main.c: 142: printf("    # to confirm    ");
  1244  00007E  0E35               	movlw	low STR_6
  1245  000080  6E1B               	movwf	printf@f,c
  1246  000082  0EFF               	movlw	high STR_6
  1247  000084  6E1C               	movwf	printf@f+1,c
  1248  000086  EC3D  F002         	call	_printf	;wreg free
  1249                           
  1250                           ;main.c: 143: _delay((unsigned long)((1800)*(40000000/4000.0)));
  1251  00008A  0E5C               	movlw	92
  1252  00008C  6E38               	movwf	(??_operation+1)& (0+255),c
  1253  00008E  0E51               	movlw	81
  1254  000090  6E37               	movwf	??_operation& (0+255),c
  1255  000092  0E60               	movlw	96
  1256  000094                     u1437:
  1257  000094  2EE8               	decfsz	wreg,f,c
  1258  000096  D7FE               	bra	u1437
  1259  000098  2E37               	decfsz	??_operation& (0+255),f,c
  1260  00009A  D7FC               	bra	u1437
  1261  00009C  2E38               	decfsz	(??_operation+1)& (0+255),f,c
  1262  00009E  D7FA               	bra	u1437
  1263  0000A0  D000               	nop2	
  1264  0000A2                     
  1265                           ;main.c: 147: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1266  0000A2  0E01               	movlw	1
  1267  0000A4  ECF3  F005         	call	_lcdInst
  1268  0000A8  0EC3               	movlw	195
  1269  0000AA  6E37               	movwf	??_operation& (0+255),c
  1270  0000AC  0ECD               	movlw	205
  1271  0000AE                     u1447:
  1272  0000AE  2EE8               	decfsz	wreg,f,c
  1273  0000B0  D7FE               	bra	u1447
  1274  0000B2  2E37               	decfsz	??_operation& (0+255),f,c
  1275  0000B4  D7FC               	bra	u1447
  1276  0000B6  F000               	nop	
  1277                           
  1278                           ;main.c: 148: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1279  0000B8  0E80               	movlw	128
  1280  0000BA  ECF3  F005         	call	_lcdInst
  1281  0000BE  0E41               	movlw	65
  1282  0000C0  6E37               	movwf	??_operation& (0+255),c
  1283  0000C2  0EEE               	movlw	238
  1284  0000C4                     u1457:
  1285  0000C4  2EE8               	decfsz	wreg,f,c
  1286  0000C6  D7FE               	bra	u1457
  1287  0000C8  2E37               	decfsz	??_operation& (0+255),f,c
  1288  0000CA  D7FC               	bra	u1457
  1289  0000CC  D000               	nop2	
  1290                           
  1291                           ;main.c: 149: printf("Number of pills:");
  1292  0000CE  0EAF               	movlw	low STR_7
  1293  0000D0  6E1B               	movwf	printf@f,c
  1294  0000D2  0EFF               	movlw	high STR_7
  1295  0000D4  6E1C               	movwf	printf@f+1,c
  1296  0000D6  EC3D  F002         	call	_printf	;wreg free
  1297                           
  1298                           ;main.c: 150: lcdInst(0xC0);;
  1299  0000DA  0EC0               	movlw	192
  1300  0000DC  ECF3  F005         	call	_lcdInst
  1301                           
  1302                           ;main.c: 151: printf("   R: _");
  1303  0000E0  0EF6               	movlw	low STR_8
  1304  0000E2  6E1B               	movwf	printf@f,c
  1305  0000E4  0EFF               	movlw	high STR_8
  1306  0000E6  6E1C               	movwf	printf@f+1,c
  1307  0000E8  EC3D  F002         	call	_printf	;wreg free
  1308                           
  1309                           ;main.c: 152: lcdInst(0x94);;
  1310  0000EC  0E94               	movlw	148
  1311  0000EE  ECF3  F005         	call	_lcdInst
  1312                           
  1313                           ;main.c: 153: printf("   F: _");
  1314  0000F2  0EE6               	movlw	low STR_9
  1315  0000F4  6E1B               	movwf	printf@f,c
  1316  0000F6  0EFF               	movlw	high STR_9
  1317  0000F8  6E1C               	movwf	printf@f+1,c
  1318  0000FA  EC3D  F002         	call	_printf	;wreg free
  1319                           
  1320                           ;main.c: 154: lcdInst(0xD4);;
  1321  0000FE  0ED4               	movlw	212
  1322  000100  ECF3  F005         	call	_lcdInst
  1323                           
  1324                           ;main.c: 155: printf("   L: _");
  1325  000104  0EEE               	movlw	low STR_10
  1326  000106  6E1B               	movwf	printf@f,c
  1327  000108  0EFF               	movlw	high STR_10
  1328  00010A  6E1C               	movwf	printf@f+1,c
  1329  00010C  EC3D  F002         	call	_printf	;wreg free
  1330                           
  1331                           ;main.c: 156: lcd_set_cursor(6, 1);
  1332  000110  0E01               	movlw	1
  1333  000112  6E1A               	movwf	lcd_set_cursor@y,c
  1334  000114  0E06               	movlw	6
  1335  000116  ECD5  F004         	call	_lcd_set_cursor
  1336                           
  1337                           ;main.c: 157: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1338  00011A  0E0F               	movlw	15
  1339  00011C  ECF3  F005         	call	_lcdInst
  1340                           
  1341                           ;main.c: 159: prescription[0] = -1;
  1342  000120  683F               	setf	operation@prescription,c
  1343  000122  6840               	setf	operation@prescription+1,c
  1344                           
  1345                           ;main.c: 160: prescription[1] = -1;
  1346  000124  6841               	setf	operation@prescription+2,c
  1347  000126  6842               	setf	operation@prescription+3,c
  1348                           
  1349                           ;main.c: 161: prescription[2] = -1;
  1350  000128  6843               	setf	operation@prescription+4,c
  1351  00012A  6844               	setf	operation@prescription+5,c
  1352  00012C                     
  1353                           ;main.c: 165: continue;
  1354                           
  1355                           ;main.c: 164: while (PORTBbits.RB1 == 0) {
  1356  00012C  A281               	btfss	3969,1,c	;volatile
  1357  00012E  D7FE               	goto	l165
  1358                           
  1359                           ;main.c: 166: }
  1360                           ;main.c: 168: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1361  000130  3881               	swapf	3969,w,c	;volatile
  1362  000132  0B0F               	andlw	15
  1363  000134  0B0F               	andlw	15
  1364  000136  6E3B               	movwf	operation@keypress,c
  1365  000138                     
  1366                           ;main.c: 171: continue;
  1367  000138  B281               	btfsc	3969,1,c	;volatile
  1368  00013A  D7FE               	goto	l170
  1369                           
  1370                           ;main.c: 172: }
  1371                           ;main.c: 174: __nop();
  1372  00013C  F000               	nop	
  1373                           
  1374                           ;main.c: 176: if (keypress == 0 || keypress == 1 || keypress == 13) {
  1375  00013E  503B               	movf	operation@keypress,w,c
  1376  000140  B4D8               	btfsc	status,2,c
  1377  000142  D007               	goto	u1050
  1378  000144  043B               	decf	operation@keypress,w,c
  1379  000146  B4D8               	btfsc	status,2,c
  1380  000148  D004               	goto	u1050
  1381  00014A  0E0D               	movlw	13
  1382  00014C  183B               	xorwf	operation@keypress,w,c
  1383  00014E  A4D8               	btfss	status,2,c
  1384  000150  D02A               	goto	l172
  1385  000152                     u1050:
  1386                           
  1387                           ;main.c: 177: lcd_set_cursor(6, 1);
  1388  000152  0E01               	movlw	1
  1389  000154  6E1A               	movwf	lcd_set_cursor@y,c
  1390  000156  0E06               	movlw	6
  1391  000158  ECD5  F004         	call	_lcd_set_cursor
  1392                           
  1393                           ;main.c: 178: putch(keys[keypress]);
  1394  00015C  503B               	movf	operation@keypress,w,c
  1395  00015E  0D01               	mullw	1
  1396  000160  0EAF               	movlw	low _keys
  1397  000162  24F3               	addwf	prodl,w,c
  1398  000164  6EF6               	movwf	tblptrl,c
  1399  000166  0EFE               	movlw	high _keys
  1400  000168  20F4               	addwfc	prodh,w,c
  1401  00016A  6EF7               	movwf	tblptrh,c
  1402  00016C                     	if	0	;There are less than 3 active tblptr bytes
  1403  00016C                     	endif
  1404  00016C  0008               	tblrd		*
  1405  00016E  50F5               	movf	tablat,w,c
  1406  000170  ECE9  F005         	call	_putch
  1407                           
  1408                           ;main.c: 180: switch (keypress) {
  1409  000174  D00D               	goto	l175
  1410  000176                     
  1411                           ;main.c: 182: prescription[0] = 1;
  1412  000176  0E00               	movlw	0
  1413  000178  6E40               	movwf	operation@prescription+1,c
  1414  00017A  0E01               	movlw	1
  1415  00017C  D007               	goto	L2
  1416  00017E                     
  1417                           ;main.c: 185: prescription[0] = 2;
  1418  00017E  0E00               	movlw	0
  1419  000180  6E40               	movwf	operation@prescription+1,c
  1420  000182  0E02               	movlw	2
  1421  000184  D003               	goto	L2
  1422  000186                     
  1423                           ;main.c: 188: prescription[0] = 0;
  1424  000186  0E00               	movlw	0
  1425  000188  6E40               	movwf	operation@prescription+1,c
  1426  00018A  0E00               	movlw	0
  1427  00018C                     L2:
  1428  00018C  6E3F               	movwf	operation@prescription,c
  1429                           
  1430                           ;main.c: 190: }
  1431                           
  1432                           ;main.c: 189: break;
  1433  00018E  D7CE               	goto	l165
  1434  000190                     l175:
  1435  000190  503B               	movf	operation@keypress,w,c
  1436                           
  1437                           ; Switch size 1, requested type "space"
  1438                           ; Number of cases is 3, Range of values is 0 to 13
  1439                           ; switch strategies available:
  1440                           ; Name         Instructions Cycles
  1441                           ; simple_byte           10     6 (average)
  1442                           ;	Chosen strategy is simple_byte
  1443  000192  0A00               	xorlw	0	; case 0
  1444  000194  B4D8               	btfsc	status,2,c
  1445  000196  D7EF               	goto	l176
  1446  000198  0A01               	xorlw	1	; case 1
  1447  00019A  B4D8               	btfsc	status,2,c
  1448  00019C  D7F0               	goto	l178
  1449  00019E  0A0C               	xorlw	12	; case 13
  1450  0001A0  B4D8               	btfsc	status,2,c
  1451  0001A2  D7F1               	goto	l179
  1452                           
  1453                           ;main.c: 191: }
  1454  0001A4  D7C3               	goto	l165
  1455  0001A6                     l172:
  1456                           
  1457                           ;main.c: 192: else if (keypress == 14) {
  1458  0001A6  0E0E               	movlw	14
  1459  0001A8  183B               	xorwf	operation@keypress,w,c
  1460  0001AA  A4D8               	btfss	status,2,c
  1461  0001AC  D7BF               	goto	l165
  1462                           
  1463                           ;main.c: 193: if (prescription[0] != -1) {
  1464  0001AE  283F               	incf	operation@prescription,w,c
  1465  0001B0  E103               	bnz	u1070
  1466  0001B2  2840               	incf	operation@prescription+1,w,c
  1467  0001B4  B4D8               	btfsc	status,2,c
  1468  0001B6  D7BA               	goto	l165
  1469  0001B8                     u1070:
  1470                           
  1471                           ;main.c: 194: lcd_set_cursor(6, 2);
  1472  0001B8  0E02               	movlw	2
  1473  0001BA  6E1A               	movwf	lcd_set_cursor@y,c
  1474  0001BC  0E06               	movlw	6
  1475  0001BE  ECD5  F004         	call	_lcd_set_cursor
  1476  0001C2                     
  1477                           ;main.c: 202: continue;
  1478                           
  1479                           ;main.c: 201: while (PORTBbits.RB1 == 0) {
  1480                           
  1481                           ;main.c: 196: }
  1482                           ;main.c: 197: }
  1483                           ;main.c: 198: }
  1484                           ;main.c: 200: while (1) {
  1485  0001C2  A281               	btfss	3969,1,c	;volatile
  1486  0001C4  D7FE               	goto	l183
  1487                           
  1488                           ;main.c: 203: }
  1489                           ;main.c: 205: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1490  0001C6  3881               	swapf	3969,w,c	;volatile
  1491  0001C8  0B0F               	andlw	15
  1492  0001CA  0B0F               	andlw	15
  1493  0001CC  6E3C               	movwf	operation@keypress_382,c
  1494  0001CE                     
  1495                           ;main.c: 208: continue;
  1496  0001CE  B281               	btfsc	3969,1,c	;volatile
  1497  0001D0  D7FE               	goto	l190
  1498                           
  1499                           ;main.c: 209: }
  1500                           ;main.c: 211: __nop();
  1501  0001D2  F000               	nop	
  1502                           
  1503                           ;main.c: 213: if (keypress == 0 || keypress == 1 || keypress == 13) {
  1504  0001D4  503C               	movf	operation@keypress_382,w,c
  1505  0001D6  B4D8               	btfsc	status,2,c
  1506  0001D8  D007               	goto	u1120
  1507  0001DA  043C               	decf	operation@keypress_382,w,c
  1508  0001DC  B4D8               	btfsc	status,2,c
  1509  0001DE  D004               	goto	u1120
  1510  0001E0  0E0D               	movlw	13
  1511  0001E2  183C               	xorwf	operation@keypress_382,w,c
  1512  0001E4  A4D8               	btfss	status,2,c
  1513  0001E6  D02A               	goto	l192
  1514  0001E8                     u1120:
  1515                           
  1516                           ;main.c: 214: lcd_set_cursor(6, 2);
  1517  0001E8  0E02               	movlw	2
  1518  0001EA  6E1A               	movwf	lcd_set_cursor@y,c
  1519  0001EC  0E06               	movlw	6
  1520  0001EE  ECD5  F004         	call	_lcd_set_cursor
  1521                           
  1522                           ;main.c: 215: putch(keys[keypress]);
  1523  0001F2  503C               	movf	operation@keypress_382,w,c
  1524  0001F4  0D01               	mullw	1
  1525  0001F6  0EAF               	movlw	low _keys
  1526  0001F8  24F3               	addwf	prodl,w,c
  1527  0001FA  6EF6               	movwf	tblptrl,c
  1528  0001FC  0EFE               	movlw	high _keys
  1529  0001FE  20F4               	addwfc	prodh,w,c
  1530  000200  6EF7               	movwf	tblptrh,c
  1531  000202                     	if	0	;There are less than 3 active tblptr bytes
  1532  000202                     	endif
  1533  000202  0008               	tblrd		*
  1534  000204  50F5               	movf	tablat,w,c
  1535  000206  ECE9  F005         	call	_putch
  1536                           
  1537                           ;main.c: 217: switch (keypress) {
  1538  00020A  D00D               	goto	l195
  1539  00020C                     
  1540                           ;main.c: 219: prescription[1] = 1;
  1541  00020C  0E00               	movlw	0
  1542  00020E  6E42               	movwf	operation@prescription+3,c
  1543  000210  0E01               	movlw	1
  1544  000212  D007               	goto	L4
  1545  000214                     
  1546                           ;main.c: 222: prescription[1] = 2;
  1547  000214  0E00               	movlw	0
  1548  000216  6E42               	movwf	operation@prescription+3,c
  1549  000218  0E02               	movlw	2
  1550  00021A  D003               	goto	L4
  1551  00021C                     
  1552                           ;main.c: 225: prescription[1] = 0;
  1553  00021C  0E00               	movlw	0
  1554  00021E  6E42               	movwf	operation@prescription+3,c
  1555  000220  0E00               	movlw	0
  1556  000222                     L4:
  1557  000222  6E41               	movwf	operation@prescription+2,c
  1558                           
  1559                           ;main.c: 227: }
  1560                           
  1561                           ;main.c: 226: break;
  1562  000224  D7CE               	goto	l183
  1563  000226                     l195:
  1564  000226  503C               	movf	operation@keypress_382,w,c
  1565                           
  1566                           ; Switch size 1, requested type "space"
  1567                           ; Number of cases is 3, Range of values is 0 to 13
  1568                           ; switch strategies available:
  1569                           ; Name         Instructions Cycles
  1570                           ; simple_byte           10     6 (average)
  1571                           ;	Chosen strategy is simple_byte
  1572  000228  0A00               	xorlw	0	; case 0
  1573  00022A  B4D8               	btfsc	status,2,c
  1574  00022C  D7EF               	goto	l196
  1575  00022E  0A01               	xorlw	1	; case 1
  1576  000230  B4D8               	btfsc	status,2,c
  1577  000232  D7F0               	goto	l198
  1578  000234  0A0C               	xorlw	12	; case 13
  1579  000236  B4D8               	btfsc	status,2,c
  1580  000238  D7F1               	goto	l199
  1581                           
  1582                           ;main.c: 228: }
  1583  00023A  D7C3               	goto	l183
  1584  00023C                     l192:
  1585                           
  1586                           ;main.c: 229: else if (keypress == 14) {
  1587  00023C  0E0E               	movlw	14
  1588  00023E  183C               	xorwf	operation@keypress_382,w,c
  1589  000240  A4D8               	btfss	status,2,c
  1590  000242  D7BF               	goto	l183
  1591                           
  1592                           ;main.c: 230: if (prescription[1] != -1) {
  1593  000244  2841               	incf	operation@prescription+2,w,c
  1594  000246  E103               	bnz	u1140
  1595  000248  2842               	incf	operation@prescription+3,w,c
  1596  00024A  B4D8               	btfsc	status,2,c
  1597  00024C  D7BA               	goto	l183
  1598  00024E                     u1140:
  1599                           
  1600                           ;main.c: 231: lcd_set_cursor(6, 3);
  1601  00024E  0E03               	movlw	3
  1602  000250  6E1A               	movwf	lcd_set_cursor@y,c
  1603  000252  0E06               	movlw	6
  1604  000254  ECD5  F004         	call	_lcd_set_cursor
  1605  000258                     
  1606                           ;main.c: 239: continue;
  1607                           
  1608                           ;main.c: 238: while (PORTBbits.RB1 == 0) {
  1609                           
  1610                           ;main.c: 233: }
  1611                           ;main.c: 234: }
  1612                           ;main.c: 235: }
  1613                           ;main.c: 237: while (1) {
  1614  000258  A281               	btfss	3969,1,c	;volatile
  1615  00025A  D7FE               	goto	l203
  1616                           
  1617                           ;main.c: 240: }
  1618                           ;main.c: 242: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1619  00025C  3881               	swapf	3969,w,c	;volatile
  1620  00025E  0B0F               	andlw	15
  1621  000260  0B0F               	andlw	15
  1622  000262  6E3E               	movwf	operation@keypress_383,c
  1623  000264                     
  1624                           ;main.c: 245: continue;
  1625  000264  B281               	btfsc	3969,1,c	;volatile
  1626  000266  D7FE               	goto	l210
  1627                           
  1628                           ;main.c: 246: }
  1629                           ;main.c: 248: __nop();
  1630  000268  F000               	nop	
  1631                           
  1632                           ;main.c: 250: if (keypress == 0 || keypress == 1 || keypress == 2 || keypress == 13) {
  1633  00026A  503E               	movf	operation@keypress_383,w,c
  1634  00026C  B4D8               	btfsc	status,2,c
  1635  00026E  D00B               	goto	u1200
  1636  000270  043E               	decf	operation@keypress_383,w,c
  1637  000272  B4D8               	btfsc	status,2,c
  1638  000274  D008               	goto	u1200
  1639  000276  0E02               	movlw	2
  1640  000278  183E               	xorwf	operation@keypress_383,w,c
  1641  00027A  B4D8               	btfsc	status,2,c
  1642  00027C  D004               	goto	u1200
  1643  00027E  0E0D               	movlw	13
  1644  000280  183E               	xorwf	operation@keypress_383,w,c
  1645  000282  A4D8               	btfss	status,2,c
  1646  000284  D031               	goto	l212
  1647  000286                     u1200:
  1648                           
  1649                           ;main.c: 251: lcd_set_cursor(6, 3);
  1650  000286  0E03               	movlw	3
  1651  000288  6E1A               	movwf	lcd_set_cursor@y,c
  1652  00028A  0E06               	movlw	6
  1653  00028C  ECD5  F004         	call	_lcd_set_cursor
  1654                           
  1655                           ;main.c: 252: putch(keys[keypress]);
  1656  000290  503E               	movf	operation@keypress_383,w,c
  1657  000292  0D01               	mullw	1
  1658  000294  0EAF               	movlw	low _keys
  1659  000296  24F3               	addwf	prodl,w,c
  1660  000298  6EF6               	movwf	tblptrl,c
  1661  00029A  0EFE               	movlw	high _keys
  1662  00029C  20F4               	addwfc	prodh,w,c
  1663  00029E  6EF7               	movwf	tblptrh,c
  1664  0002A0                     	if	0	;There are less than 3 active tblptr bytes
  1665  0002A0                     	endif
  1666  0002A0  0008               	tblrd		*
  1667  0002A2  50F5               	movf	tablat,w,c
  1668  0002A4  ECE9  F005         	call	_putch
  1669                           
  1670                           ;main.c: 254: switch (keypress) {
  1671  0002A8  D011               	goto	l215
  1672  0002AA                     
  1673                           ;main.c: 256: prescription[2] = 1;
  1674  0002AA  0E00               	movlw	0
  1675  0002AC  6E44               	movwf	operation@prescription+5,c
  1676  0002AE  0E01               	movlw	1
  1677  0002B0  D00B               	goto	L7
  1678  0002B2                     
  1679                           ;main.c: 259: prescription[2] = 2;
  1680  0002B2  0E00               	movlw	0
  1681  0002B4  6E44               	movwf	operation@prescription+5,c
  1682  0002B6  0E02               	movlw	2
  1683  0002B8  D007               	goto	L7
  1684  0002BA                     
  1685                           ;main.c: 262: prescription[2] = 3;
  1686  0002BA  0E00               	movlw	0
  1687  0002BC  6E44               	movwf	operation@prescription+5,c
  1688  0002BE  0E03               	movlw	3
  1689  0002C0  D003               	goto	L7
  1690  0002C2                     
  1691                           ;main.c: 265: prescription[2] = 0;
  1692  0002C2  0E00               	movlw	0
  1693  0002C4  6E44               	movwf	operation@prescription+5,c
  1694  0002C6  0E00               	movlw	0
  1695  0002C8                     L7:
  1696  0002C8  6E43               	movwf	operation@prescription+4,c
  1697                           
  1698                           ;main.c: 267: }
  1699                           
  1700                           ;main.c: 266: break;
  1701  0002CA  D7C6               	goto	l203
  1702  0002CC                     l215:
  1703  0002CC  503E               	movf	operation@keypress_383,w,c
  1704                           
  1705                           ; Switch size 1, requested type "space"
  1706                           ; Number of cases is 4, Range of values is 0 to 13
  1707                           ; switch strategies available:
  1708                           ; Name         Instructions Cycles
  1709                           ; simple_byte           13     7 (average)
  1710                           ;	Chosen strategy is simple_byte
  1711  0002CE  0A00               	xorlw	0	; case 0
  1712  0002D0  B4D8               	btfsc	status,2,c
  1713  0002D2  D7EB               	goto	l216
  1714  0002D4  0A01               	xorlw	1	; case 1
  1715  0002D6  B4D8               	btfsc	status,2,c
  1716  0002D8  D7EC               	goto	l218
  1717  0002DA  0A03               	xorlw	3	; case 2
  1718  0002DC  B4D8               	btfsc	status,2,c
  1719  0002DE  D7ED               	goto	l219
  1720  0002E0  0A0F               	xorlw	15	; case 13
  1721  0002E2  B4D8               	btfsc	status,2,c
  1722  0002E4  D7EE               	goto	l220
  1723                           
  1724                           ;main.c: 268: }
  1725  0002E6  D7B8               	goto	l203
  1726  0002E8                     l212:
  1727                           
  1728                           ;main.c: 269: else if (keypress == 14) {
  1729  0002E8  0E0E               	movlw	14
  1730  0002EA  183E               	xorwf	operation@keypress_383,w,c
  1731  0002EC  A4D8               	btfss	status,2,c
  1732  0002EE  D7B4               	goto	l203
  1733                           
  1734                           ;main.c: 270: if (prescription[2] != -1) {
  1735  0002F0  2843               	incf	operation@prescription+4,w,c
  1736  0002F2  E103               	bnz	l1912
  1737  0002F4  2844               	incf	operation@prescription+5,w,c
  1738  0002F6  B4D8               	btfsc	status,2,c
  1739  0002F8  D7AF               	goto	l203
  1740  0002FA                     l1912:
  1741                           
  1742                           ;main.c: 272: }
  1743                           ;main.c: 273: }
  1744                           ;main.c: 274: }
  1745                           ;main.c: 276: if ((prescription[0] + prescription[1] + prescription[2]) <= 4) {
  1746  0002FA  5043               	movf	operation@prescription+4,w,c
  1747  0002FC  2441               	addwf	operation@prescription+2,w,c
  1748  0002FE  6E37               	movwf	??_operation& (0+255),c
  1749  000300  5044               	movf	operation@prescription+5,w,c
  1750  000302  2042               	addwfc	operation@prescription+3,w,c
  1751  000304  6E38               	movwf	(??_operation+1)& (0+255),c
  1752  000306  503F               	movf	operation@prescription,w,c
  1753  000308  2637               	addwf	??_operation,f,c
  1754  00030A  5040               	movf	operation@prescription+1,w,c
  1755  00030C  2238               	addwfc	??_operation+1,f,c
  1756  00030E  BE38               	btfsc	??_operation+1,7,c
  1757  000310  D032               	goto	l227
  1758  000312  5038               	movf	??_operation+1,w,c
  1759  000314  E104               	bnz	l1918
  1760  000316  0E05               	movlw	5
  1761  000318  5C37               	subwf	??_operation,w,c
  1762  00031A  A0D8               	btfss	status,0,c
  1763  00031C  D02C               	goto	l227
  1764  00031E                     l1918:
  1765                           
  1766                           ;main.c: 279: else {
  1767                           ;main.c: 280: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1768  00031E  0E0C               	movlw	12
  1769  000320  ECF3  F005         	call	_lcdInst
  1770                           
  1771                           ;main.c: 281: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1772  000324  0E01               	movlw	1
  1773  000326  ECF3  F005         	call	_lcdInst
  1774  00032A  0EC3               	movlw	195
  1775  00032C  6E37               	movwf	??_operation& (0+255),c
  1776  00032E  0ECD               	movlw	205
  1777  000330                     u1467:
  1778  000330  2EE8               	decfsz	wreg,f,c
  1779  000332  D7FE               	bra	u1467
  1780  000334  2E37               	decfsz	??_operation& (0+255),f,c
  1781  000336  D7FC               	bra	u1467
  1782  000338  F000               	nop	
  1783                           
  1784                           ;main.c: 282: lcdInst(0xC0);;
  1785  00033A  0EC0               	movlw	192
  1786  00033C  ECF3  F005         	call	_lcdInst
  1787                           
  1788                           ;main.c: 283: printf("   INVALID INPUT    ");
  1789  000340  0E20               	movlw	low STR_11
  1790  000342  6E1B               	movwf	printf@f,c
  1791  000344  0EFF               	movlw	high STR_11
  1792  000346  6E1C               	movwf	printf@f+1,c
  1793  000348  EC3D  F002         	call	_printf	;wreg free
  1794                           
  1795                           ;main.c: 284: lcdInst(0x94);;
  1796  00034C  0E94               	movlw	148
  1797  00034E  ECF3  F005         	call	_lcdInst
  1798                           
  1799                           ;main.c: 285: printf("     TRY AGAIN      ");
  1800  000352  0EF6               	movlw	low STR_12
  1801  000354  6E1B               	movwf	printf@f,c
  1802  000356  0EFE               	movlw	high STR_12
  1803  000358  6E1C               	movwf	printf@f+1,c
  1804  00035A  EC3D  F002         	call	_printf	;wreg free
  1805                           
  1806                           ;main.c: 286: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1807  00035E  0E33               	movlw	51
  1808  000360  6E38               	movwf	(??_operation+1)& (0+255),c
  1809  000362  0EBB               	movlw	187
  1810  000364  6E37               	movwf	??_operation& (0+255),c
  1811  000366  0EE0               	movlw	224
  1812  000368                     u1477:
  1813  000368  2EE8               	decfsz	wreg,f,c
  1814  00036A  D7FE               	bra	u1477
  1815  00036C  2E37               	decfsz	??_operation& (0+255),f,c
  1816  00036E  D7FC               	bra	u1477
  1817  000370  2E38               	decfsz	(??_operation+1)& (0+255),f,c
  1818  000372  D7FA               	bra	u1477
  1819  000374  D696               	goto	l164
  1820  000376                     l227:
  1821                           
  1822                           ;main.c: 287: }
  1823                           ;main.c: 288: }
  1824                           ;main.c: 293: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1825  000376  0E01               	movlw	1
  1826  000378  ECF3  F005         	call	_lcdInst
  1827  00037C  0EC3               	movlw	195
  1828  00037E  6E37               	movwf	??_operation& (0+255),c
  1829  000380  0ECD               	movlw	205
  1830  000382                     u1487:
  1831  000382  2EE8               	decfsz	wreg,f,c
  1832  000384  D7FE               	bra	u1487
  1833  000386  2E37               	decfsz	??_operation& (0+255),f,c
  1834  000388  D7FC               	bra	u1487
  1835  00038A  F000               	nop	
  1836                           
  1837                           ;main.c: 294: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1838  00038C  0E80               	movlw	128
  1839  00038E  ECF3  F005         	call	_lcdInst
  1840  000392  0E41               	movlw	65
  1841  000394  6E37               	movwf	??_operation& (0+255),c
  1842  000396  0EEE               	movlw	238
  1843  000398                     u1497:
  1844  000398  2EE8               	decfsz	wreg,f,c
  1845  00039A  D7FE               	bra	u1497
  1846  00039C  2E37               	decfsz	??_operation& (0+255),f,c
  1847  00039E  D7FC               	bra	u1497
  1848  0003A0  D000               	nop2	
  1849                           
  1850                           ;main.c: 295: printf("Repetition: _");
  1851  0003A2  0EC0               	movlw	low STR_13
  1852  0003A4  6E1B               	movwf	printf@f,c
  1853  0003A6  0EFF               	movlw	high STR_13
  1854  0003A8  6E1C               	movwf	printf@f+1,c
  1855  0003AA  EC3D  F002         	call	_printf	;wreg free
  1856                           
  1857                           ;main.c: 296: lcdInst(0xC0);;
  1858  0003AE  0EC0               	movlw	192
  1859  0003B0  ECF3  F005         	call	_lcdInst
  1860                           
  1861                           ;main.c: 297: printf("(1)Morning");
  1862  0003B4  0EDB               	movlw	low STR_14
  1863  0003B6  6E1B               	movwf	printf@f,c
  1864  0003B8  0EFF               	movlw	high STR_14
  1865  0003BA  6E1C               	movwf	printf@f+1,c
  1866  0003BC  EC3D  F002         	call	_printf	;wreg free
  1867                           
  1868                           ;main.c: 298: lcdInst(0x94);;
  1869  0003C0  0E94               	movlw	148
  1870  0003C2  ECF3  F005         	call	_lcdInst
  1871                           
  1872                           ;main.c: 299: printf("(2)Afternoon");
  1873  0003C6  0ECE               	movlw	low STR_15
  1874  0003C8  6E1B               	movwf	printf@f,c
  1875  0003CA  0EFF               	movlw	high STR_15
  1876  0003CC  6E1C               	movwf	printf@f+1,c
  1877  0003CE  EC3D  F002         	call	_printf	;wreg free
  1878                           
  1879                           ;main.c: 300: lcdInst(0xD4);;
  1880  0003D2  0ED4               	movlw	212
  1881  0003D4  ECF3  F005         	call	_lcdInst
  1882                           
  1883                           ;main.c: 301: printf("(3)Both (4)Alternate");
  1884  0003D8  0E89               	movlw	low STR_16
  1885  0003DA  6E1B               	movwf	printf@f,c
  1886  0003DC  0EFF               	movlw	high STR_16
  1887  0003DE  6E1C               	movwf	printf@f+1,c
  1888  0003E0  EC3D  F002         	call	_printf	;wreg free
  1889                           
  1890                           ;main.c: 302: lcd_set_cursor(12, 0);
  1891  0003E4  0E00               	movlw	0
  1892  0003E6  6E1A               	movwf	lcd_set_cursor@y,c
  1893  0003E8  0E0C               	movlw	12
  1894  0003EA  ECD5  F004         	call	_lcd_set_cursor
  1895                           
  1896                           ;main.c: 304: prescription[0] = -1;
  1897  0003EE  683F               	setf	operation@prescription,c
  1898  0003F0  6840               	setf	operation@prescription+1,c
  1899                           
  1900                           ;main.c: 305: prescription[1] = -1;
  1901  0003F2  6841               	setf	operation@prescription+2,c
  1902  0003F4  6842               	setf	operation@prescription+3,c
  1903                           
  1904                           ;main.c: 306: prescription[2] = -1;
  1905  0003F6  6843               	setf	operation@prescription+4,c
  1906  0003F8  6844               	setf	operation@prescription+5,c
  1907  0003FA                     
  1908                           ;main.c: 310: continue;
  1909                           
  1910                           ;main.c: 309: while (PORTBbits.RB1 == 0) {
  1911  0003FA  A281               	btfss	3969,1,c	;volatile
  1912  0003FC  D7FE               	goto	l230
  1913                           
  1914                           ;main.c: 311: }
  1915                           ;main.c: 313: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1916  0003FE  3881               	swapf	3969,w,c	;volatile
  1917  000400  0B0F               	andlw	15
  1918  000402  0B0F               	andlw	15
  1919  000404  6E3D               	movwf	operation@keypress_390,c
  1920  000406                     
  1921                           ;main.c: 316: continue;
  1922  000406  B281               	btfsc	3969,1,c	;volatile
  1923  000408  D7FE               	goto	l235
  1924                           
  1925                           ;main.c: 317: }
  1926                           ;main.c: 319: __nop();
  1927  00040A  F000               	nop	
  1928                           
  1929                           ;main.c: 321: if (keypress == 0 || keypress == 1 || keypress == 13) {
  1930  00040C  503D               	movf	operation@keypress_390,w,c
  1931  00040E  B4D8               	btfsc	status,2,c
  1932  000410  D007               	goto	u1280
  1933  000412  043D               	decf	operation@keypress_390,w,c
  1934  000414  B4D8               	btfsc	status,2,c
  1935  000416  D004               	goto	u1280
  1936  000418  0E0D               	movlw	13
  1937  00041A  183D               	xorwf	operation@keypress_390,w,c
  1938  00041C  A4D8               	btfss	status,2,c
  1939  00041E  D01E               	goto	l237
  1940  000420                     u1280:
  1941                           
  1942                           ;main.c: 322: lcd_set_cursor(6, 1);
  1943  000420  0E01               	movlw	1
  1944  000422  6E1A               	movwf	lcd_set_cursor@y,c
  1945  000424  0E06               	movlw	6
  1946  000426  ECD5  F004         	call	_lcd_set_cursor
  1947                           
  1948                           ;main.c: 323: putch(keys[keypress]);
  1949  00042A  503D               	movf	operation@keypress_390,w,c
  1950  00042C  0D01               	mullw	1
  1951  00042E  0EAF               	movlw	low _keys
  1952  000430  24F3               	addwf	prodl,w,c
  1953  000432  6EF6               	movwf	tblptrl,c
  1954  000434  0EFE               	movlw	high _keys
  1955  000436  20F4               	addwfc	prodh,w,c
  1956  000438  6EF7               	movwf	tblptrh,c
  1957  00043A                     	if	0	;There are less than 3 active tblptr bytes
  1958  00043A                     	endif
  1959  00043A  0008               	tblrd		*
  1960  00043C  50F5               	movf	tablat,w,c
  1961  00043E  ECE9  F005         	call	_putch
  1962                           
  1963                           ;main.c: 324: prescription[0] = keys[keypress];
  1964  000442  503D               	movf	operation@keypress_390,w,c
  1965  000444  0D01               	mullw	1
  1966  000446  0EAF               	movlw	low _keys
  1967  000448  24F3               	addwf	prodl,w,c
  1968  00044A  6EF6               	movwf	tblptrl,c
  1969  00044C  0EFE               	movlw	high _keys
  1970  00044E  20F4               	addwfc	prodh,w,c
  1971  000450  6EF7               	movwf	tblptrh,c
  1972  000452                     	if	0	;There are less than 3 active tblptr bytes
  1973  000452                     	endif
  1974  000452  0008               	tblrd		*
  1975  000454  50F5               	movf	tablat,w,c
  1976  000456  6E3F               	movwf	operation@prescription,c
  1977  000458  6A40               	clrf	operation@prescription+1,c
  1978                           
  1979                           ;main.c: 325: }
  1980  00045A  D7CF               	goto	l230
  1981  00045C                     l237:
  1982                           
  1983                           ;main.c: 326: else if (keypress == 14) {
  1984  00045C  0E0E               	movlw	14
  1985  00045E  183D               	xorwf	operation@keypress_390,w,c
  1986  000460  A4D8               	btfss	status,2,c
  1987  000462  D7CB               	goto	l230
  1988                           
  1989                           ;main.c: 327: if (prescription[0] != -1) {
  1990  000464  283F               	incf	operation@prescription,w,c
  1991  000466  E103               	bnz	u1300
  1992  000468  2840               	incf	operation@prescription+1,w,c
  1993  00046A  B4D8               	btfsc	status,2,c
  1994  00046C  D7C6               	goto	l230
  1995  00046E                     u1300:
  1996                           
  1997                           ;main.c: 328: lcd_set_cursor(6, 2);
  1998  00046E  0E02               	movlw	2
  1999  000470  6E1A               	movwf	lcd_set_cursor@y,c
  2000  000472  0E06               	movlw	6
  2001  000474  ECD5  F004         	call	_lcd_set_cursor
  2002                           
  2003                           ;main.c: 329: break;
  2004  000478  0012               	return	
  2005  00047A                     __end_of_operation:
  2006                           	opt stack 0
  2007                           tblptru	equ	0xFF8
  2008                           tblptrh	equ	0xFF7
  2009                           tblptrl	equ	0xFF6
  2010                           tablat	equ	0xFF5
  2011                           prodh	equ	0xFF4
  2012                           prodl	equ	0xFF3
  2013                           intcon	equ	0xFF2
  2014                           intcon3	equ	0xFF0
  2015                           postinc0	equ	0xFEE
  2016                           wreg	equ	0xFE8
  2017                           postdec1	equ	0xFE5
  2018                           plusw1	equ	0xFE3
  2019                           fsr1l	equ	0xFE1
  2020                           indf2	equ	0xFDF
  2021                           plusw2	equ	0xFDB
  2022                           fsr2h	equ	0xFDA
  2023                           fsr2l	equ	0xFD9
  2024                           status	equ	0xFD8
  2025                           
  2026 ;; *************** function _printf *****************
  2027 ;; Defined at:
  2028 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  f               2   26[COMRAM] PTR const unsigned char 
  2031 ;;		 -> STR_16(21), STR_15(13), STR_14(11), STR_13(14), 
  2032 ;;		 -> STR_12(21), STR_11(21), STR_10(8), STR_9(8), 
  2033 ;;		 -> STR_8(8), STR_7(17), STR_6(21), STR_5(21), 
  2034 ;;		 -> STR_4(21), STR_3(21), STR_2(21), STR_1(33), 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  idx             1   46[COMRAM] unsigned char 
  2037 ;;  tmpval          4    0        struct .
  2038 ;;  cp              3    0        PTR const unsigned char 
  2039 ;;  width           2   51[COMRAM] int 
  2040 ;;  val             2   48[COMRAM] unsigned int 
  2041 ;;  ap              2   44[COMRAM] PTR void [1]
  2042 ;;		 -> ?_printf(2), 
  2043 ;;  len             2    0        unsigned int 
  2044 ;;  c               1   53[COMRAM] char 
  2045 ;;  prec            1   50[COMRAM] char 
  2046 ;;  flag            1   47[COMRAM] unsigned char 
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  2   26[COMRAM] int 
  2049 ;; Registers used:
  2050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2056 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2059 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2060 ;;Total ram usage:       28 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:    3
  2063 ;; This function calls:
  2064 ;;		___lwdiv
  2065 ;;		___wmul
  2066 ;;		_isdigit
  2067 ;;		_putch
  2068 ;; This function is called by:
  2069 ;;		_main
  2070 ;;		_operation
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text2
  2075  00047A                     __ptext2:
  2076                           	opt stack 0
  2077  00047A                     _printf:
  2078                           	opt stack 27
  2079                           
  2080                           ;doprnt.c: 466: va_list ap;
  2081                           ;doprnt.c: 499: signed char c;
  2082                           ;doprnt.c: 501: int width;
  2083                           ;doprnt.c: 506: signed char prec;
  2084                           ;doprnt.c: 508: unsigned char flag;
  2085                           ;doprnt.c: 523: union {
  2086                           ;doprnt.c: 524: unsigned long vd;
  2087                           ;doprnt.c: 525: double integ;
  2088                           ;doprnt.c: 526: } tmpval;
  2089                           ;doprnt.c: 528: unsigned int val;
  2090                           ;doprnt.c: 529: unsigned len;
  2091                           ;doprnt.c: 530: const char * cp;
  2092                           ;doprnt.c: 533: *ap = __va_start();
  2093                           
  2094                           ;incstack = 0
  2095  00047A  0E1D               	movlw	low (?_printf+2)
  2096  00047C  6E2D               	movwf	printf@ap,c
  2097  00047E  0E00               	movlw	high (?_printf+2)
  2098  000480  6E2E               	movwf	printf@ap+1,c
  2099                           
  2100                           ;doprnt.c: 536: while(c = *f++) {
  2101  000482  D0E8               	goto	u940
  2102  000484                     
  2103                           ;doprnt.c: 538: if(c != '%')
  2104  000484  0E25               	movlw	37
  2105  000486  1836               	xorwf	printf@c,w,c
  2106  000488  B4D8               	btfsc	status,2,c
  2107  00048A  D004               	goto	l318
  2108                           
  2109                           ;doprnt.c: 540: {
  2110                           ;doprnt.c: 541: (putch(c) );
  2111  00048C  5036               	movf	printf@c,w,c
  2112  00048E  ECE9  F005         	call	_putch
  2113                           
  2114                           ;doprnt.c: 542: continue;
  2115  000492  D0E0               	goto	u940
  2116  000494                     l318:
  2117                           
  2118                           ;doprnt.c: 543: }
  2119                           ;doprnt.c: 546: width = 0;
  2120  000494  0E00               	movlw	0
  2121  000496  6E35               	movwf	printf@width+1,c
  2122  000498  0E00               	movlw	0
  2123  00049A  6E34               	movwf	printf@width,c
  2124                           
  2125                           ;doprnt.c: 548: flag = 0;
  2126  00049C  0E00               	movlw	0
  2127  00049E  6E30               	movwf	printf@flag,c
  2128                           
  2129                           ;doprnt.c: 551: switch(*f) {
  2130                           
  2131                           ;doprnt.c: 550: for(;;) {
  2132  0004A0  D003               	goto	l320
  2133  0004A2                     
  2134                           ;doprnt.c: 580: flag |= 0x04;
  2135  0004A2  8430               	bsf	printf@flag,2,c
  2136                           
  2137                           ;doprnt.c: 581: f++;
  2138  0004A4  4A1B               	infsnz	printf@f,f,c
  2139  0004A6  2A1C               	incf	printf@f+1,f,c
  2140  0004A8                     l320:
  2141  0004A8  C01B  FFF6         	movff	printf@f,tblptrl
  2142  0004AC  C01C  FFF7         	movff	printf@f+1,tblptrh
  2143  0004B0                     	if	0	;tblptru may be non-zero
  2144  0004B0                     	endif
  2145  0004B0                     	if	0	;tblptru may be non-zero
  2146  0004B0                     	endif
  2147  0004B0  0008               	tblrd		*
  2148  0004B2  50F5               	movf	tablat,w,c
  2149                           
  2150                           ; Switch size 1, requested type "space"
  2151                           ; Number of cases is 1, Range of values is 48 to 48
  2152                           ; switch strategies available:
  2153                           ; Name         Instructions Cycles
  2154                           ; simple_byte            4     3 (average)
  2155                           ;	Chosen strategy is simple_byte
  2156  0004B4  0A30               	xorlw	48	; case 48
  2157  0004B6  B4D8               	btfsc	status,2,c
  2158  0004B8  D7F4               	goto	l321
  2159                           
  2160                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2161                           
  2162                           ;doprnt.c: 586: }
  2163                           
  2164                           ;doprnt.c: 585: break;
  2165  0004BA  C01B  FFF6         	movff	printf@f,tblptrl
  2166  0004BE  C01C  FFF7         	movff	printf@f+1,tblptrh
  2167  0004C2                     	if	0	;tblptru may be non-zero
  2168  0004C2                     	endif
  2169  0004C2                     	if	0	;tblptru may be non-zero
  2170  0004C2                     	endif
  2171  0004C2  0008               	tblrd		*
  2172  0004C4  50F5               	movf	tablat,w,c
  2173  0004C6  ECCC  F005         	call	_isdigit
  2174  0004CA  A0D8               	btfss	status,0,c
  2175  0004CC  D032               	goto	l328
  2176                           
  2177                           ;doprnt.c: 598: width = 0;
  2178  0004CE  0E00               	movlw	0
  2179  0004D0  6E35               	movwf	printf@width+1,c
  2180  0004D2  0E00               	movlw	0
  2181  0004D4  6E34               	movwf	printf@width,c
  2182  0004D6                     
  2183                           ;doprnt.c: 600: width *= 10;
  2184  0004D6  C034  F014         	movff	printf@width,___wmul@multiplier
  2185  0004DA  C035  F015         	movff	printf@width+1,___wmul@multiplier+1
  2186  0004DE  0E00               	movlw	0
  2187  0004E0  6E17               	movwf	___wmul@multiplicand+1,c
  2188  0004E2  0E0A               	movlw	10
  2189  0004E4  6E16               	movwf	___wmul@multiplicand,c
  2190  0004E6  ECA7  F005         	call	___wmul	;wreg free
  2191  0004EA  C014  F034         	movff	?___wmul,printf@width
  2192  0004EE  C015  F035         	movff	?___wmul+1,printf@width+1
  2193                           
  2194                           ;doprnt.c: 601: width += *f++ - '0';
  2195  0004F2  0ED0               	movlw	208
  2196  0004F4  6E29               	movwf	??_printf& (0+255),c
  2197  0004F6  0EFF               	movlw	255
  2198  0004F8  6E2A               	movwf	(??_printf+1)& (0+255),c
  2199  0004FA  C01B  FFF6         	movff	printf@f,tblptrl
  2200  0004FE  C01C  FFF7         	movff	printf@f+1,tblptrh
  2201  000502                     	if	0	;tblptru may be non-zero
  2202  000502                     	endif
  2203  000502                     	if	0	;tblptru may be non-zero
  2204  000502                     	endif
  2205  000502  0008               	tblrd		*
  2206  000504  50F5               	movf	tablat,w,c
  2207  000506  6E2B               	movwf	(??_printf+2)& (0+255),c
  2208  000508  6A2C               	clrf	(??_printf+3)& (0+255),c
  2209  00050A  5029               	movf	??_printf,w,c
  2210  00050C  262B               	addwf	??_printf+2,f,c
  2211  00050E  502A               	movf	??_printf+1,w,c
  2212  000510  222C               	addwfc	??_printf+3,f,c
  2213  000512  502B               	movf	??_printf+2,w,c
  2214  000514  2634               	addwf	printf@width,f,c
  2215  000516  502C               	movf	??_printf+3,w,c
  2216  000518  2235               	addwfc	printf@width+1,f,c
  2217  00051A  4A1B               	infsnz	printf@f,f,c
  2218  00051C  2A1C               	incf	printf@f+1,f,c
  2219                           
  2220                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2221  00051E  C01B  FFF6         	movff	printf@f,tblptrl
  2222  000522  C01C  FFF7         	movff	printf@f+1,tblptrh
  2223  000526                     	if	0	;tblptru may be non-zero
  2224  000526                     	endif
  2225  000526                     	if	0	;tblptru may be non-zero
  2226  000526                     	endif
  2227  000526  0008               	tblrd		*
  2228  000528  50F5               	movf	tablat,w,c
  2229  00052A  ECCC  F005         	call	_isdigit
  2230  00052E  B0D8               	btfsc	status,0,c
  2231  000530  D7D2               	goto	l326
  2232  000532                     l328:
  2233  000532  C01B  FFF6         	movff	printf@f,tblptrl
  2234  000536  C01C  FFF7         	movff	printf@f+1,tblptrh
  2235  00053A  4A1B               	infsnz	printf@f,f,c
  2236  00053C  2A1C               	incf	printf@f+1,f,c
  2237  00053E                     	if	0	;tblptru may be non-zero
  2238  00053E                     	endif
  2239  00053E                     	if	0	;tblptru may be non-zero
  2240  00053E                     	endif
  2241  00053E  0008               	tblrd		*
  2242  000540  CFF5 F036          	movff	tablat,printf@c
  2243  000544  5036               	movf	printf@c,w,c
  2244                           
  2245                           ; Switch size 1, requested type "space"
  2246                           ; Number of cases is 2, Range of values is 0 to 120
  2247                           ; switch strategies available:
  2248                           ; Name         Instructions Cycles
  2249                           ; simple_byte            7     4 (average)
  2250                           ;	Chosen strategy is simple_byte
  2251  000546  0A00               	xorlw	0	; case 0
  2252  000548  B4D8               	btfsc	status,2,c
  2253  00054A  0012               	return	
  2254  00054C  0A78               	xorlw	120	; case 120
  2255  00054E  A4D8               	btfss	status,2,c
  2256  000550  D081               	goto	u940
  2257                           
  2258                           ;doprnt.c: 1273: {
  2259                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2260  000552  C02D  FFD9         	movff	printf@ap,fsr2l
  2261  000556  C02E  FFDA         	movff	printf@ap+1,fsr2h
  2262  00055A  CFDE F031          	movff	postinc2,printf@val
  2263  00055E  CFDD F032          	movff	postdec2,printf@val+1
  2264  000562  0E02               	movlw	2
  2265  000564  262D               	addwf	printf@ap,f,c
  2266  000566  0E00               	movlw	0
  2267  000568  222E               	addwfc	printf@ap+1,f,c
  2268                           
  2269                           ;doprnt.c: 1287: }
  2270                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2271  00056A  0E01               	movlw	1
  2272  00056C  6E36               	movwf	printf@c,c
  2273  00056E                     l1692:
  2274  00056E  0E04               	movlw	4
  2275  000570  1836               	xorwf	printf@c,w,c
  2276  000572  B4D8               	btfsc	status,2,c
  2277  000574  D012               	goto	u870
  2278                           
  2279                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2280  000576  5036               	movf	printf@c,w,c
  2281  000578  0D02               	mullw	2
  2282  00057A  0EC0               	movlw	low _hexpowers
  2283  00057C  24F3               	addwf	prodl,w,c
  2284  00057E  6EF6               	movwf	tblptrl,c
  2285  000580  0EFE               	movlw	high _hexpowers
  2286  000582  20F4               	addwfc	prodh,w,c
  2287  000584  6EF7               	movwf	tblptrh,c
  2288  000586                     	if	0	;There are less than 3 active tblptr bytes
  2289  000586                     	endif
  2290  000586  0009               	tblrd		*+
  2291  000588  50F5               	movf	tablat,w,c
  2292  00058A  5C31               	subwf	printf@val,w,c
  2293  00058C  0009               	tblrd		*+
  2294  00058E  50F5               	movf	tablat,w,c
  2295  000590  5832               	subwfb	printf@val+1,w,c
  2296  000592  A0D8               	btfss	status,0,c
  2297  000594  D002               	goto	u870
  2298                           
  2299                           ;doprnt.c: 1318: break;
  2300  000596  2A36               	incf	printf@c,f,c
  2301  000598  D7EA               	goto	l1692
  2302  00059A                     u870:
  2303                           
  2304                           ;doprnt.c: 1381: if(width > c)
  2305  00059A  0E80               	movlw	128
  2306  00059C  BE36               	btfsc	printf@c,7,c
  2307  00059E  0E7F               	movlw	127
  2308  0005A0  6E29               	movwf	??_printf& (0+255),c
  2309  0005A2  5034               	movf	printf@width,w,c
  2310  0005A4  5C36               	subwf	printf@c,w,c
  2311  0005A6  5035               	movf	printf@width+1,w,c
  2312  0005A8  0A80               	xorlw	128
  2313  0005AA  5829               	subwfb	??_printf& (0+255),w,c
  2314  0005AC  B0D8               	btfsc	status,0,c
  2315  0005AE  D007               	goto	l337
  2316                           
  2317                           ;doprnt.c: 1382: width -= c;
  2318  0005B0  5036               	movf	printf@c,w,c
  2319  0005B2  5E34               	subwf	printf@width,f,c
  2320  0005B4  0E00               	movlw	0
  2321  0005B6  BE36               	btfsc	printf@c,7,c
  2322  0005B8  0EFF               	movlw	255
  2323  0005BA  5A35               	subwfb	printf@width+1,f,c
  2324  0005BC  D004               	goto	l338
  2325  0005BE                     l337:
  2326                           
  2327                           ;doprnt.c: 1383: else
  2328                           ;doprnt.c: 1384: width = 0;
  2329  0005BE  0E00               	movlw	0
  2330  0005C0  6E35               	movwf	printf@width+1,c
  2331  0005C2  0E00               	movlw	0
  2332  0005C4  6E34               	movwf	printf@width,c
  2333  0005C6                     l338:
  2334                           
  2335                           ;doprnt.c: 1387: if(flag & 0x04) {
  2336  0005C6  A430               	btfss	printf@flag,2,c
  2337  0005C8  D00B               	goto	l339
  2338  0005CA                     
  2339                           ;doprnt.c: 1415: if(width)
  2340  0005CA  5034               	movf	printf@width,w,c
  2341  0005CC  1035               	iorwf	printf@width+1,w,c
  2342  0005CE  B4D8               	btfsc	status,2,c
  2343  0005D0  D015               	goto	u930
  2344                           
  2345                           ;doprnt.c: 1417: (putch('0') );
  2346                           
  2347                           ;doprnt.c: 1416: do
  2348  0005D2  0E30               	movlw	48
  2349  0005D4  ECE9  F005         	call	_putch
  2350                           
  2351                           ;doprnt.c: 1418: while(--width);
  2352  0005D8  0634               	decf	printf@width,f,c
  2353  0005DA  A0D8               	btfss	status,0,c
  2354  0005DC  0635               	decf	printf@width+1,f,c
  2355  0005DE  D7F5               	goto	L8
  2356  0005E0                     l339:
  2357                           
  2358                           ;doprnt.c: 1422: {
  2359                           ;doprnt.c: 1424: if(width
  2360                           ;doprnt.c: 1428: )
  2361  0005E0  5034               	movf	printf@width,w,c
  2362  0005E2  1035               	iorwf	printf@width+1,w,c
  2363  0005E4  B4D8               	btfsc	status,2,c
  2364  0005E6  D00A               	goto	u930
  2365  0005E8                     u920:
  2366                           
  2367                           ;doprnt.c: 1430: (putch(' ') );
  2368                           
  2369                           ;doprnt.c: 1429: do
  2370  0005E8  0E20               	movlw	32
  2371  0005EA  ECE9  F005         	call	_putch
  2372                           
  2373                           ;doprnt.c: 1431: while(--width);
  2374  0005EE  0634               	decf	printf@width,f,c
  2375  0005F0  A0D8               	btfss	status,0,c
  2376  0005F2  0635               	decf	printf@width+1,f,c
  2377  0005F4  5034               	movf	printf@width,w,c
  2378  0005F6  1035               	iorwf	printf@width+1,w,c
  2379  0005F8  A4D8               	btfss	status,2,c
  2380  0005FA  D7F6               	goto	u920
  2381  0005FC                     u930:
  2382                           
  2383                           ;doprnt.c: 1469: }
  2384                           ;doprnt.c: 1472: prec = c;
  2385  0005FC  C036  F033         	movff	printf@c,printf@prec
  2386                           
  2387                           ;doprnt.c: 1474: while(prec--) {
  2388  000600  D025               	goto	l347
  2389  000602                     
  2390                           ;doprnt.c: 1478: {
  2391                           ;doprnt.c: 1499: {
  2392                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2393  000602  C031  F014         	movff	printf@val,___lwdiv@dividend
  2394  000606  C032  F015         	movff	printf@val+1,___lwdiv@dividend+1
  2395  00060A  5033               	movf	printf@prec,w,c
  2396  00060C  0D02               	mullw	2
  2397  00060E  0EC0               	movlw	low _hexpowers
  2398  000610  24F3               	addwf	prodl,w,c
  2399  000612  6EF6               	movwf	tblptrl,c
  2400  000614  0EFE               	movlw	high _hexpowers
  2401  000616  20F4               	addwfc	prodh,w,c
  2402  000618  6EF7               	movwf	tblptrh,c
  2403  00061A                     	if	0	;There are less than 3 active tblptr bytes
  2404  00061A                     	endif
  2405  00061A  0009               	tblrd		*+
  2406  00061C  CFF5 F016          	movff	tablat,___lwdiv@divisor
  2407  000620  000A               	tblrd		*-
  2408  000622  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
  2409  000626  EC3B  F005         	call	___lwdiv	;wreg free
  2410  00062A  5014               	movf	?___lwdiv,w,c
  2411  00062C  0B0F               	andlw	15
  2412  00062E  6E2F               	movwf	printf@idx,c
  2413                           
  2414                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2415  000630  502F               	movf	printf@idx,w,c
  2416  000632  0D01               	mullw	1
  2417  000634  0E9E               	movlw	low STR_17
  2418  000636  24F3               	addwf	prodl,w,c
  2419  000638  6EF6               	movwf	tblptrl,c
  2420  00063A  0EFF               	movlw	high STR_17
  2421  00063C  20F4               	addwfc	prodh,w,c
  2422  00063E  6EF7               	movwf	tblptrh,c
  2423  000640                     	if	0	;There are less than 3 active tblptr bytes
  2424  000640                     	endif
  2425  000640  0008               	tblrd		*
  2426  000642  CFF5 F036          	movff	tablat,printf@c
  2427                           
  2428                           ;doprnt.c: 1508: }
  2429                           ;doprnt.c: 1523: }
  2430                           ;doprnt.c: 1524: (putch(c) );
  2431  000646  5036               	movf	printf@c,w,c
  2432  000648  ECE9  F005         	call	_putch
  2433  00064C                     l347:
  2434  00064C  0633               	decf	printf@prec,f,c
  2435  00064E  2833               	incf	printf@prec,w,c
  2436  000650  A4D8               	btfss	status,2,c
  2437  000652  D7D7               	goto	l348
  2438  000654                     u940:
  2439  000654  C01B  FFF6         	movff	printf@f,tblptrl
  2440  000658  C01C  FFF7         	movff	printf@f+1,tblptrh
  2441  00065C  4A1B               	infsnz	printf@f,f,c
  2442  00065E  2A1C               	incf	printf@f+1,f,c
  2443  000660                     	if	0	;tblptru may be non-zero
  2444  000660                     	endif
  2445  000660                     	if	0	;tblptru may be non-zero
  2446  000660                     	endif
  2447  000660  0008               	tblrd		*
  2448  000662  CFF5 F036          	movff	tablat,printf@c
  2449  000666  5036               	movf	printf@c,w,c
  2450  000668  B4D8               	btfsc	status,2,c
  2451  00066A  0012               	return	
  2452  00066C  D70B               	goto	l317
  2453  00066E                     __end_of_printf:
  2454                           	opt stack 0
  2455                           tblptru	equ	0xFF8
  2456                           tblptrh	equ	0xFF7
  2457                           tblptrl	equ	0xFF6
  2458                           tablat	equ	0xFF5
  2459                           prodh	equ	0xFF4
  2460                           prodl	equ	0xFF3
  2461                           intcon	equ	0xFF2
  2462                           intcon3	equ	0xFF0
  2463                           postinc0	equ	0xFEE
  2464                           wreg	equ	0xFE8
  2465                           postdec1	equ	0xFE5
  2466                           plusw1	equ	0xFE3
  2467                           fsr1l	equ	0xFE1
  2468                           indf2	equ	0xFDF
  2469                           postinc2	equ	0xFDE
  2470                           postdec2	equ	0xFDD
  2471                           plusw2	equ	0xFDB
  2472                           fsr2h	equ	0xFDA
  2473                           fsr2l	equ	0xFD9
  2474                           status	equ	0xFD8
  2475                           
  2476 ;; *************** function _putch *****************
  2477 ;; Defined at:
  2478 ;;		line 24 in file "lcd.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  data            1    wreg     unsigned char 
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  data            1   21[COMRAM] unsigned char 
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  1    wreg      void 
  2485 ;; Registers used:
  2486 ;;		wreg, status,2, status,0, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2495 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2496 ;;Total ram usage:        1 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; Hardware stack levels required when called:    2
  2499 ;; This function calls:
  2500 ;;		_lcdNibble
  2501 ;; This function is called by:
  2502 ;;		_operation
  2503 ;;		_printf
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text3
  2508  000BD2                     __ptext3:
  2509                           	opt stack 0
  2510  000BD2                     _putch:
  2511                           	opt stack 27
  2512                           
  2513                           ;incstack = 0
  2514                           ;putch@data stored from wreg
  2515  000BD2  6E16               	movwf	putch@data,c
  2516                           
  2517                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2518  000BD4  848C               	bsf	3980,2,c	;volatile
  2519                           
  2520                           ;lcd.c: 33: lcdNibble(data);
  2521  000BD6  5016               	movf	putch@data,w,c
  2522  000BD8  EC96  F004         	call	_lcdNibble
  2523                           
  2524                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2525  000BDC  0EC8               	movlw	200
  2526  000BDE                     u1507:
  2527  000BDE  D000               	nop2	
  2528  000BE0  2EE8               	decfsz	wreg,f,c
  2529  000BE2  D7FD               	bra	u1507
  2530  000BE4  0012               	return		;funcret
  2531  000BE6                     __end_of_putch:
  2532                           	opt stack 0
  2533                           tblptru	equ	0xFF8
  2534                           tblptrh	equ	0xFF7
  2535                           tblptrl	equ	0xFF6
  2536                           tablat	equ	0xFF5
  2537                           prodh	equ	0xFF4
  2538                           prodl	equ	0xFF3
  2539                           intcon	equ	0xFF2
  2540                           intcon3	equ	0xFF0
  2541                           postinc0	equ	0xFEE
  2542                           wreg	equ	0xFE8
  2543                           postdec1	equ	0xFE5
  2544                           plusw1	equ	0xFE3
  2545                           fsr1l	equ	0xFE1
  2546                           indf2	equ	0xFDF
  2547                           postinc2	equ	0xFDE
  2548                           postdec2	equ	0xFDD
  2549                           plusw2	equ	0xFDB
  2550                           fsr2h	equ	0xFDA
  2551                           fsr2l	equ	0xFD9
  2552                           status	equ	0xFD8
  2553                           
  2554 ;; *************** function _isdigit *****************
  2555 ;; Defined at:
  2556 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  c               1    wreg     unsigned char 
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;  c               1   21[COMRAM] unsigned char 
  2561 ;; Return value:  Size  Location     Type
  2562 ;;		None               void
  2563 ;; Registers used:
  2564 ;;		wreg, status,2, status,0
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2571 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2572 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2573 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2574 ;;Total ram usage:        3 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; Hardware stack levels required when called:    1
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_printf
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           	psect	text4
  2585  000B98                     __ptext4:
  2586                           	opt stack 0
  2587  000B98                     _isdigit:
  2588                           	opt stack 28
  2589                           
  2590                           ;incstack = 0
  2591                           ;isdigit@c stored from wreg
  2592  000B98  6E16               	movwf	isdigit@c,c
  2593  000B9A  0E00               	movlw	0
  2594  000B9C  6E15               	movwf	_isdigit$773,c
  2595  000B9E  0E3A               	movlw	58
  2596  000BA0  6016               	cpfslt	isdigit@c,c
  2597  000BA2  D005               	goto	l681
  2598  000BA4  0E2F               	movlw	47
  2599  000BA6  6416               	cpfsgt	isdigit@c,c
  2600  000BA8  D002               	goto	l681
  2601  000BAA  0E01               	movlw	1
  2602  000BAC  6E15               	movwf	_isdigit$773,c
  2603  000BAE                     l681:
  2604  000BAE  C015  F014         	movff	_isdigit$773,??_isdigit
  2605  000BB2  3014               	rrcf	??_isdigit,w,c
  2606  000BB4  0012               	return	
  2607  000BB6                     __end_of_isdigit:
  2608                           	opt stack 0
  2609                           tblptru	equ	0xFF8
  2610                           tblptrh	equ	0xFF7
  2611                           tblptrl	equ	0xFF6
  2612                           tablat	equ	0xFF5
  2613                           prodh	equ	0xFF4
  2614                           prodl	equ	0xFF3
  2615                           intcon	equ	0xFF2
  2616                           intcon3	equ	0xFF0
  2617                           postinc0	equ	0xFEE
  2618                           wreg	equ	0xFE8
  2619                           postdec1	equ	0xFE5
  2620                           plusw1	equ	0xFE3
  2621                           fsr1l	equ	0xFE1
  2622                           indf2	equ	0xFDF
  2623                           postinc2	equ	0xFDE
  2624                           postdec2	equ	0xFDD
  2625                           plusw2	equ	0xFDB
  2626                           fsr2h	equ	0xFDA
  2627                           fsr2l	equ	0xFD9
  2628                           status	equ	0xFD8
  2629                           
  2630 ;; *************** function ___wmul *****************
  2631 ;; Defined at:
  2632 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  multiplier      2   19[COMRAM] unsigned int 
  2635 ;;  multiplicand    2   21[COMRAM] unsigned int 
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;  product         2   23[COMRAM] unsigned int 
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  2   19[COMRAM] unsigned int 
  2640 ;; Registers used:
  2641 ;;		wreg, status,2, status,0, prodl, prodh
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;Total ram usage:        6 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    1
  2654 ;; This function calls:
  2655 ;;		Nothing
  2656 ;; This function is called by:
  2657 ;;		_printf
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text5
  2662  000B4E                     __ptext5:
  2663                           	opt stack 0
  2664  000B4E                     ___wmul:
  2665                           	opt stack 28
  2666                           
  2667                           ;incstack = 0
  2668  000B4E  5014               	movf	___wmul@multiplier,w,c
  2669  000B50  0216               	mulwf	___wmul@multiplicand,c
  2670  000B52  CFF3 F018          	movff	prodl,___wmul@product
  2671  000B56  CFF4 F019          	movff	prodh,___wmul@product+1
  2672  000B5A  5014               	movf	___wmul@multiplier,w,c
  2673  000B5C  0217               	mulwf	___wmul@multiplicand+1,c
  2674  000B5E  50F3               	movf	prodl,w,c
  2675  000B60  2619               	addwf	___wmul@product+1,f,c
  2676  000B62  5015               	movf	___wmul@multiplier+1,w,c
  2677  000B64  0216               	mulwf	___wmul@multiplicand,c
  2678  000B66  50F3               	movf	prodl,w,c
  2679  000B68  2619               	addwf	___wmul@product+1,f,c
  2680  000B6A  C018  F014         	movff	___wmul@product,?___wmul
  2681  000B6E  C019  F015         	movff	___wmul@product+1,?___wmul+1
  2682  000B72  0012               	return	
  2683  000B74                     __end_of___wmul:
  2684                           	opt stack 0
  2685                           tblptru	equ	0xFF8
  2686                           tblptrh	equ	0xFF7
  2687                           tblptrl	equ	0xFF6
  2688                           tablat	equ	0xFF5
  2689                           prodh	equ	0xFF4
  2690                           prodl	equ	0xFF3
  2691                           intcon	equ	0xFF2
  2692                           intcon3	equ	0xFF0
  2693                           postinc0	equ	0xFEE
  2694                           wreg	equ	0xFE8
  2695                           postdec1	equ	0xFE5
  2696                           plusw1	equ	0xFE3
  2697                           fsr1l	equ	0xFE1
  2698                           indf2	equ	0xFDF
  2699                           postinc2	equ	0xFDE
  2700                           postdec2	equ	0xFDD
  2701                           plusw2	equ	0xFDB
  2702                           fsr2h	equ	0xFDA
  2703                           fsr2l	equ	0xFD9
  2704                           status	equ	0xFD8
  2705                           
  2706 ;; *************** function ___lwdiv *****************
  2707 ;; Defined at:
  2708 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  dividend        2   19[COMRAM] unsigned int 
  2711 ;;  divisor         2   21[COMRAM] unsigned int 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;  quotient        2   23[COMRAM] unsigned int 
  2714 ;;  counter         1   25[COMRAM] unsigned char 
  2715 ;; Return value:  Size  Location     Type
  2716 ;;                  2   19[COMRAM] unsigned int 
  2717 ;; Registers used:
  2718 ;;		wreg, status,2, status,0
  2719 ;; Tracked objects:
  2720 ;;		On entry : 0/0
  2721 ;;		On exit  : 0/0
  2722 ;;		Unchanged: 0/0
  2723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2724 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;Total ram usage:        7 bytes
  2729 ;; Hardware stack levels used:    1
  2730 ;; Hardware stack levels required when called:    1
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_printf
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text6
  2739  000A76                     __ptext6:
  2740                           	opt stack 0
  2741  000A76                     ___lwdiv:
  2742                           	opt stack 28
  2743                           
  2744                           ;incstack = 0
  2745  000A76  0E00               	movlw	0
  2746  000A78  6E19               	movwf	___lwdiv@quotient+1,c
  2747  000A7A  0E00               	movlw	0
  2748  000A7C  6E18               	movwf	___lwdiv@quotient,c
  2749  000A7E  5016               	movf	___lwdiv@divisor,w,c
  2750  000A80  1017               	iorwf	___lwdiv@divisor+1,w,c
  2751  000A82  B4D8               	btfsc	status,2,c
  2752  000A84  D01C               	goto	l765
  2753  000A86  0E01               	movlw	1
  2754  000A88  6E1A               	movwf	___lwdiv@counter,c
  2755  000A8A  D004               	goto	l760
  2756  000A8C  90D8               	bcf	status,0,c
  2757  000A8E  3616               	rlcf	___lwdiv@divisor,f,c
  2758  000A90  3617               	rlcf	___lwdiv@divisor+1,f,c
  2759  000A92  2A1A               	incf	___lwdiv@counter,f,c
  2760  000A94                     l760:
  2761  000A94  AE17               	btfss	___lwdiv@divisor+1,7,c
  2762  000A96  D7FA               	goto	l761
  2763  000A98                     u800:
  2764  000A98  90D8               	bcf	status,0,c
  2765  000A9A  3618               	rlcf	___lwdiv@quotient,f,c
  2766  000A9C  3619               	rlcf	___lwdiv@quotient+1,f,c
  2767  000A9E  5016               	movf	___lwdiv@divisor,w,c
  2768  000AA0  5C14               	subwf	___lwdiv@dividend,w,c
  2769  000AA2  5017               	movf	___lwdiv@divisor+1,w,c
  2770  000AA4  5815               	subwfb	___lwdiv@dividend+1,w,c
  2771  000AA6  A0D8               	btfss	status,0,c
  2772  000AA8  D005               	goto	l764
  2773  000AAA  5016               	movf	___lwdiv@divisor,w,c
  2774  000AAC  5E14               	subwf	___lwdiv@dividend,f,c
  2775  000AAE  5017               	movf	___lwdiv@divisor+1,w,c
  2776  000AB0  5A15               	subwfb	___lwdiv@dividend+1,f,c
  2777  000AB2  8018               	bsf	___lwdiv@quotient,0,c
  2778  000AB4                     l764:
  2779  000AB4  90D8               	bcf	status,0,c
  2780  000AB6  3217               	rrcf	___lwdiv@divisor+1,f,c
  2781  000AB8  3216               	rrcf	___lwdiv@divisor,f,c
  2782  000ABA  2E1A               	decfsz	___lwdiv@counter,f,c
  2783  000ABC  D7ED               	goto	u800
  2784  000ABE                     l765:
  2785  000ABE  C018  F014         	movff	___lwdiv@quotient,?___lwdiv
  2786  000AC2  C019  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2787  000AC6  0012               	return		;funcret
  2788  000AC8                     __end_of___lwdiv:
  2789                           	opt stack 0
  2790                           tblptru	equ	0xFF8
  2791                           tblptrh	equ	0xFF7
  2792                           tblptrl	equ	0xFF6
  2793                           tablat	equ	0xFF5
  2794                           prodh	equ	0xFF4
  2795                           prodl	equ	0xFF3
  2796                           intcon	equ	0xFF2
  2797                           intcon3	equ	0xFF0
  2798                           postinc0	equ	0xFEE
  2799                           wreg	equ	0xFE8
  2800                           postdec1	equ	0xFE5
  2801                           plusw1	equ	0xFE3
  2802                           fsr1l	equ	0xFE1
  2803                           indf2	equ	0xFDF
  2804                           postinc2	equ	0xFDE
  2805                           postdec2	equ	0xFDD
  2806                           plusw2	equ	0xFDB
  2807                           fsr2h	equ	0xFDA
  2808                           fsr2l	equ	0xFD9
  2809                           status	equ	0xFD8
  2810                           
  2811 ;; *************** function _lcd_set_cursor *****************
  2812 ;; Defined at:
  2813 ;;		line 80 in file "lcd.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;  x               1    wreg     unsigned char 
  2816 ;;  y               1   25[COMRAM] unsigned char 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  x               1   27[COMRAM] unsigned char 
  2819 ;; Return value:  Size  Location     Type
  2820 ;;                  1    wreg      void 
  2821 ;; Registers used:
  2822 ;;		wreg, status,2, status,0, cstack
  2823 ;; Tracked objects:
  2824 ;;		On entry : 0/0
  2825 ;;		On exit  : 0/0
  2826 ;;		Unchanged: 0/0
  2827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2828 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;Total ram usage:        3 bytes
  2833 ;; Hardware stack levels used:    1
  2834 ;; Hardware stack levels required when called:    4
  2835 ;; This function calls:
  2836 ;;		_lcdInst
  2837 ;;		_lcd_shift_cursor
  2838 ;; This function is called by:
  2839 ;;		_operation
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           	psect	text7
  2844  0009AA                     __ptext7:
  2845                           	opt stack 0
  2846  0009AA                     _lcd_set_cursor:
  2847                           	opt stack 25
  2848                           
  2849                           ;incstack = 0
  2850                           ;lcd_set_cursor@x stored from wreg
  2851  0009AA  6E1C               	movwf	lcd_set_cursor@x,c
  2852                           
  2853                           ;lcd.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2854  0009AC  0E80               	movlw	128
  2855  0009AE  ECF3  F005         	call	_lcdInst
  2856  0009B2  0E41               	movlw	65
  2857  0009B4  6E1B               	movwf	??_lcd_set_cursor& (0+255),c
  2858  0009B6  0EEE               	movlw	238
  2859  0009B8                     u1517:
  2860  0009B8  2EE8               	decfsz	wreg,f,c
  2861  0009BA  D7FE               	bra	u1517
  2862  0009BC  2E1B               	decfsz	??_lcd_set_cursor& (0+255),f,c
  2863  0009BE  D7FC               	bra	u1517
  2864  0009C0  D000               	nop2	
  2865                           
  2866                           ;lcd.c: 92: switch (y) {
  2867  0009C2  D018               	goto	l41
  2868  0009C4                     
  2869                           ;lcd.c: 94: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2870  0009C4  0E80               	movlw	128
  2871  0009C6  ECF3  F005         	call	_lcdInst
  2872  0009CA  0E41               	movlw	65
  2873  0009CC  6E1B               	movwf	??_lcd_set_cursor& (0+255),c
  2874  0009CE  0EEE               	movlw	238
  2875  0009D0                     u1527:
  2876  0009D0  2EE8               	decfsz	wreg,f,c
  2877  0009D2  D7FE               	bra	u1527
  2878  0009D4  2E1B               	decfsz	??_lcd_set_cursor& (0+255),f,c
  2879  0009D6  D7FC               	bra	u1527
  2880  0009D8  D000               	nop2	
  2881                           
  2882                           ;lcd.c: 95: break;
  2883  0009DA  D019               	goto	l43
  2884  0009DC                     
  2885                           ;lcd.c: 97: lcdInst(0xC0);;
  2886  0009DC  0EC0               	movlw	192
  2887  0009DE  ECF3  F005         	call	_lcdInst
  2888                           
  2889                           ;lcd.c: 98: break;
  2890  0009E2  D015               	goto	l43
  2891  0009E4                     
  2892                           ;lcd.c: 100: lcdInst(0x94);;
  2893  0009E4  0E94               	movlw	148
  2894  0009E6  ECF3  F005         	call	_lcdInst
  2895                           
  2896                           ;lcd.c: 101: break;
  2897  0009EA  D011               	goto	l43
  2898  0009EC                     
  2899                           ;lcd.c: 103: lcdInst(0xD4);;
  2900  0009EC  0ED4               	movlw	212
  2901  0009EE  ECF3  F005         	call	_lcdInst
  2902                           
  2903                           ;lcd.c: 105: }
  2904                           
  2905                           ;lcd.c: 104: break;
  2906  0009F2  D00D               	goto	l43
  2907  0009F4                     l41:
  2908  0009F4  501A               	movf	lcd_set_cursor@y,w,c
  2909                           
  2910                           ; Switch size 1, requested type "space"
  2911                           ; Number of cases is 4, Range of values is 0 to 3
  2912                           ; switch strategies available:
  2913                           ; Name         Instructions Cycles
  2914                           ; simple_byte           13     7 (average)
  2915                           ;	Chosen strategy is simple_byte
  2916  0009F6  0A00               	xorlw	0	; case 0
  2917  0009F8  B4D8               	btfsc	status,2,c
  2918  0009FA  D7E4               	goto	l42
  2919  0009FC  0A01               	xorlw	1	; case 1
  2920  0009FE  B4D8               	btfsc	status,2,c
  2921  000A00  D7ED               	goto	l44
  2922  000A02  0A03               	xorlw	3	; case 2
  2923  000A04  B4D8               	btfsc	status,2,c
  2924  000A06  D7EE               	goto	l45
  2925  000A08  0A01               	xorlw	1	; case 3
  2926  000A0A  B4D8               	btfsc	status,2,c
  2927  000A0C  D7EF               	goto	l46
  2928  000A0E                     l43:
  2929                           
  2930                           ;lcd.c: 107: lcd_shift_cursor(x, 1);
  2931  000A0E  0E01               	movlw	1
  2932  000A10  6E17               	movwf	lcd_shift_cursor@direction,c
  2933  000A12  501C               	movf	lcd_set_cursor@x,w,c
  2934  000A14  ECDB  F005         	call	_lcd_shift_cursor
  2935  000A18  0012               	return		;funcret
  2936  000A1A                     __end_of_lcd_set_cursor:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           prodh	equ	0xFF4
  2943                           prodl	equ	0xFF3
  2944                           intcon	equ	0xFF2
  2945                           intcon3	equ	0xFF0
  2946                           postinc0	equ	0xFEE
  2947                           wreg	equ	0xFE8
  2948                           postdec1	equ	0xFE5
  2949                           plusw1	equ	0xFE3
  2950                           fsr1l	equ	0xFE1
  2951                           indf2	equ	0xFDF
  2952                           postinc2	equ	0xFDE
  2953                           postdec2	equ	0xFDD
  2954                           plusw2	equ	0xFDB
  2955                           fsr2h	equ	0xFDA
  2956                           fsr2l	equ	0xFD9
  2957                           status	equ	0xFD8
  2958                           
  2959 ;; *************** function _lcd_shift_cursor *****************
  2960 ;; Defined at:
  2961 ;;		line 110 in file "lcd.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  numChars        1    wreg     unsigned char 
  2964 ;;  direction       1   22[COMRAM] unsigned char 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;  numChars        1   23[COMRAM] unsigned char 
  2967 ;;  n               1   24[COMRAM] unsigned char 
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      void 
  2970 ;; Registers used:
  2971 ;;		wreg, status,2, status,0, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2977 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;Total ram usage:        3 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    3
  2984 ;; This function calls:
  2985 ;;		_lcdInst
  2986 ;; This function is called by:
  2987 ;;		_lcd_set_cursor
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text8
  2992  000BB6                     __ptext8:
  2993                           	opt stack 0
  2994  000BB6                     _lcd_shift_cursor:
  2995                           	opt stack 25
  2996                           
  2997                           ;incstack = 0
  2998                           ;lcd_shift_cursor@numChars stored from wreg
  2999  000BB6  6E18               	movwf	lcd_shift_cursor@numChars,c
  3000                           
  3001                           ;lcd.c: 122: for(unsigned char n = numChars; n > 0; n--){
  3002  000BB8  C018  F019         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  3003  000BBC                     l1586:
  3004  000BBC  5019               	movf	lcd_shift_cursor@n,w,c
  3005  000BBE  B4D8               	btfsc	status,2,c
  3006  000BC0  0012               	return	
  3007                           
  3008                           ;lcd.c: 125: lcdInst((unsigned char)(0x10 | (direction << 2)));
  3009  000BC2  4417               	rlncf	lcd_shift_cursor@direction,w,c
  3010  000BC4  46E8               	rlncf	wreg,f,c
  3011  000BC6  0BFC               	andlw	252
  3012  000BC8  0910               	iorlw	16
  3013  000BCA  ECF3  F005         	call	_lcdInst
  3014  000BCE  0619               	decf	lcd_shift_cursor@n,f,c
  3015  000BD0  D7F5               	goto	l1586
  3016  000BD2                     __end_of_lcd_shift_cursor:
  3017                           	opt stack 0
  3018                           tblptru	equ	0xFF8
  3019                           tblptrh	equ	0xFF7
  3020                           tblptrl	equ	0xFF6
  3021                           tablat	equ	0xFF5
  3022                           prodh	equ	0xFF4
  3023                           prodl	equ	0xFF3
  3024                           intcon	equ	0xFF2
  3025                           intcon3	equ	0xFF0
  3026                           postinc0	equ	0xFEE
  3027                           wreg	equ	0xFE8
  3028                           postdec1	equ	0xFE5
  3029                           plusw1	equ	0xFE3
  3030                           fsr1l	equ	0xFE1
  3031                           indf2	equ	0xFDF
  3032                           postinc2	equ	0xFDE
  3033                           postdec2	equ	0xFDD
  3034                           plusw2	equ	0xFDB
  3035                           fsr2h	equ	0xFDA
  3036                           fsr2l	equ	0xFD9
  3037                           status	equ	0xFD8
  3038                           
  3039 ;; *************** function _logging *****************
  3040 ;; Defined at:
  3041 ;;		line 339 in file "main.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;		None
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		None
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;Total ram usage:        0 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    1
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_main
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           	psect	text9
  3070  000C2C                     __ptext9:
  3071                           	opt stack 0
  3072  000C2C                     _logging:
  3073                           	opt stack 29
  3074                           
  3075                           ;main.c: 340: return;
  3076                           
  3077                           ;incstack = 0
  3078  000C2C  0012               	return		;funcret
  3079  000C2E                     __end_of_logging:
  3080                           	opt stack 0
  3081                           tblptru	equ	0xFF8
  3082                           tblptrh	equ	0xFF7
  3083                           tblptrl	equ	0xFF6
  3084                           tablat	equ	0xFF5
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           intcon	equ	0xFF2
  3088                           intcon3	equ	0xFF0
  3089                           postinc0	equ	0xFEE
  3090                           wreg	equ	0xFE8
  3091                           postdec1	equ	0xFE5
  3092                           plusw1	equ	0xFE3
  3093                           fsr1l	equ	0xFE1
  3094                           indf2	equ	0xFDF
  3095                           postinc2	equ	0xFDE
  3096                           postdec2	equ	0xFDD
  3097                           plusw2	equ	0xFDB
  3098                           fsr2h	equ	0xFDA
  3099                           fsr2l	equ	0xFD9
  3100                           status	equ	0xFD8
  3101                           
  3102 ;; *************** function _initLCD *****************
  3103 ;; Defined at:
  3104 ;;		line 60 in file "lcd.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;		None
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  1    wreg      void 
  3111 ;; Registers used:
  3112 ;;		wreg, status,2, status,0, cstack
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;Total ram usage:        1 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:    3
  3125 ;; This function calls:
  3126 ;;		_lcdInst
  3127 ;; This function is called by:
  3128 ;;		_main
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           	psect	text10
  3133  000AC8                     __ptext10:
  3134                           	opt stack 0
  3135  000AC8                     _initLCD:
  3136                           	opt stack 27
  3137                           
  3138                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  3139                           
  3140                           ;incstack = 0
  3141  000AC8  0EC3               	movlw	195
  3142  000ACA  6E17               	movwf	??_initLCD& (0+255),c
  3143  000ACC  0ECD               	movlw	205
  3144  000ACE                     u1537:
  3145  000ACE  2EE8               	decfsz	wreg,f,c
  3146  000AD0  D7FE               	bra	u1537
  3147  000AD2  2E17               	decfsz	??_initLCD& (0+255),f,c
  3148  000AD4  D7FC               	bra	u1537
  3149  000AD6  F000               	nop	
  3150                           
  3151                           ;lcd.c: 69: lcdInst(0b00110011);
  3152  000AD8  0E33               	movlw	51
  3153  000ADA  ECF3  F005         	call	_lcdInst
  3154                           
  3155                           ;lcd.c: 70: lcdInst(0b00110010);
  3156  000ADE  0E32               	movlw	50
  3157  000AE0  ECF3  F005         	call	_lcdInst
  3158                           
  3159                           ;lcd.c: 71: lcdInst(0b00101000);
  3160  000AE4  0E28               	movlw	40
  3161  000AE6  ECF3  F005         	call	_lcdInst
  3162                           
  3163                           ;lcd.c: 72: lcdInst(0b00001111);
  3164  000AEA  0E0F               	movlw	15
  3165  000AEC  ECF3  F005         	call	_lcdInst
  3166                           
  3167                           ;lcd.c: 73: lcdInst(0b00000110);
  3168  000AF0  0E06               	movlw	6
  3169  000AF2  ECF3  F005         	call	_lcdInst
  3170                           
  3171                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3172  000AF6  0E01               	movlw	1
  3173  000AF8  ECF3  F005         	call	_lcdInst
  3174  000AFC  0EC3               	movlw	195
  3175  000AFE  6E17               	movwf	??_initLCD& (0+255),c
  3176  000B00  0ECD               	movlw	205
  3177  000B02                     u1547:
  3178  000B02  2EE8               	decfsz	wreg,f,c
  3179  000B04  D7FE               	bra	u1547
  3180  000B06  2E17               	decfsz	??_initLCD& (0+255),f,c
  3181  000B08  D7FC               	bra	u1547
  3182  000B0A  F000               	nop	
  3183                           
  3184                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  3185  000B0C  0E0F               	movlw	15
  3186  000B0E  ECF3  F005         	call	_lcdInst
  3187  000B12  0012               	return		;funcret
  3188  000B14                     __end_of_initLCD:
  3189                           	opt stack 0
  3190                           tblptru	equ	0xFF8
  3191                           tblptrh	equ	0xFF7
  3192                           tblptrl	equ	0xFF6
  3193                           tablat	equ	0xFF5
  3194                           prodh	equ	0xFF4
  3195                           prodl	equ	0xFF3
  3196                           intcon	equ	0xFF2
  3197                           intcon3	equ	0xFF0
  3198                           postinc0	equ	0xFEE
  3199                           wreg	equ	0xFE8
  3200                           postdec1	equ	0xFE5
  3201                           plusw1	equ	0xFE3
  3202                           fsr1l	equ	0xFE1
  3203                           indf2	equ	0xFDF
  3204                           postinc2	equ	0xFDE
  3205                           postdec2	equ	0xFDD
  3206                           plusw2	equ	0xFDB
  3207                           fsr2h	equ	0xFDA
  3208                           fsr2l	equ	0xFD9
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function _lcdInst *****************
  3212 ;; Defined at:
  3213 ;;		line 11 in file "lcd.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  data            1    wreg     unsigned char 
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;  data            1   21[COMRAM] unsigned char 
  3218 ;; Return value:  Size  Location     Type
  3219 ;;                  1    wreg      void 
  3220 ;; Registers used:
  3221 ;;		wreg, status,2, status,0, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;Total ram usage:        1 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:    2
  3234 ;; This function calls:
  3235 ;;		_lcdNibble
  3236 ;; This function is called by:
  3237 ;;		_initLCD
  3238 ;;		_lcd_set_cursor
  3239 ;;		_lcd_shift_cursor
  3240 ;;		_main
  3241 ;;		_operation
  3242 ;;		_lcd_shift_display
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text11
  3247  000BE6                     __ptext11:
  3248                           	opt stack 0
  3249  000BE6                     _lcdInst:
  3250                           	opt stack 25
  3251                           
  3252                           ;incstack = 0
  3253                           ;lcdInst@data stored from wreg
  3254  000BE6  6E16               	movwf	lcdInst@data,c
  3255                           
  3256                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  3257  000BE8  948C               	bcf	3980,2,c	;volatile
  3258                           
  3259                           ;lcd.c: 20: lcdNibble(data);
  3260  000BEA  5016               	movf	lcdInst@data,w,c
  3261  000BEC  EC96  F004         	call	_lcdNibble
  3262                           
  3263                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3264  000BF0  0EC8               	movlw	200
  3265  000BF2                     u1557:
  3266  000BF2  D000               	nop2	
  3267  000BF4  2EE8               	decfsz	wreg,f,c
  3268  000BF6  D7FD               	bra	u1557
  3269  000BF8  0012               	return		;funcret
  3270  000BFA                     __end_of_lcdInst:
  3271                           	opt stack 0
  3272                           tblptru	equ	0xFF8
  3273                           tblptrh	equ	0xFF7
  3274                           tblptrl	equ	0xFF6
  3275                           tablat	equ	0xFF5
  3276                           prodh	equ	0xFF4
  3277                           prodl	equ	0xFF3
  3278                           intcon	equ	0xFF2
  3279                           intcon3	equ	0xFF0
  3280                           postinc0	equ	0xFEE
  3281                           wreg	equ	0xFE8
  3282                           postdec1	equ	0xFE5
  3283                           plusw1	equ	0xFE3
  3284                           fsr1l	equ	0xFE1
  3285                           indf2	equ	0xFDF
  3286                           postinc2	equ	0xFDE
  3287                           postdec2	equ	0xFDD
  3288                           plusw2	equ	0xFDB
  3289                           fsr2h	equ	0xFDA
  3290                           fsr2l	equ	0xFD9
  3291                           status	equ	0xFD8
  3292                           
  3293 ;; *************** function _lcdNibble *****************
  3294 ;; Defined at:
  3295 ;;		line 37 in file "lcd.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;  data            1    wreg     unsigned char 
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;  data            1   20[COMRAM] unsigned char 
  3300 ;;  temp            1   19[COMRAM] unsigned char 
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      void 
  3303 ;; Registers used:
  3304 ;;		wreg, status,2, status,0
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3311 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3314 ;;Total ram usage:        2 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    1
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_lcdInst
  3321 ;;		_putch
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           	psect	text12
  3326  00092C                     __ptext12:
  3327                           	opt stack 0
  3328  00092C                     _lcdNibble:
  3329                           	opt stack 27
  3330                           
  3331                           ;incstack = 0
  3332                           ;lcdNibble@data stored from wreg
  3333  00092C  6E15               	movwf	lcdNibble@data,c
  3334                           
  3335                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  3336  00092E  5015               	movf	lcdNibble@data,w,c
  3337  000930  0BF0               	andlw	240
  3338  000932  6E14               	movwf	lcdNibble@temp,c
  3339                           
  3340                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  3341  000934  508C               	movf	3980,w,c	;volatile
  3342  000936  0B0F               	andlw	15
  3343  000938  6E8C               	movwf	3980,c	;volatile
  3344                           
  3345                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  3346  00093A  5014               	movf	lcdNibble@temp,w,c
  3347  00093C  108C               	iorwf	3980,w,c	;volatile
  3348  00093E  6E8C               	movwf	3980,c	;volatile
  3349                           
  3350                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3351  000940  0E00               	movlw	0
  3352  000942  BEF2               	btfsc	intcon,7,c	;volatile
  3353  000944  0E01               	movlw	1
  3354  000946  6E56               	movwf	_LCDinterruptState,c
  3355  000948  9EF2               	bcf	intcon,7,c	;volatile
  3356  00094A  868C               	bsf	3980,3,c	;volatile
  3357  00094C  0E53               	movlw	83
  3358  00094E                     u1567:
  3359  00094E  2EE8               	decfsz	wreg,f,c
  3360  000950  D7FE               	bra	u1567
  3361  000952  F000               	nop	
  3362  000954  968C               	bcf	3980,3,c	;volatile
  3363  000956  0EC8               	movlw	200
  3364  000958                     u1577:
  3365  000958  D000               	nop2	
  3366  00095A  2EE8               	decfsz	wreg,f,c
  3367  00095C  D7FD               	bra	u1577
  3368  00095E  B056               	btfsc	_LCDinterruptState,0,c
  3369  000960  D002               	bra	u15
  3370  000962  9EF2               	bcf	intcon,7,c	;volatile
  3371  000964  D001               	bra	u16
  3372  000966                     u15:
  3373  000966  8EF2               	bsf	intcon,7,c	;volatile
  3374  000968                     u16:
  3375                           
  3376                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  3377  000968  3815               	swapf	lcdNibble@data,w,c
  3378  00096A  0BF0               	andlw	240
  3379  00096C  6E15               	movwf	lcdNibble@data,c
  3380                           
  3381                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  3382  00096E  5015               	movf	lcdNibble@data,w,c
  3383  000970  0BF0               	andlw	240
  3384  000972  6E14               	movwf	lcdNibble@temp,c
  3385                           
  3386                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  3387  000974  508C               	movf	3980,w,c	;volatile
  3388  000976  0B0F               	andlw	15
  3389  000978  6E8C               	movwf	3980,c	;volatile
  3390                           
  3391                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  3392  00097A  5014               	movf	lcdNibble@temp,w,c
  3393  00097C  108C               	iorwf	3980,w,c	;volatile
  3394  00097E  6E8C               	movwf	3980,c	;volatile
  3395                           
  3396                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3397  000980  0E00               	movlw	0
  3398  000982  BEF2               	btfsc	intcon,7,c	;volatile
  3399  000984  0E01               	movlw	1
  3400  000986  6E56               	movwf	_LCDinterruptState,c
  3401  000988  9EF2               	bcf	intcon,7,c	;volatile
  3402  00098A  868C               	bsf	3980,3,c	;volatile
  3403  00098C  0E53               	movlw	83
  3404  00098E                     u1587:
  3405  00098E  2EE8               	decfsz	wreg,f,c
  3406  000990  D7FE               	bra	u1587
  3407  000992  F000               	nop	
  3408  000994  968C               	bcf	3980,3,c	;volatile
  3409  000996  0EC8               	movlw	200
  3410  000998                     u1597:
  3411  000998  D000               	nop2	
  3412  00099A  2EE8               	decfsz	wreg,f,c
  3413  00099C  D7FD               	bra	u1597
  3414  00099E  B056               	btfsc	_LCDinterruptState,0,c
  3415  0009A0  D002               	bra	u25
  3416  0009A2  9EF2               	bcf	intcon,7,c	;volatile
  3417  0009A4  D001               	bra	u26
  3418  0009A6                     u25:
  3419  0009A6  8EF2               	bsf	intcon,7,c	;volatile
  3420  0009A8                     u26:
  3421  0009A8  0012               	return		;funcret
  3422  0009AA                     __end_of_lcdNibble:
  3423                           	opt stack 0
  3424                           tblptru	equ	0xFF8
  3425                           tblptrh	equ	0xFF7
  3426                           tblptrl	equ	0xFF6
  3427                           tablat	equ	0xFF5
  3428                           prodh	equ	0xFF4
  3429                           prodl	equ	0xFF3
  3430                           intcon	equ	0xFF2
  3431                           intcon3	equ	0xFF0
  3432                           postinc0	equ	0xFEE
  3433                           wreg	equ	0xFE8
  3434                           postdec1	equ	0xFE5
  3435                           plusw1	equ	0xFE3
  3436                           fsr1l	equ	0xFE1
  3437                           indf2	equ	0xFDF
  3438                           postinc2	equ	0xFDE
  3439                           postdec2	equ	0xFDD
  3440                           plusw2	equ	0xFDB
  3441                           fsr2h	equ	0xFDA
  3442                           fsr2l	equ	0xFD9
  3443                           status	equ	0xFD8
  3444                           
  3445 ;; *************** function _I2C_Master_Write *****************
  3446 ;; Defined at:
  3447 ;;		line 108 in file "I2C.c"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  byteToWrite     2   20[COMRAM] unsigned int 
  3450 ;; Auto vars:     Size  Location     Type
  3451 ;;		None
  3452 ;; Return value:  Size  Location     Type
  3453 ;;                  1    wreg      void 
  3454 ;; Registers used:
  3455 ;;		wreg, status,2, status,0, cstack
  3456 ;; Tracked objects:
  3457 ;;		On entry : 0/0
  3458 ;;		On exit  : 0/0
  3459 ;;		Unchanged: 0/0
  3460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3461 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;Total ram usage:        2 bytes
  3466 ;; Hardware stack levels used:    1
  3467 ;; Hardware stack levels required when called:    2
  3468 ;; This function calls:
  3469 ;;		_I2C_Master_Wait
  3470 ;; This function is called by:
  3471 ;;		_main
  3472 ;;		_RTC_setTime
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text13
  3477  000C0C                     __ptext13:
  3478                           	opt stack 0
  3479  000C0C                     _I2C_Master_Write:
  3480                           	opt stack 28
  3481                           
  3482                           ;I2C.c: 116: I2C_Master_Wait();
  3483                           
  3484                           ;incstack = 0
  3485  000C0C  ECFD  F005         	call	_I2C_Master_Wait	;wreg free
  3486                           
  3487                           ;I2C.c: 117: SSPBUF = byteToWrite;
  3488  000C10  C015  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  3489  000C14  0012               	return		;funcret
  3490  000C16                     __end_of_I2C_Master_Write:
  3491                           	opt stack 0
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           tblptrl	equ	0xFF6
  3495                           tablat	equ	0xFF5
  3496                           prodh	equ	0xFF4
  3497                           prodl	equ	0xFF3
  3498                           intcon	equ	0xFF2
  3499                           intcon3	equ	0xFF0
  3500                           postinc0	equ	0xFEE
  3501                           wreg	equ	0xFE8
  3502                           postdec1	equ	0xFE5
  3503                           plusw1	equ	0xFE3
  3504                           fsr1l	equ	0xFE1
  3505                           indf2	equ	0xFDF
  3506                           postinc2	equ	0xFDE
  3507                           postdec2	equ	0xFDD
  3508                           plusw2	equ	0xFDB
  3509                           fsr2h	equ	0xFDA
  3510                           fsr2l	equ	0xFD9
  3511                           status	equ	0xFD8
  3512                           
  3513 ;; *************** function _I2C_Master_Stop *****************
  3514 ;; Defined at:
  3515 ;;		line 95 in file "I2C.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;		None
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;		None
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      void 
  3522 ;; Registers used:
  3523 ;;		wreg, status,2, status,0, cstack
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;Total ram usage:        0 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    2
  3536 ;; This function calls:
  3537 ;;		_I2C_Master_Wait
  3538 ;; This function is called by:
  3539 ;;		_main
  3540 ;;		_RTC_setTime
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           	psect	text14
  3545  000C16                     __ptext14:
  3546                           	opt stack 0
  3547  000C16                     _I2C_Master_Stop:
  3548                           	opt stack 28
  3549                           
  3550                           ;I2C.c: 104: I2C_Master_Wait();
  3551                           
  3552                           ;incstack = 0
  3553  000C16  ECFD  F005         	call	_I2C_Master_Wait	;wreg free
  3554                           
  3555                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  3556  000C1A  84C5               	bsf	4037,2,c	;volatile
  3557  000C1C  0012               	return		;funcret
  3558  000C1E                     __end_of_I2C_Master_Stop:
  3559                           	opt stack 0
  3560                           tblptru	equ	0xFF8
  3561                           tblptrh	equ	0xFF7
  3562                           tblptrl	equ	0xFF6
  3563                           tablat	equ	0xFF5
  3564                           prodh	equ	0xFF4
  3565                           prodl	equ	0xFF3
  3566                           intcon	equ	0xFF2
  3567                           intcon3	equ	0xFF0
  3568                           postinc0	equ	0xFEE
  3569                           wreg	equ	0xFE8
  3570                           postdec1	equ	0xFE5
  3571                           plusw1	equ	0xFE3
  3572                           fsr1l	equ	0xFE1
  3573                           indf2	equ	0xFDF
  3574                           postinc2	equ	0xFDE
  3575                           postdec2	equ	0xFDD
  3576                           plusw2	equ	0xFDB
  3577                           fsr2h	equ	0xFDA
  3578                           fsr2l	equ	0xFD9
  3579                           status	equ	0xFD8
  3580                           
  3581 ;; *************** function _I2C_Master_Start *****************
  3582 ;; Defined at:
  3583 ;;		line 69 in file "I2C.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;		None
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;		None
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  1    wreg      void 
  3590 ;; Registers used:
  3591 ;;		wreg, status,2, status,0, cstack
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3601 ;;Total ram usage:        0 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    2
  3604 ;; This function calls:
  3605 ;;		_I2C_Master_Wait
  3606 ;; This function is called by:
  3607 ;;		_main
  3608 ;;		_RTC_setTime
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           	psect	text15
  3613  000C1E                     __ptext15:
  3614                           	opt stack 0
  3615  000C1E                     _I2C_Master_Start:
  3616                           	opt stack 28
  3617                           
  3618                           ;I2C.c: 78: I2C_Master_Wait();
  3619                           
  3620                           ;incstack = 0
  3621  000C1E  ECFD  F005         	call	_I2C_Master_Wait	;wreg free
  3622                           
  3623                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  3624  000C22  80C5               	bsf	4037,0,c	;volatile
  3625  000C24  0012               	return		;funcret
  3626  000C26                     __end_of_I2C_Master_Start:
  3627                           	opt stack 0
  3628                           tblptru	equ	0xFF8
  3629                           tblptrh	equ	0xFF7
  3630                           tblptrl	equ	0xFF6
  3631                           tablat	equ	0xFF5
  3632                           prodh	equ	0xFF4
  3633                           prodl	equ	0xFF3
  3634                           intcon	equ	0xFF2
  3635                           intcon3	equ	0xFF0
  3636                           postinc0	equ	0xFEE
  3637                           wreg	equ	0xFE8
  3638                           postdec1	equ	0xFE5
  3639                           plusw1	equ	0xFE3
  3640                           fsr1l	equ	0xFE1
  3641                           indf2	equ	0xFDF
  3642                           postinc2	equ	0xFDE
  3643                           postdec2	equ	0xFDD
  3644                           plusw2	equ	0xFDB
  3645                           fsr2h	equ	0xFDA
  3646                           fsr2l	equ	0xFD9
  3647                           status	equ	0xFD8
  3648                           
  3649 ;; *************** function _I2C_Master_Read *****************
  3650 ;; Defined at:
  3651 ;;		line 120 in file "I2C.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  ackBit          1    wreg     unsigned char 
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;  ackBit          1   20[COMRAM] unsigned char 
  3656 ;;  receivedByte    1   21[COMRAM] unsigned char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  1    wreg      unsigned char 
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, status,0, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;Total ram usage:        2 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    2
  3673 ;; This function calls:
  3674 ;;		_I2C_Master_Wait
  3675 ;; This function is called by:
  3676 ;;		_main
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           	psect	text16
  3681  000B74                     __ptext16:
  3682                           	opt stack 0
  3683  000B74                     _I2C_Master_Read:
  3684                           	opt stack 28
  3685                           
  3686                           ;incstack = 0
  3687                           ;I2C_Master_Read@ackBit stored from wreg
  3688  000B74  6E15               	movwf	I2C_Master_Read@ackBit,c
  3689                           
  3690                           ;I2C.c: 130: unsigned char receivedByte;
  3691                           ;I2C.c: 132: I2C_Master_Wait();
  3692  000B76  ECFD  F005         	call	_I2C_Master_Wait	;wreg free
  3693                           
  3694                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  3695  000B7A  86C5               	bsf	4037,3,c	;volatile
  3696                           
  3697                           ;I2C.c: 135: I2C_Master_Wait();
  3698  000B7C  ECFD  F005         	call	_I2C_Master_Wait	;wreg free
  3699                           
  3700                           ;I2C.c: 136: receivedByte = SSPBUF;
  3701  000B80  CFC9 F016          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  3702                           
  3703                           ;I2C.c: 138: I2C_Master_Wait();
  3704  000B84  ECFD  F005         	call	_I2C_Master_Wait	;wreg free
  3705                           
  3706                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  3707  000B88  B015               	btfsc	I2C_Master_Read@ackBit,0,c
  3708  000B8A  D002               	bra	u305
  3709  000B8C  9AC5               	bcf	4037,5,c	;volatile
  3710  000B8E  D001               	bra	u306
  3711  000B90                     u305:
  3712  000B90  8AC5               	bsf	4037,5,c	;volatile
  3713  000B92                     u306:
  3714                           
  3715                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  3716  000B92  88C5               	bsf	4037,4,c	;volatile
  3717                           
  3718                           ;I2C.c: 142: return receivedByte;
  3719  000B94  5016               	movf	I2C_Master_Read@receivedByte,w,c
  3720  000B96  0012               	return	
  3721  000B98                     __end_of_I2C_Master_Read:
  3722                           	opt stack 0
  3723                           tblptru	equ	0xFF8
  3724                           tblptrh	equ	0xFF7
  3725                           tblptrl	equ	0xFF6
  3726                           tablat	equ	0xFF5
  3727                           prodh	equ	0xFF4
  3728                           prodl	equ	0xFF3
  3729                           intcon	equ	0xFF2
  3730                           intcon3	equ	0xFF0
  3731                           postinc0	equ	0xFEE
  3732                           wreg	equ	0xFE8
  3733                           postdec1	equ	0xFE5
  3734                           plusw1	equ	0xFE3
  3735                           fsr1l	equ	0xFE1
  3736                           indf2	equ	0xFDF
  3737                           postinc2	equ	0xFDE
  3738                           postdec2	equ	0xFDD
  3739                           plusw2	equ	0xFDB
  3740                           fsr2h	equ	0xFDA
  3741                           fsr2l	equ	0xFD9
  3742                           status	equ	0xFD8
  3743                           
  3744 ;; *************** function _I2C_Master_Wait *****************
  3745 ;; Defined at:
  3746 ;;		line 51 in file "I2C.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;		None
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;		None
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  1    wreg      void 
  3753 ;; Registers used:
  3754 ;;		wreg, status,2, status,0
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3762 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;Total ram usage:        1 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; Hardware stack levels required when called:    1
  3767 ;; This function calls:
  3768 ;;		Nothing
  3769 ;; This function is called by:
  3770 ;;		_I2C_Master_Start
  3771 ;;		_I2C_Master_Stop
  3772 ;;		_I2C_Master_Write
  3773 ;;		_I2C_Master_Read
  3774 ;;		_I2C_Master_RepeatedStart
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           	psect	text17
  3779  000BFA                     __ptext17:
  3780                           	opt stack 0
  3781  000BFA                     _I2C_Master_Wait:
  3782                           	opt stack 28
  3783                           
  3784                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3785                           
  3786                           ;incstack = 0
  3787  000BFA  B4C7               	btfsc	4039,2,c	;volatile
  3788  000BFC  D7FE               	goto	_I2C_Master_Wait
  3789  000BFE  CFC5 F014          	movff	4037,??_I2C_Master_Wait	;volatile
  3790  000C02  0E1F               	movlw	31
  3791  000C04  1614               	andwf	??_I2C_Master_Wait,f,c
  3792  000C06  B4D8               	btfsc	status,2,c
  3793  000C08  0012               	return	
  3794  000C0A  D7F7               	goto	_I2C_Master_Wait
  3795  000C0C                     __end_of_I2C_Master_Wait:
  3796                           	opt stack 0
  3797                           tblptru	equ	0xFF8
  3798                           tblptrh	equ	0xFF7
  3799                           tblptrl	equ	0xFF6
  3800                           tablat	equ	0xFF5
  3801                           prodh	equ	0xFF4
  3802                           prodl	equ	0xFF3
  3803                           intcon	equ	0xFF2
  3804                           intcon3	equ	0xFF0
  3805                           postinc0	equ	0xFEE
  3806                           wreg	equ	0xFE8
  3807                           postdec1	equ	0xFE5
  3808                           plusw1	equ	0xFE3
  3809                           fsr1l	equ	0xFE1
  3810                           indf2	equ	0xFDF
  3811                           postinc2	equ	0xFDE
  3812                           postdec2	equ	0xFDD
  3813                           plusw2	equ	0xFDB
  3814                           fsr2h	equ	0xFDA
  3815                           fsr2l	equ	0xFD9
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _I2C_Master_Init *****************
  3819 ;; Defined at:
  3820 ;;		line 14 in file "I2C.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  clockFreq       4   32[COMRAM] const unsigned long 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;		None
  3825 ;; Return value:  Size  Location     Type
  3826 ;;                  1    wreg      void 
  3827 ;; Registers used:
  3828 ;;		wreg, status,2, status,0, cstack
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3834 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;Total ram usage:        8 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    2
  3841 ;; This function calls:
  3842 ;;		___lldiv
  3843 ;; This function is called by:
  3844 ;;		_main
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text18
  3849  000A1A                     __ptext18:
  3850                           	opt stack 0
  3851  000A1A                     _I2C_Master_Init:
  3852                           	opt stack 28
  3853                           
  3854                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  3855                           
  3856                           ;incstack = 0
  3857  000A1A  9AC6               	bcf	4038,5,c	;volatile
  3858                           
  3859                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  3860  000A1C  8694               	bsf	3988,3,c	;volatile
  3861                           
  3862                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  3863  000A1E  8894               	bsf	3988,4,c	;volatile
  3864                           
  3865                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  3866  000A20  0E80               	movlw	128
  3867  000A22  6EC7               	movwf	4039,c	;volatile
  3868                           
  3869                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  3870  000A24  0E28               	movlw	40
  3871  000A26  6EC6               	movwf	4038,c	;volatile
  3872                           
  3873                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  3874  000A28  0E00               	movlw	0
  3875  000A2A  6EC5               	movwf	4037,c	;volatile
  3876                           
  3877                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  3878  000A2C  0E00               	movlw	0
  3879  000A2E  6E14               	movwf	___lldiv@dividend,c
  3880  000A30  0E5A               	movlw	90
  3881  000A32  6E15               	movwf	___lldiv@dividend+1,c
  3882  000A34  0E62               	movlw	98
  3883  000A36  6E16               	movwf	___lldiv@dividend+2,c
  3884  000A38  0E02               	movlw	2
  3885  000A3A  6E17               	movwf	___lldiv@dividend+3,c
  3886  000A3C  C021  F025         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  3887  000A40  C022  F026         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  3888  000A44  C023  F027         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  3889  000A48  C024  F028         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  3890  000A4C  0E02               	movlw	2
  3891  000A4E                     u995:
  3892  000A4E  90D8               	bcf	status,0,c
  3893  000A50  3625               	rlcf	??_I2C_Master_Init,f,c
  3894  000A52  3626               	rlcf	??_I2C_Master_Init+1,f,c
  3895  000A54  3627               	rlcf	??_I2C_Master_Init+2,f,c
  3896  000A56  3628               	rlcf	??_I2C_Master_Init+3,f,c
  3897  000A58  2EE8               	decfsz	wreg,f,c
  3898  000A5A  D7F9               	goto	u995
  3899  000A5C  C025  F018         	movff	??_I2C_Master_Init,___lldiv@divisor
  3900  000A60  C026  F019         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3901  000A64  C027  F01A         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3902  000A68  C028  F01B         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3903  000A6C  EC55  F004         	call	___lldiv	;wreg free
  3904  000A70  0414               	decf	?___lldiv,w,c
  3905  000A72  6EC8               	movwf	4040,c	;volatile
  3906  000A74  0012               	return		;funcret
  3907  000A76                     __end_of_I2C_Master_Init:
  3908                           	opt stack 0
  3909                           tblptru	equ	0xFF8
  3910                           tblptrh	equ	0xFF7
  3911                           tblptrl	equ	0xFF6
  3912                           tablat	equ	0xFF5
  3913                           prodh	equ	0xFF4
  3914                           prodl	equ	0xFF3
  3915                           intcon	equ	0xFF2
  3916                           intcon3	equ	0xFF0
  3917                           postinc0	equ	0xFEE
  3918                           wreg	equ	0xFE8
  3919                           postdec1	equ	0xFE5
  3920                           plusw1	equ	0xFE3
  3921                           fsr1l	equ	0xFE1
  3922                           indf2	equ	0xFDF
  3923                           postinc2	equ	0xFDE
  3924                           postdec2	equ	0xFDD
  3925                           plusw2	equ	0xFDB
  3926                           fsr2h	equ	0xFDA
  3927                           fsr2l	equ	0xFD9
  3928                           status	equ	0xFD8
  3929                           
  3930 ;; *************** function ___lldiv *****************
  3931 ;; Defined at:
  3932 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3933 ;; Parameters:    Size  Location     Type
  3934 ;;  dividend        4   19[COMRAM] unsigned long 
  3935 ;;  divisor         4   23[COMRAM] unsigned long 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  quotient        4   27[COMRAM] unsigned long 
  3938 ;;  counter         1   31[COMRAM] unsigned char 
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  4   19[COMRAM] unsigned long 
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, status,0
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3948 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3951 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3952 ;;Total ram usage:       13 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    1
  3955 ;; This function calls:
  3956 ;;		Nothing
  3957 ;; This function is called by:
  3958 ;;		_I2C_Master_Init
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text19
  3963  0008AA                     __ptext19:
  3964                           	opt stack 0
  3965  0008AA                     ___lldiv:
  3966                           	opt stack 28
  3967                           
  3968                           ;incstack = 0
  3969  0008AA  0E00               	movlw	0
  3970  0008AC  6E1C               	movwf	___lldiv@quotient,c
  3971  0008AE  0E00               	movlw	0
  3972  0008B0  6E1D               	movwf	___lldiv@quotient+1,c
  3973  0008B2  0E00               	movlw	0
  3974  0008B4  6E1E               	movwf	___lldiv@quotient+2,c
  3975  0008B6  0E00               	movlw	0
  3976  0008B8  6E1F               	movwf	___lldiv@quotient+3,c
  3977  0008BA  5018               	movf	___lldiv@divisor,w,c
  3978  0008BC  1019               	iorwf	___lldiv@divisor+1,w,c
  3979  0008BE  101A               	iorwf	___lldiv@divisor+2,w,c
  3980  0008C0  101B               	iorwf	___lldiv@divisor+3,w,c
  3981  0008C2  B4D8               	btfsc	status,2,c
  3982  0008C4  D02A               	goto	l712
  3983  0008C6  0E01               	movlw	1
  3984  0008C8  6E20               	movwf	___lldiv@counter,c
  3985  0008CA  D006               	goto	l707
  3986  0008CC  90D8               	bcf	status,0,c
  3987  0008CE  3618               	rlcf	___lldiv@divisor,f,c
  3988  0008D0  3619               	rlcf	___lldiv@divisor+1,f,c
  3989  0008D2  361A               	rlcf	___lldiv@divisor+2,f,c
  3990  0008D4  361B               	rlcf	___lldiv@divisor+3,f,c
  3991  0008D6  2A20               	incf	___lldiv@counter,f,c
  3992  0008D8                     l707:
  3993  0008D8  AE1B               	btfss	___lldiv@divisor+3,7,c
  3994  0008DA  D7F8               	goto	l708
  3995  0008DC                     u970:
  3996  0008DC  90D8               	bcf	status,0,c
  3997  0008DE  361C               	rlcf	___lldiv@quotient,f,c
  3998  0008E0  361D               	rlcf	___lldiv@quotient+1,f,c
  3999  0008E2  361E               	rlcf	___lldiv@quotient+2,f,c
  4000  0008E4  361F               	rlcf	___lldiv@quotient+3,f,c
  4001  0008E6  5018               	movf	___lldiv@divisor,w,c
  4002  0008E8  5C14               	subwf	___lldiv@dividend,w,c
  4003  0008EA  5019               	movf	___lldiv@divisor+1,w,c
  4004  0008EC  5815               	subwfb	___lldiv@dividend+1,w,c
  4005  0008EE  501A               	movf	___lldiv@divisor+2,w,c
  4006  0008F0  5816               	subwfb	___lldiv@dividend+2,w,c
  4007  0008F2  501B               	movf	___lldiv@divisor+3,w,c
  4008  0008F4  5817               	subwfb	___lldiv@dividend+3,w,c
  4009  0008F6  A0D8               	btfss	status,0,c
  4010  0008F8  D009               	goto	l711
  4011  0008FA  5018               	movf	___lldiv@divisor,w,c
  4012  0008FC  5E14               	subwf	___lldiv@dividend,f,c
  4013  0008FE  5019               	movf	___lldiv@divisor+1,w,c
  4014  000900  5A15               	subwfb	___lldiv@dividend+1,f,c
  4015  000902  501A               	movf	___lldiv@divisor+2,w,c
  4016  000904  5A16               	subwfb	___lldiv@dividend+2,f,c
  4017  000906  501B               	movf	___lldiv@divisor+3,w,c
  4018  000908  5A17               	subwfb	___lldiv@dividend+3,f,c
  4019  00090A  801C               	bsf	___lldiv@quotient,0,c
  4020  00090C                     l711:
  4021  00090C  90D8               	bcf	status,0,c
  4022  00090E  321B               	rrcf	___lldiv@divisor+3,f,c
  4023  000910  321A               	rrcf	___lldiv@divisor+2,f,c
  4024  000912  3219               	rrcf	___lldiv@divisor+1,f,c
  4025  000914  3218               	rrcf	___lldiv@divisor,f,c
  4026  000916  2E20               	decfsz	___lldiv@counter,f,c
  4027  000918  D7E1               	goto	u970
  4028  00091A                     l712:
  4029  00091A  C01C  F014         	movff	___lldiv@quotient,?___lldiv
  4030  00091E  C01D  F015         	movff	___lldiv@quotient+1,?___lldiv+1
  4031  000922  C01E  F016         	movff	___lldiv@quotient+2,?___lldiv+2
  4032  000926  C01F  F017         	movff	___lldiv@quotient+3,?___lldiv+3
  4033  00092A  0012               	return		;funcret
  4034  00092C                     __end_of___lldiv:
  4035                           	opt stack 0
  4036                           tblptru	equ	0xFF8
  4037                           tblptrh	equ	0xFF7
  4038                           tblptrl	equ	0xFF6
  4039                           tablat	equ	0xFF5
  4040                           prodh	equ	0xFF4
  4041                           prodl	equ	0xFF3
  4042                           intcon	equ	0xFF2
  4043                           intcon3	equ	0xFF0
  4044                           postinc0	equ	0xFEE
  4045                           wreg	equ	0xFE8
  4046                           postdec1	equ	0xFE5
  4047                           plusw1	equ	0xFE3
  4048                           fsr1l	equ	0xFE1
  4049                           indf2	equ	0xFDF
  4050                           postinc2	equ	0xFDE
  4051                           postdec2	equ	0xFDD
  4052                           plusw2	equ	0xFDB
  4053                           fsr2h	equ	0xFDA
  4054                           fsr2l	equ	0xFD9
  4055                           status	equ	0xFD8
  4056                           
  4057 ;; *************** function _interruptHandler *****************
  4058 ;; Defined at:
  4059 ;;		line 356 in file "main.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  keypress        1   18[COMRAM] unsigned char 
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      void 
  4066 ;; Registers used:
  4067 ;;		wreg, status,2, status,0
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;Total ram usage:       19 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		Interrupt level 2
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	intcode
  4087  000008                     __pintcode:
  4088                           	opt stack 0
  4089  000008                     _interruptHandler:
  4090                           	opt stack 25
  4091                           
  4092                           ;incstack = 0
  4093  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4094  00000A  EDF2  F003         	call	int_func,f	;refresh shadow registers
  4095                           tblptru	equ	0xFF8
  4096                           tblptrh	equ	0xFF7
  4097                           tblptrl	equ	0xFF6
  4098                           tablat	equ	0xFF5
  4099                           prodh	equ	0xFF4
  4100                           prodl	equ	0xFF3
  4101                           intcon	equ	0xFF2
  4102                           intcon3	equ	0xFF0
  4103                           postinc0	equ	0xFEE
  4104                           wreg	equ	0xFE8
  4105                           postdec1	equ	0xFE5
  4106                           plusw1	equ	0xFE3
  4107                           fsr1l	equ	0xFE1
  4108                           indf2	equ	0xFDF
  4109                           postinc2	equ	0xFDE
  4110                           postdec2	equ	0xFDD
  4111                           plusw2	equ	0xFDB
  4112                           fsr2h	equ	0xFDA
  4113                           fsr2l	equ	0xFD9
  4114                           status	equ	0xFD8
  4115                           
  4116                           	psect	intcode_body
  4117  0007E4                     __pintcode_body:
  4118                           	opt stack 25
  4119  0007E4                     int_func:
  4120                           	opt stack 25
  4121  0007E4  0006               	pop		; remove dummy address from shadow register refresh
  4122  0007E6  CFFA F001          	movff	pclath,??_interruptHandler
  4123  0007EA  CFFB F002          	movff	pclatu,??_interruptHandler+1
  4124  0007EE  CFE9 F003          	movff	fsr0l,??_interruptHandler+2
  4125  0007F2  CFEA F004          	movff	fsr0h,??_interruptHandler+3
  4126  0007F6  CFE1 F005          	movff	fsr1l,??_interruptHandler+4
  4127  0007FA  CFE2 F006          	movff	fsr1h,??_interruptHandler+5
  4128  0007FE  CFD9 F007          	movff	fsr2l,??_interruptHandler+6
  4129  000802  CFDA F008          	movff	fsr2h,??_interruptHandler+7
  4130  000806  CFF3 F009          	movff	prodl,??_interruptHandler+8
  4131  00080A  CFF4 F00A          	movff	prodh,??_interruptHandler+9
  4132  00080E  CFF6 F00B          	movff	tblptrl,??_interruptHandler+10
  4133  000812  CFF7 F00C          	movff	tblptrh,??_interruptHandler+11
  4134  000816  CFF8 F00D          	movff	tblptru,??_interruptHandler+12
  4135  00081A  CFF5 F00E          	movff	tablat,??_interruptHandler+13
  4136  00081E  C05D  F00F         	movff	btemp,??_interruptHandler+14
  4137  000822  C05E  F010         	movff	btemp+1,??_interruptHandler+15
  4138  000826  C05F  F011         	movff	btemp+2,??_interruptHandler+16
  4139  00082A  C060  F012         	movff	btemp+3,??_interruptHandler+17
  4140                           
  4141                           ;main.c: 358: if (INT1IF) {
  4142  00082E  A0F0               	btfss	intcon3,0,c	;volatile
  4143  000830  D016               	goto	i2l262
  4144                           
  4145                           ;main.c: 361: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4146  000832  3881               	swapf	3969,w,c	;volatile
  4147  000834  0B0F               	andlw	15
  4148  000836  0B0F               	andlw	15
  4149  000838  6E13               	movwf	interruptHandler@keypress,c
  4150                           
  4151                           ;main.c: 363: if (keypress == 12) {
  4152  00083A  0E0C               	movlw	12
  4153  00083C  1813               	xorwf	interruptHandler@keypress,w,c
  4154  00083E  A4D8               	btfss	status,2,c
  4155  000840  D005               	goto	i2l259
  4156                           
  4157                           ;main.c: 364: begin_operation = 1;
  4158  000842  0E00               	movlw	0
  4159  000844  6E54               	movwf	_begin_operation+1,c
  4160  000846  0E01               	movlw	1
  4161  000848  6E53               	movwf	_begin_operation,c
  4162  00084A  D008               	goto	i2l1578
  4163  00084C                     i2l259:
  4164                           
  4165                           ;main.c: 367: else if (keypress == 14) {
  4166  00084C  0E0E               	movlw	14
  4167  00084E  1813               	xorwf	interruptHandler@keypress,w,c
  4168  000850  A4D8               	btfss	status,2,c
  4169  000852  D004               	goto	i2l1578
  4170                           
  4171                           ;main.c: 368: begin_logging = 1;
  4172  000854  0E00               	movlw	0
  4173  000856  6E52               	movwf	_begin_logging+1,c
  4174  000858  0E01               	movlw	1
  4175  00085A  6E51               	movwf	_begin_logging,c
  4176  00085C                     i2l1578:
  4177                           
  4178                           ;main.c: 371: else {
  4179                           ;main.c: 372: INT1IF = 0;
  4180                           
  4181                           ;main.c: 370: }
  4182                           
  4183                           ;main.c: 369: INT1IF = 0;
  4184  00085C  90F0               	bcf	intcon3,0,c	;volatile
  4185  00085E                     i2l262:
  4186  00085E  C012  F060         	movff	??_interruptHandler+17,btemp+3
  4187  000862  C011  F05F         	movff	??_interruptHandler+16,btemp+2
  4188  000866  C010  F05E         	movff	??_interruptHandler+15,btemp+1
  4189  00086A  C00F  F05D         	movff	??_interruptHandler+14,btemp
  4190  00086E  C00E  FFF5         	movff	??_interruptHandler+13,tablat
  4191  000872  C00D  FFF8         	movff	??_interruptHandler+12,tblptru
  4192  000876  C00C  FFF7         	movff	??_interruptHandler+11,tblptrh
  4193  00087A  C00B  FFF6         	movff	??_interruptHandler+10,tblptrl
  4194  00087E  C00A  FFF4         	movff	??_interruptHandler+9,prodh
  4195  000882  C009  FFF3         	movff	??_interruptHandler+8,prodl
  4196  000886  C008  FFDA         	movff	??_interruptHandler+7,fsr2h
  4197  00088A  C007  FFD9         	movff	??_interruptHandler+6,fsr2l
  4198  00088E  C006  FFE2         	movff	??_interruptHandler+5,fsr1h
  4199  000892  C005  FFE1         	movff	??_interruptHandler+4,fsr1l
  4200  000896  C004  FFEA         	movff	??_interruptHandler+3,fsr0h
  4201  00089A  C003  FFE9         	movff	??_interruptHandler+2,fsr0l
  4202  00089E  C002  FFFB         	movff	??_interruptHandler+1,pclatu
  4203  0008A2  C001  FFFA         	movff	??_interruptHandler,pclath
  4204  0008A6  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4205  0008A8  0011               	retfie		f
  4206  0008AA                     __end_of_interruptHandler:
  4207                           	opt stack 0
  4208                           pclatu	equ	0xFFB
  4209                           pclath	equ	0xFFA
  4210                           tblptru	equ	0xFF8
  4211                           tblptrh	equ	0xFF7
  4212                           tblptrl	equ	0xFF6
  4213                           tablat	equ	0xFF5
  4214                           prodh	equ	0xFF4
  4215                           prodl	equ	0xFF3
  4216                           intcon	equ	0xFF2
  4217                           intcon3	equ	0xFF0
  4218                           postinc0	equ	0xFEE
  4219                           fsr0h	equ	0xFEA
  4220                           fsr0l	equ	0xFE9
  4221                           wreg	equ	0xFE8
  4222                           postdec1	equ	0xFE5
  4223                           plusw1	equ	0xFE3
  4224                           fsr1h	equ	0xFE2
  4225                           fsr1l	equ	0xFE1
  4226                           indf2	equ	0xFDF
  4227                           postinc2	equ	0xFDE
  4228                           postdec2	equ	0xFDD
  4229                           plusw2	equ	0xFDB
  4230                           fsr2h	equ	0xFDA
  4231                           fsr2l	equ	0xFD9
  4232                           status	equ	0xFD8
  4233                           pclatu	equ	0xFFB
  4234                           pclath	equ	0xFFA
  4235                           tblptru	equ	0xFF8
  4236                           tblptrh	equ	0xFF7
  4237                           tblptrl	equ	0xFF6
  4238                           tablat	equ	0xFF5
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           intcon	equ	0xFF2
  4242                           intcon3	equ	0xFF0
  4243                           postinc0	equ	0xFEE
  4244                           fsr0h	equ	0xFEA
  4245                           fsr0l	equ	0xFE9
  4246                           wreg	equ	0xFE8
  4247                           postdec1	equ	0xFE5
  4248                           plusw1	equ	0xFE3
  4249                           fsr1h	equ	0xFE2
  4250                           fsr1l	equ	0xFE1
  4251                           indf2	equ	0xFDF
  4252                           postinc2	equ	0xFDE
  4253                           postdec2	equ	0xFDD
  4254                           plusw2	equ	0xFDB
  4255                           fsr2h	equ	0xFDA
  4256                           fsr2l	equ	0xFD9
  4257                           status	equ	0xFD8
  4258                           
  4259                           	psect	rparam
  4260  0000                     pclatu	equ	0xFFB
  4261                           pclath	equ	0xFFA
  4262                           tblptru	equ	0xFF8
  4263                           tblptrh	equ	0xFF7
  4264                           tblptrl	equ	0xFF6
  4265                           tablat	equ	0xFF5
  4266                           prodh	equ	0xFF4
  4267                           prodl	equ	0xFF3
  4268                           intcon	equ	0xFF2
  4269                           intcon3	equ	0xFF0
  4270                           postinc0	equ	0xFEE
  4271                           fsr0h	equ	0xFEA
  4272                           fsr0l	equ	0xFE9
  4273                           wreg	equ	0xFE8
  4274                           postdec1	equ	0xFE5
  4275                           plusw1	equ	0xFE3
  4276                           fsr1h	equ	0xFE2
  4277                           fsr1l	equ	0xFE1
  4278                           indf2	equ	0xFDF
  4279                           postinc2	equ	0xFDE
  4280                           postdec2	equ	0xFDD
  4281                           plusw2	equ	0xFDB
  4282                           fsr2h	equ	0xFDA
  4283                           fsr2l	equ	0xFD9
  4284                           status	equ	0xFD8
  4285                           
  4286                           	psect	temp
  4287  00005D                     btemp:
  4288                           	opt stack 0
  4289  00005D                     	ds	1
  4290  0000                     int$flags	set	btemp
  4291  0000                     wtemp6	set	btemp+1
  4292                           pclatu	equ	0xFFB
  4293                           pclath	equ	0xFFA
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           intcon	equ	0xFF2
  4301                           intcon3	equ	0xFF0
  4302                           postinc0	equ	0xFEE
  4303                           fsr0h	equ	0xFEA
  4304                           fsr0l	equ	0xFE9
  4305                           wreg	equ	0xFE8
  4306                           postdec1	equ	0xFE5
  4307                           plusw1	equ	0xFE3
  4308                           fsr1h	equ	0xFE2
  4309                           fsr1l	equ	0xFE1
  4310                           indf2	equ	0xFDF
  4311                           postinc2	equ	0xFDE
  4312                           postdec2	equ	0xFDD
  4313                           plusw2	equ	0xFDB
  4314                           fsr2h	equ	0xFDA
  4315                           fsr2l	equ	0xFD9
  4316                           status	equ	0xFD8


Data Sizes:
    Strings     297
    Constant    38
    Data        6
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     78      92
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_16(CODE[21]), STR_15(CODE[13]), STR_14(CODE[11]), STR_13(CODE[14]), 
		 -> STR_12(CODE[21]), STR_11(CODE[21]), STR_10(CODE[8]), STR_9(CODE[8]), 
		 -> STR_8(CODE[8]), STR_7(CODE[17]), STR_6(CODE[21]), STR_5(CODE[21]), 
		 -> STR_4(CODE[21]), STR_3(CODE[21]), STR_2(CODE[21]), STR_1(CODE[33]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_operation
    _operation->_printf
    _printf->___lwdiv
    _putch->_lcdNibble
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    8862
                                             68 COMRAM    10    10      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                            _logging
                          _operation
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                           14    14      0    4874
                                             54 COMRAM    14    14      0
                            _lcdInst
                     _lcd_set_cursor
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    2635
                                             26 COMRAM    28    14     14
                            ___lwdiv
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                             21 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_set_cursor                                       3     2      1    1074
                                             25 COMRAM     3     2      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (3) _lcd_shift_cursor                                     3     2      1     256
                                             22 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _logging                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             22 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0      90
                                             21 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     478
                                             20 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                             20 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             32 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                             19 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interruptHandler                                    19    19      0      30
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _logging
   _operation
     _lcdInst
       _lcdNibble
     _lcd_set_cursor
       _lcdInst
         _lcdNibble
       _lcd_shift_cursor
         _lcdInst
           _lcdNibble
     _printf
       ___lwdiv
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _putch
       _lcdNibble
   _printf
     ___lwdiv
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     4E      5C       1       73.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5C      34        0.0%
DATA                 0      0      5C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Feb 04 19:14:58 2018

         operation@frequency 003A                           l41 09F4                           l42 09C4  
                         l43 0A0E                           l44 09DC                           l45 09E4  
                         l46 09EC                           u15 0966                           u16 0968  
                         u25 09A6                           u26 09A8                  __CFG_CPD$ON 000000  
        ___wmul@multiplicand 0016                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l210 0264                          l203 0258                          l212 02E8  
                        l220 02C2                          l230 03FA                          l215 02CC  
                        l320 04A8                          l216 02AA                          l321 04A2  
                        l218 02B2                          l170 0138                          l154 07B2  
                        l235 0406                          l227 0376                          l219 02BA  
                        l172 01A6                          l164 00A2                          l156 07CA  
                        l148 06B6                          l317 0484                          l237 045C  
                        l165 012C                          l149 06F2                          l326 04D6  
                        l318 0494                          l190 01CE                          l183 01C2  
                        l175 0190                          l328 0532                          l192 023C  
                        l176 0176                          l337 05BE                          l338 05C6  
                        l178 017E                          l347 064C                          l339 05E0  
                        l195 0226                          l179 0186                          l348 0602  
                        l196 020C                          l198 0214                          l711 090C  
                        l199 021C                          l712 091A                          l707 08D8  
                        l708 08CC                          l760 0A94                          l761 0A8C  
                        l681 0BAE                          l764 0AB4                          l765 0ABE  
               __CFG_CPB$OFF 000000                          u305 0B90                          u306 0B92  
                        u800 0A98                          u920 05E8                          u930 05FC  
                        u940 0654                          u870 059A                          u970 08DC  
                        u995 0A4E                          prod 000FF3                          wreg 000FE8  
            ?_lcd_set_cursor 001A                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l2006 06EA                         l1912 02FA                         l1586 0BBC  
                       l1692 056E                         l1918 031E                         STR_1 FED5  
                       STR_2 FF0B                         STR_3 FF4A                         STR_4 FF5F  
                       STR_5 FF74                         STR_6 FF35                         STR_7 FFAF  
                       STR_8 FFF6                         STR_9 FFE6                         u1001 001E  
                       u1200 0286                         u1120 01E8                         u1050 0152  
                       u1300 046E                         u1140 024E                         u1070 01B8  
                       u1320 070E                         _LATA 000F89                         _LATB 000F8A  
                       u1407 07A4                         _LATC 000F8B                         u1280 0420  
                       _LATD 000F8C                         u1417 003A                         _LATE 000F8D  
                       u1507 0BDE                         u1427 0050                         u1517 09B8  
                       u1437 0094                         u1527 09D0                         u1447 00AE  
                       u1537 0ACE                         u1457 00C4                         u1547 0B02  
                       u1467 0330                         u1557 0BF2                         u1477 0368  
                       u1397 073C                         u1567 094E                         u1487 0382  
                       u1577 0958                         u1497 0398                         u1587 098E  
                       u1597 0998                         _main 066E     __end_of_interruptHandler 08AA  
                       _keys FEAF                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 005D  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
           __end_of_LCD_LEFT FED0          operation@repetition 0039        I2C_Master_Read@ackBit 0015  
           ?_I2C_Master_Init 0021             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001                        STR_10 FFEE  
                      STR_11 FF20                        STR_12 FEF6                        STR_13 FFC0  
                      STR_14 FFDB                        STR_15 FFCE                        STR_16 FF89  
                      STR_17 FF9E              __end_of___lldiv 092C              __end_of___lwdiv 0AC8  
                      i2l262 085E                        i2l259 084C                        _PORTB 000F81  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 0BFA               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 0B14               __CFG_EBTRB$OFF 000000  
            __end_of_isdigit 0BB6              __end_of_logging 0C2E                        _putch 0BD2  
                      main@i 004E                        pclath 000FFA                        tablat 000FF5  
          _LCDinterruptState 0056                        plusw1 000FE3                        plusw2 000FDB  
                      status 000FD8  I2C_Master_Read@receivedByte 0016                        wtemp6 005E  
             __CFG_PBADEN$ON 000000              __initialization 0B14                 __end_of_main 07E4  
               __end_of_keys FEC0            ?_lcd_shift_cursor 0017               __CFG_OSC$HSPLL 000000  
          __end_of_LCD_RIGHT FED1                       ??_main 0045           ??_lcd_shift_cursor 0018  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0015  
         ??_I2C_Master_Start 0015                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0017                       ?_putch 0001        operation@keypress_390 003D  
      operation@keypress_382 003C        operation@keypress_383 003E                       _INT1IE 007F83  
                     _INT1IF 007F80                       i2l1578 085C                       _SSPADD 000FC8  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000                       ___wmul 0B4E  
             __CFG_STVREN$ON 000000                    ??___lldiv 001C             __end_of_currDate FECF  
                  ??___lwdiv 0018                       clear_0 0B3A                    ??_lcdInst 0016  
                     _printf 047A                    ??_initLCD 0017                 __pdataCOMRAM 0057  
                  ??_isdigit 0014                    ??_logging 0014                 __mediumconst FEAE  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                 __accesstop 0080      __end_of__initialization 0B40                ___rparam_used 000001  
             __pcstackCOMRAM 0001                __end_of_putch 0BE6             ??_lcd_set_cursor 001B  
         __size_of_lcdNibble 007E                      ??_putch 0016            ?_interruptHandler 0001  
         ??_interruptHandler 0001                      ?___wmul 0014                      ?_printf 001B  
         __size_of_operation 0468         lcd@LCDinterruptState 0055                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7            __end_of_lcdNibble 09AA  
                    __Hparam 0000        operation@prescription 003F                      __Lparam 0000  
                    ___lldiv 08AA              __size_of___wmul 0026                      ___lwdiv 0A76  
   interruptHandler@keypress 0013               operation@F3020 0057                      __pcinit 0B14  
                    __ramtop 1000                      _lcdInst 0BE6                      __ptext0 066E  
                    __ptext1 0012                      __ptext2 047A                      __ptext3 0BD2  
                    __ptext4 0B98                      __ptext5 0B4E                      __ptext6 0A76  
                    __ptext7 09AA                      __ptext8 0BB6                      __ptext9 0C2C  
            __size_of_printf 01F4                      _initLCD 0AC8            __end_of_hexpowers FEC8  
                    _isdigit 0B98                      _logging 0C2C                    _LCD_RIGHT FED0  
   __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Read 0024     __size_of_I2C_Master_Wait 0012  
   __size_of_I2C_Master_Stop 0008               __pintcode_body 07E4    __size_of_lcd_shift_cursor 001C  
       end_of_initialization 0B40                _begin_logging 0051        __end_of_LCD_SIZE_HORZ FED3  
      __end_of_LCD_SIZE_VERT FED2                __Lmediumconst FEAE                      int_func 07E4  
          __end_of_operation 047A    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0018              ___lldiv@counter 0020                      printf@c 0036  
                    printf@f 001B                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE                    _PORTBbits 000F81  
                  _TRISCbits 000F94            operation@keypress 003B                  printf@width 0034  
  lcd_shift_cursor@direction 0017               __end_of___wmul 0B74                __pidataCOMRAM 0C26  
             __end_of_printf 066E          start_initialization 0B14            ??_I2C_Master_Init 0025  
          ??_I2C_Master_Read 0015            ??_I2C_Master_Wait 0014            ??_I2C_Master_Stop 0015  
                   ??___wmul 0018     I2C_Master_Init@clockFreq 0021             __CFG_LPT1OSC$OFF 000000  
                   ??_printf 0029    __size_of_interruptHandler 08A2                  __pbssCOMRAM 004F  
           _lcd_shift_cursor 0BB6             _I2C_Master_Start 0C1E             _I2C_Master_Write 0C0C  
           ___lwdiv@dividend 0014            __CFG_CCP2MX$PORTC 000000                    __pintcode 0008  
              __pmediumconst FEAE                    _lcdNibble 092C                     ?___lldiv 0014  
                   ?___lwdiv 0014                     ?_lcdInst 0001                     ?_initLCD 0001  
                   ?_isdigit 0001                     ?_logging 0001                    _hexpowers FEC0  
           ___lwdiv@quotient 0018               __size_of_putch 0014                     _LCD_LEFT FECF  
    __size_of_lcd_set_cursor 0070               ___wmul@product 0018                     _LATDbits 000F8C  
            lcd_set_cursor@x 001C              lcd_set_cursor@y 001A                    _operation 0012  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001            ___wmul@multiplier 0014  
              lcdNibble@data 0015                   printf@flag 0030                lcdNibble@temp 0014  
                 printf@prec 0033               _LCD_HORZ_LIMIT FED4                    copy_data0 0B28  
                   __Hrparam 0000                   ?_operation 0001                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000              _begin_operation 0053             __size_of___lldiv 0082  
           __size_of___lwdiv 0052             _interruptHandler 0008                  _isdigit$773 0015  
           __size_of_lcdInst 0014              _I2C_Master_Init 0A1A              _I2C_Master_Read 0B74  
           __size_of_initLCD 004C              _I2C_Master_Wait 0BFA              _I2C_Master_Stop 0C16  
     __end_of_LCD_HORZ_LIMIT FED5             __size_of_isdigit 001E             __size_of_logging 0002  
            ___lwdiv@divisor 0016              ___lwdiv@counter 001A                     __ptext10 0AC8  
                   __ptext11 0BE6                     __ptext12 092C                     __ptext13 0C0C  
                   __ptext14 0C16                     __ptext15 0C1E                     __ptext16 0B74  
                   __ptext17 0BFA                     __ptext18 0A1A                     __ptext19 08AA  
             _LCD_VERT_LIMIT FED3                     _currDate FEC8                __size_of_main 0176  
                ??_lcdNibble 0014                     _num_runs 004F                     int$flags 005D  
   __end_of_lcd_shift_cursor 0BD2                    printf@idx 002F                    printf@val 0031  
                   main@time 0047  I2C_Master_Write@byteToWrite 0015            lcd_shift_cursor@n 0019  
                  putch@data 0016     __end_of_I2C_Master_Start 0C26     __end_of_I2C_Master_Write 0C16  
                 _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT FED4                     isdigit@c 0016  
                   intlevel2 0000               _lcd_set_cursor 09AA                _LCD_SIZE_HORZ FED2  
              _LCD_SIZE_VERT FED1             ___lldiv@dividend 0014                  ??_operation 0037  
                   printf@ap 002D      __end_of_I2C_Master_Init 0A76      __end_of_I2C_Master_Read 0B98  
    __end_of_I2C_Master_Wait 0C0C      __end_of_I2C_Master_Stop 0C1E                  lcdInst@data 0016  
           ___lldiv@quotient 001C                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
     __end_of_lcd_set_cursor 0A1A     lcd_shift_cursor@numChars 0018  
