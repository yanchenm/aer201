

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Feb 04 20:03:38 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 1.45
    40                           ; Generated 16/11/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataCOMRAM
    75  001046                     __pidataCOMRAM:
    76                           	opt stack 0
    77                           
    78                           ;initializer for operation@F3021
    79  001046  FFFF               	dw	65535
    80  001048  FFFF               	dw	65535
    81  00104A  FFFF               	dw	65535
    82                           
    83                           	psect	mediumconst
    84  00FDB0                     __pmediumconst:
    85                           	opt stack 0
    86  00FDB0  00                 	db	0
    87  00FDB1                     _keys:
    88                           	opt stack 0
    89  00FDB1  31                 	db	49
    90  00FDB2  32                 	db	50
    91  00FDB3  33                 	db	51
    92  00FDB4  41                 	db	65
    93  00FDB5  34                 	db	52
    94  00FDB6  35                 	db	53
    95  00FDB7  36                 	db	54
    96  00FDB8  42                 	db	66
    97  00FDB9  37                 	db	55
    98  00FDBA  38                 	db	56
    99  00FDBB  39                 	db	57
   100  00FDBC  43                 	db	67
   101  00FDBD  2A                 	db	42
   102  00FDBE  30                 	db	48
   103  00FDBF  23                 	db	35
   104  00FDC0  44                 	db	68
   105  00FDC1  00                 	db	0
   106  00FDC2                     __end_of_keys:
   107                           	opt stack 0
   108  00FDC2                     _dpowers:
   109                           	opt stack 0
   110  00FDC2  0001               	dw	1
   111  00FDC4  000A               	dw	10
   112  00FDC6  0064               	dw	100
   113  00FDC8  03E8               	dw	1000
   114  00FDCA  2710               	dw	10000
   115  00FDCC                     __end_of_dpowers:
   116                           	opt stack 0
   117  00FDCC                     _hexpowers:
   118                           	opt stack 0
   119  00FDCC  0001               	dw	1
   120  00FDCE  0010               	dw	16
   121  00FDD0  0100               	dw	256
   122  00FDD2  1000               	dw	4096
   123  00FDD4                     __end_of_hexpowers:
   124                           	opt stack 0
   125  00FDD4                     _currDate:
   126                           	opt stack 0
   127  00FDD4  00                 	db	0
   128  00FDD5  04                 	db	4
   129  00FDD6  20                 	db	32
   130  00FDD7  00                 	db	0
   131  00FDD8  04                 	db	4
   132  00FDD9  02                 	db	2
   133  00FDDA  18                 	db	24
   134  00FDDB                     __end_of_currDate:
   135                           	opt stack 0
   136  00FDDB                     _LCD_LEFT:
   137                           	opt stack 0
   138  00FDDB  00                 	db	0
   139  00FDDC                     __end_of_LCD_LEFT:
   140                           	opt stack 0
   141  00FDDC                     _LCD_RIGHT:
   142                           	opt stack 0
   143  00FDDC  01                 	db	1
   144  00FDDD                     __end_of_LCD_RIGHT:
   145                           	opt stack 0
   146  00FDDD                     _LCD_SIZE_VERT:
   147                           	opt stack 0
   148  00FDDD  02                 	db	2
   149  00FDDE                     __end_of_LCD_SIZE_VERT:
   150                           	opt stack 0
   151  00FDDE                     _LCD_SIZE_HORZ:
   152                           	opt stack 0
   153  00FDDE  10                 	db	16
   154  00FDDF                     __end_of_LCD_SIZE_HORZ:
   155                           	opt stack 0
   156  00FDDF                     _LCD_VERT_LIMIT:
   157                           	opt stack 0
   158  00FDDF  04                 	db	4
   159  00FDE0                     __end_of_LCD_VERT_LIMIT:
   160                           	opt stack 0
   161  00FDE0                     _LCD_HORZ_LIMIT:
   162                           	opt stack 0
   163  00FDE0  14                 	db	20
   164  00FDE1                     __end_of_LCD_HORZ_LIMIT:
   165                           	opt stack 0
   166  0000                     _SSPBUF	set	4041
   167  0000                     _SSPCON2bits	set	4037
   168  0000                     _SSPADD	set	4040
   169  0000                     _SSPCON2	set	4037
   170  0000                     _SSPCON1	set	4038
   171  0000                     _SSPSTAT	set	4039
   172  0000                     _TRISCbits	set	3988
   173  0000                     _SSPCON1bits	set	4038
   174  0000                     _PORTB	set	3969
   175  0000                     _PORTBbits	set	3969
   176  0000                     _ADCON1	set	4033
   177  0000                     _ADCON0	set	4034
   178  0000                     _TRISE	set	3990
   179  0000                     _TRISD	set	3989
   180  0000                     _TRISC	set	3988
   181  0000                     _TRISB	set	3987
   182  0000                     _TRISA	set	3986
   183  0000                     _LATE	set	3981
   184  0000                     _LATC	set	3979
   185  0000                     _LATB	set	3978
   186  0000                     _LATA	set	3977
   187  0000                     _INTCONbits	set	4082
   188  0000                     _LATD	set	3980
   189  0000                     _LATDbits	set	3980
   190  0000                     _INT1IF	set	32640
   191  0000                     _INT1IE	set	32643
   192  00FDE1                     STR_1:
   193  00FDE1  25                 	db	37
   194  00FDE2  30                 	db	48	;'0'
   195  00FDE3  32                 	db	50	;'2'
   196  00FDE4  78                 	db	120	;'x'
   197  00FDE5  2F                 	db	47
   198  00FDE6  25                 	db	37
   199  00FDE7  30                 	db	48	;'0'
   200  00FDE8  32                 	db	50	;'2'
   201  00FDE9  78                 	db	120	;'x'
   202  00FDEA  2F                 	db	47
   203  00FDEB  25                 	db	37
   204  00FDEC  30                 	db	48	;'0'
   205  00FDED  32                 	db	50	;'2'
   206  00FDEE  78                 	db	120	;'x'
   207  00FDEF  20                 	db	32
   208  00FDF0  20                 	db	32
   209  00FDF1  20                 	db	32
   210  00FDF2  20                 	db	32
   211  00FDF3  25                 	db	37
   212  00FDF4  30                 	db	48	;'0'
   213  00FDF5  32                 	db	50	;'2'
   214  00FDF6  78                 	db	120	;'x'
   215  00FDF7  3A                 	db	58	;':'
   216  00FDF8  25                 	db	37
   217  00FDF9  30                 	db	48	;'0'
   218  00FDFA  32                 	db	50	;'2'
   219  00FDFB  78                 	db	120	;'x'
   220  00FDFC  3A                 	db	58	;':'
   221  00FDFD  25                 	db	37
   222  00FDFE  30                 	db	48	;'0'
   223  00FDFF  32                 	db	50	;'2'
   224  00FE00  78                 	db	120	;'x'
   225  00FE01  00                 	db	0
   226  00FE02                     STR_31:
   227  00FE02  20                 	db	32
   228  00FE03  20                 	db	32
   229  00FE04  20                 	db	32
   230  00FE05  20                 	db	32
   231  00FE06  20                 	db	32
   232  00FE07  20                 	db	32
   233  00FE08  50                 	db	80	;'P'
   234  00FE09  49                 	db	73	;'I'
   235  00FE0A  4C                 	db	76	;'L'
   236  00FE0B  4C                 	db	76	;'L'
   237  00FE0C  53                 	db	83	;'S'
   238  00FE0D  2E                 	db	46
   239  00FE0E  2E                 	db	46
   240  00FE0F  2E                 	db	46
   241  00FE10  20                 	db	32
   242  00FE11  20                 	db	32
   243  00FE12  20                 	db	32
   244  00FE13  20                 	db	32
   245  00FE14  20                 	db	32
   246  00FE15  20                 	db	32
   247  00FE16  00                 	db	0
   248  00FE17                     STR_12:
   249  00FE17  20                 	db	32
   250  00FE18  20                 	db	32
   251  00FE19  20                 	db	32
   252  00FE1A  20                 	db	32
   253  00FE1B  20                 	db	32
   254  00FE1C  54                 	db	84	;'T'
   255  00FE1D  52                 	db	82	;'R'
   256  00FE1E  59                 	db	89	;'Y'
   257  00FE1F  20                 	db	32
   258  00FE20  41                 	db	65	;'A'
   259  00FE21  47                 	db	71	;'G'
   260  00FE22  41                 	db	65	;'A'
   261  00FE23  49                 	db	73	;'I'
   262  00FE24  4E                 	db	78	;'N'
   263  00FE25  20                 	db	32
   264  00FE26  20                 	db	32
   265  00FE27  20                 	db	32
   266  00FE28  20                 	db	32
   267  00FE29  20                 	db	32
   268  00FE2A  20                 	db	32
   269  00FE2B  00                 	db	0
   270  00FE2C                     STR_30:
   271  00FE2C  20                 	db	32
   272  00FE2D  20                 	db	32
   273  00FE2E  20                 	db	32
   274  00FE2F  20                 	db	32
   275  00FE30  20                 	db	32
   276  00FE31  44                 	db	68	;'D'
   277  00FE32  49                 	db	73	;'I'
   278  00FE33  53                 	db	83	;'S'
   279  00FE34  50                 	db	80	;'P'
   280  00FE35  45                 	db	69	;'E'
   281  00FE36  4E                 	db	78	;'N'
   282  00FE37  53                 	db	83	;'S'
   283  00FE38  49                 	db	73	;'I'
   284  00FE39  4E                 	db	78	;'N'
   285  00FE3A  47                 	db	71	;'G'
   286  00FE3B  20                 	db	32
   287  00FE3C  20                 	db	32
   288  00FE3D  20                 	db	32
   289  00FE3E  20                 	db	32
   290  00FE3F  20                 	db	32
   291  00FE40  00                 	db	0
   292  00FE41                     STR_2:
   293  00FE41  20                 	db	32
   294  00FE42  20                 	db	32
   295  00FE43  20                 	db	32
   296  00FE44  20                 	db	32
   297  00FE45  20                 	db	32
   298  00FE46  2A                 	db	42
   299  00FE47  20                 	db	32
   300  00FE48  74                 	db	116	;'t'
   301  00FE49  6F                 	db	111	;'o'
   302  00FE4A  20                 	db	32
   303  00FE4B  42                 	db	66	;'B'
   304  00FE4C  45                 	db	69	;'E'
   305  00FE4D  47                 	db	71	;'G'
   306  00FE4E  49                 	db	73	;'I'
   307  00FE4F  4E                 	db	78	;'N'
   308  00FE50  20                 	db	32
   309  00FE51  20                 	db	32
   310  00FE52  20                 	db	32
   311  00FE53  20                 	db	32
   312  00FE54  20                 	db	32
   313  00FE55  00                 	db	0
   314  00FE56                     STR_11:
   315  00FE56  20                 	db	32
   316  00FE57  20                 	db	32
   317  00FE58  20                 	db	32
   318  00FE59  49                 	db	73	;'I'
   319  00FE5A  4E                 	db	78	;'N'
   320  00FE5B  56                 	db	86	;'V'
   321  00FE5C  41                 	db	65	;'A'
   322  00FE5D  4C                 	db	76	;'L'
   323  00FE5E  49                 	db	73	;'I'
   324  00FE5F  44                 	db	68	;'D'
   325  00FE60  20                 	db	32
   326  00FE61  49                 	db	73	;'I'
   327  00FE62  4E                 	db	78	;'N'
   328  00FE63  50                 	db	80	;'P'
   329  00FE64  55                 	db	85	;'U'
   330  00FE65  54                 	db	84	;'T'
   331  00FE66  20                 	db	32
   332  00FE67  20                 	db	32
   333  00FE68  20                 	db	32
   334  00FE69  20                 	db	32
   335  00FE6A  00                 	db	0
   336  00FE6B                     STR_6:
   337  00FE6B  20                 	db	32
   338  00FE6C  20                 	db	32
   339  00FE6D  20                 	db	32
   340  00FE6E  20                 	db	32
   341  00FE6F  23                 	db	35
   342  00FE70  20                 	db	32
   343  00FE71  74                 	db	116	;'t'
   344  00FE72  6F                 	db	111	;'o'
   345  00FE73  20                 	db	32
   346  00FE74  63                 	db	99	;'c'
   347  00FE75  6F                 	db	111	;'o'
   348  00FE76  6E                 	db	110	;'n'
   349  00FE77  66                 	db	102	;'f'
   350  00FE78  69                 	db	105	;'i'
   351  00FE79  72                 	db	114	;'r'
   352  00FE7A  6D                 	db	109	;'m'
   353  00FE7B  20                 	db	32
   354  00FE7C  20                 	db	32
   355  00FE7D  20                 	db	32
   356  00FE7E  20                 	db	32
   357  00FE7F  00                 	db	0
   358  00FE80                     STR_3:
   359  00FE80  20                 	db	32
   360  00FE81  20                 	db	32
   361  00FE82  20                 	db	32
   362  00FE83  20                 	db	32
   363  00FE84  23                 	db	35
   364  00FE85  20                 	db	32
   365  00FE86  66                 	db	102	;'f'
   366  00FE87  6F                 	db	111	;'o'
   367  00FE88  72                 	db	114	;'r'
   368  00FE89  20                 	db	32
   369  00FE8A  4C                 	db	76	;'L'
   370  00FE8B  4F                 	db	79	;'O'
   371  00FE8C  47                 	db	71	;'G'
   372  00FE8D  47                 	db	71	;'G'
   373  00FE8E  49                 	db	73	;'I'
   374  00FE8F  4E                 	db	78	;'N'
   375  00FE90  47                 	db	71	;'G'
   376  00FE91  20                 	db	32
   377  00FE92  20                 	db	32
   378  00FE93  20                 	db	32
   379  00FE94  00                 	db	0
   380  00FE95                     STR_4:
   381  00FE95  20                 	db	32
   382  00FE96  20                 	db	32
   383  00FE97  20                 	db	32
   384  00FE98  41                 	db	65	;'A'
   385  00FE99  66                 	db	102	;'f'
   386  00FE9A  74                 	db	116	;'t'
   387  00FE9B  65                 	db	101	;'e'
   388  00FE9C  72                 	db	114	;'r'
   389  00FE9D  20                 	db	32
   390  00FE9E  65                 	db	101	;'e'
   391  00FE9F  6E                 	db	110	;'n'
   392  00FEA0  74                 	db	116	;'t'
   393  00FEA1  65                 	db	101	;'e'
   394  00FEA2  72                 	db	114	;'r'
   395  00FEA3  69                 	db	105	;'i'
   396  00FEA4  6E                 	db	110	;'n'
   397  00FEA5  67                 	db	103	;'g'
   398  00FEA6  20                 	db	32
   399  00FEA7  20                 	db	32
   400  00FEA8  20                 	db	32
   401  00FEA9  00                 	db	0
   402  00FEAA                     STR_5:
   403  00FEAA  20                 	db	32
   404  00FEAB  20                 	db	32
   405  00FEAC  73                 	db	115	;'s'
   406  00FEAD  65                 	db	101	;'e'
   407  00FEAE  6C                 	db	108	;'l'
   408  00FEAF  65                 	db	101	;'e'
   409  00FEB0  63                 	db	99	;'c'
   410  00FEB1  74                 	db	116	;'t'
   411  00FEB2  69                 	db	105	;'i'
   412  00FEB3  6F                 	db	111	;'o'
   413  00FEB4  6E                 	db	110	;'n'
   414  00FEB5  2C                 	db	44
   415  00FEB6  20                 	db	32
   416  00FEB7  70                 	db	112	;'p'
   417  00FEB8  72                 	db	114	;'r'
   418  00FEB9  65                 	db	101	;'e'
   419  00FEBA  73                 	db	115	;'s'
   420  00FEBB  73                 	db	115	;'s'
   421  00FEBC  20                 	db	32
   422  00FEBD  20                 	db	32
   423  00FEBE  00                 	db	0
   424  00FEBF                     STR_16:
   425  00FEBF  28                 	db	40
   426  00FEC0  33                 	db	51	;'3'
   427  00FEC1  29                 	db	41
   428  00FEC2  42                 	db	66	;'B'
   429  00FEC3  6F                 	db	111	;'o'
   430  00FEC4  74                 	db	116	;'t'
   431  00FEC5  68                 	db	104	;'h'
   432  00FEC6  20                 	db	32
   433  00FEC7  28                 	db	40
   434  00FEC8  34                 	db	52	;'4'
   435  00FEC9  29                 	db	41
   436  00FECA  41                 	db	65	;'A'
   437  00FECB  6C                 	db	108	;'l'
   438  00FECC  74                 	db	116	;'t'
   439  00FECD  65                 	db	101	;'e'
   440  00FECE  72                 	db	114	;'r'
   441  00FECF  6E                 	db	110	;'n'
   442  00FED0  61                 	db	97	;'a'
   443  00FED1  74                 	db	116	;'t'
   444  00FED2  65                 	db	101	;'e'
   445  00FED3  00                 	db	0
   446  00FED4                     STR_20:
   447  00FED4  28                 	db	40
   448  00FED5  33                 	db	51	;'3'
   449  00FED6  29                 	db	41
   450  00FED7  20                 	db	32
   451  00FED8  41                 	db	65	;'A'
   452  00FED9  6C                 	db	108	;'l'
   453  00FEDA  74                 	db	116	;'t'
   454  00FEDB  65                 	db	101	;'e'
   455  00FEDC  72                 	db	114	;'r'
   456  00FEDD  6E                 	db	110	;'n'
   457  00FEDE  61                 	db	97	;'a'
   458  00FEDF  74                 	db	116	;'t'
   459  00FEE0  65                 	db	101	;'e'
   460  00FEE1  20                 	db	32
   461  00FEE2  28                 	db	40
   462  00FEE3  4D                 	db	77	;'M'
   463  00FEE4  6F                 	db	111	;'o'
   464  00FEE5  6E                 	db	110	;'n'
   465  00FEE6  29                 	db	41
   466  00FEE7  00                 	db	0
   467  00FEE8                     STR_19:
   468  00FEE8  28                 	db	40
   469  00FEE9  32                 	db	50	;'2'
   470  00FEEA  29                 	db	41
   471  00FEEB  20                 	db	32
   472  00FEEC  41                 	db	65	;'A'
   473  00FEED  6C                 	db	108	;'l'
   474  00FEEE  74                 	db	116	;'t'
   475  00FEEF  65                 	db	101	;'e'
   476  00FEF0  72                 	db	114	;'r'
   477  00FEF1  6E                 	db	110	;'n'
   478  00FEF2  61                 	db	97	;'a'
   479  00FEF3  74                 	db	116	;'t'
   480  00FEF4  65                 	db	101	;'e'
   481  00FEF5  20                 	db	32
   482  00FEF6  28                 	db	40
   483  00FEF7  53                 	db	83	;'S'
   484  00FEF8  75                 	db	117	;'u'
   485  00FEF9  6E                 	db	110	;'n'
   486  00FEFA  29                 	db	41
   487  00FEFB  00                 	db	0
   488  00FEFC                     STR_25:
   489  00FEFC  2D                 	db	45
   490  00FEFD  20                 	db	32
   491  00FEFE  4D                 	db	77	;'M'
   492  00FEFF  6F                 	db	111	;'o'
   493  00FF00  72                 	db	114	;'r'
   494  00FF01  6E                 	db	110	;'n'
   495  00FF02  2E                 	db	46
   496  00FF03  20                 	db	32
   497  00FF04  26                 	db	38
   498  00FF05  20                 	db	32
   499  00FF06  41                 	db	65	;'A'
   500  00FF07  66                 	db	102	;'f'
   501  00FF08  74                 	db	116	;'t'
   502  00FF09  65                 	db	101	;'e'
   503  00FF0A  72                 	db	114	;'r'
   504  00FF0B  6E                 	db	110	;'n'
   505  00FF0C  6F                 	db	111	;'o'
   506  00FF0D  6F                 	db	111	;'o'
   507  00FF0E  6E                 	db	110	;'n'
   508  00FF0F  00                 	db	0
   509  00FF10                     STR_21:
   510  00FF10  50                 	db	80	;'P'
   511  00FF11  72                 	db	114	;'r'
   512  00FF12  65                 	db	101	;'e'
   513  00FF13  73                 	db	115	;'s'
   514  00FF14  63                 	db	99	;'c'
   515  00FF15  72                 	db	114	;'r'
   516  00FF16  69                 	db	105	;'i'
   517  00FF17  70                 	db	112	;'p'
   518  00FF18  2E                 	db	46
   519  00FF19  20                 	db	32
   520  00FF1A  64                 	db	100	;'d'
   521  00FF1B  65                 	db	101	;'e'
   522  00FF1C  74                 	db	116	;'t'
   523  00FF1D  61                 	db	97	;'a'
   524  00FF1E  69                 	db	105	;'i'
   525  00FF1F  6C                 	db	108	;'l'
   526  00FF20  73                 	db	115	;'s'
   527  00FF21  3A                 	db	58	;':'
   528  00FF22  00                 	db	0
   529  00FF23                     STR_29:
   530  00FF23  2D                 	db	45
   531  00FF24  20                 	db	32
   532  00FF25  41                 	db	65	;'A'
   533  00FF26  6C                 	db	108	;'l'
   534  00FF27  74                 	db	116	;'t'
   535  00FF28  65                 	db	101	;'e'
   536  00FF29  72                 	db	114	;'r'
   537  00FF2A  6E                 	db	110	;'n'
   538  00FF2B  61                 	db	97	;'a'
   539  00FF2C  74                 	db	116	;'t'
   540  00FF2D  65                 	db	101	;'e'
   541  00FF2E  20                 	db	32
   542  00FF2F  28                 	db	40
   543  00FF30  4D                 	db	77	;'M'
   544  00FF31  6F                 	db	111	;'o'
   545  00FF32  6E                 	db	110	;'n'
   546  00FF33  29                 	db	41
   547  00FF34  00                 	db	0
   548  00FF35                     STR_28:
   549  00FF35  2D                 	db	45
   550  00FF36  20                 	db	32
   551  00FF37  41                 	db	65	;'A'
   552  00FF38  6C                 	db	108	;'l'
   553  00FF39  74                 	db	116	;'t'
   554  00FF3A  65                 	db	101	;'e'
   555  00FF3B  72                 	db	114	;'r'
   556  00FF3C  6E                 	db	110	;'n'
   557  00FF3D  61                 	db	97	;'a'
   558  00FF3E  74                 	db	116	;'t'
   559  00FF3F  65                 	db	101	;'e'
   560  00FF40  20                 	db	32
   561  00FF41  28                 	db	40
   562  00FF42  53                 	db	83	;'S'
   563  00FF43  75                 	db	117	;'u'
   564  00FF44  6E                 	db	110	;'n'
   565  00FF45  29                 	db	41
   566  00FF46  00                 	db	0
   567  00FF47                     STR_32:
   568  00FF47  30                 	db	48	;'0'
   569  00FF48  31                 	db	49	;'1'
   570  00FF49  32                 	db	50	;'2'
   571  00FF4A  33                 	db	51	;'3'
   572  00FF4B  34                 	db	52	;'4'
   573  00FF4C  35                 	db	53	;'5'
   574  00FF4D  36                 	db	54	;'6'
   575  00FF4E  37                 	db	55	;'7'
   576  00FF4F  38                 	db	56	;'8'
   577  00FF50  39                 	db	57	;'9'
   578  00FF51  61                 	db	97	;'a'
   579  00FF52  62                 	db	98	;'b'
   580  00FF53  63                 	db	99	;'c'
   581  00FF54  64                 	db	100	;'d'
   582  00FF55  65                 	db	101	;'e'
   583  00FF56  66                 	db	102	;'f'
   584  00FF57  00                 	db	0
   585  00FF58                     STR_7:
   586  00FF58  4E                 	db	78	;'N'
   587  00FF59  75                 	db	117	;'u'
   588  00FF5A  6D                 	db	109	;'m'
   589  00FF5B  62                 	db	98	;'b'
   590  00FF5C  65                 	db	101	;'e'
   591  00FF5D  72                 	db	114	;'r'
   592  00FF5E  20                 	db	32
   593  00FF5F  6F                 	db	111	;'o'
   594  00FF60  66                 	db	102	;'f'
   595  00FF61  20                 	db	32
   596  00FF62  70                 	db	112	;'p'
   597  00FF63  69                 	db	105	;'i'
   598  00FF64  6C                 	db	108	;'l'
   599  00FF65  6C                 	db	108	;'l'
   600  00FF66  73                 	db	115	;'s'
   601  00FF67  3A                 	db	58	;':'
   602  00FF68  00                 	db	0
   603  00FF69                     STR_22:
   604  00FF69  2D                 	db	45
   605  00FF6A  20                 	db	32
   606  00FF6B  25                 	db	37
   607  00FF6C  64                 	db	100	;'d'
   608  00FF6D  52                 	db	82	;'R'
   609  00FF6E  20                 	db	32
   610  00FF6F  25                 	db	37
   611  00FF70  64                 	db	100	;'d'
   612  00FF71  46                 	db	70	;'F'
   613  00FF72  20                 	db	32
   614  00FF73  25                 	db	37
   615  00FF74  64                 	db	100	;'d'
   616  00FF75  4C                 	db	76	;'L'
   617  00FF76  00                 	db	0
   618  00FF77                     STR_26:
   619  00FF77  2D                 	db	45
   620  00FF78  20                 	db	32
   621  00FF79  41                 	db	65	;'A'
   622  00FF7A  6C                 	db	108	;'l'
   623  00FF7B  74                 	db	116	;'t'
   624  00FF7C  65                 	db	101	;'e'
   625  00FF7D  72                 	db	114	;'r'
   626  00FF7E  6E                 	db	110	;'n'
   627  00FF7F  61                 	db	97	;'a'
   628  00FF80  74                 	db	116	;'t'
   629  00FF81  69                 	db	105	;'i'
   630  00FF82  6E                 	db	110	;'n'
   631  00FF83  67                 	db	103	;'g'
   632  00FF84  00                 	db	0
   633  00FF85                     STR_13:
   634  00FF85  52                 	db	82	;'R'
   635  00FF86  65                 	db	101	;'e'
   636  00FF87  70                 	db	112	;'p'
   637  00FF88  65                 	db	101	;'e'
   638  00FF89  74                 	db	116	;'t'
   639  00FF8A  69                 	db	105	;'i'
   640  00FF8B  74                 	db	116	;'t'
   641  00FF8C  69                 	db	105	;'i'
   642  00FF8D  6F                 	db	111	;'o'
   643  00FF8E  6E                 	db	110	;'n'
   644  00FF8F  3A                 	db	58	;':'
   645  00FF90  20                 	db	32
   646  00FF91  00                 	db	0
   647  00FF92                     STR_15:
   648  00FF92  28                 	db	40
   649  00FF93  32                 	db	50	;'2'
   650  00FF94  29                 	db	41
   651  00FF95  41                 	db	65	;'A'
   652  00FF96  66                 	db	102	;'f'
   653  00FF97  74                 	db	116	;'t'
   654  00FF98  65                 	db	101	;'e'
   655  00FF99  72                 	db	114	;'r'
   656  00FF9A  6E                 	db	110	;'n'
   657  00FF9B  6F                 	db	111	;'o'
   658  00FF9C  6F                 	db	111	;'o'
   659  00FF9D  6E                 	db	110	;'n'
   660  00FF9E  00                 	db	0
   661  00FF9F                     STR_24:
   662  00FF9F  2D                 	db	45
   663  00FFA0  20                 	db	32
   664  00FFA1  41                 	db	65	;'A'
   665  00FFA2  66                 	db	102	;'f'
   666  00FFA3  74                 	db	116	;'t'
   667  00FFA4  65                 	db	101	;'e'
   668  00FFA5  72                 	db	114	;'r'
   669  00FFA6  6E                 	db	110	;'n'
   670  00FFA7  6F                 	db	111	;'o'
   671  00FFA8  6F                 	db	111	;'o'
   672  00FFA9  6E                 	db	110	;'n'
   673  00FFAA  73                 	db	115	;'s'
   674  00FFAB  00                 	db	0
   675  00FFAC                     STR_18:
   676  00FFAC  28                 	db	40
   677  00FFAD  31                 	db	49	;'1'
   678  00FFAE  29                 	db	41
   679  00FFAF  20                 	db	32
   680  00FFB0  45                 	db	69	;'E'
   681  00FFB1  76                 	db	118	;'v'
   682  00FFB2  65                 	db	101	;'e'
   683  00FFB3  72                 	db	114	;'r'
   684  00FFB4  79                 	db	121	;'y'
   685  00FFB5  64                 	db	100	;'d'
   686  00FFB6  61                 	db	97	;'a'
   687  00FFB7  79                 	db	121	;'y'
   688  00FFB8  00                 	db	0
   689  00FFB9                     STR_17:
   690  00FFB9  46                 	db	70	;'F'
   691  00FFBA  72                 	db	114	;'r'
   692  00FFBB  65                 	db	101	;'e'
   693  00FFBC  71                 	db	113	;'q'
   694  00FFBD  75                 	db	117	;'u'
   695  00FFBE  65                 	db	101	;'e'
   696  00FFBF  6E                 	db	110	;'n'
   697  00FFC0  63                 	db	99	;'c'
   698  00FFC1  79                 	db	121	;'y'
   699  00FFC2  3A                 	db	58	;':'
   700  00FFC3  20                 	db	32
   701  00FFC4  00                 	db	0
   702  00FFC5                     STR_14:
   703  00FFC5  28                 	db	40
   704  00FFC6  31                 	db	49	;'1'
   705  00FFC7  29                 	db	41
   706  00FFC8  4D                 	db	77	;'M'
   707  00FFC9  6F                 	db	111	;'o'
   708  00FFCA  72                 	db	114	;'r'
   709  00FFCB  6E                 	db	110	;'n'
   710  00FFCC  69                 	db	105	;'i'
   711  00FFCD  6E                 	db	110	;'n'
   712  00FFCE  67                 	db	103	;'g'
   713  00FFCF  00                 	db	0
   714  00FFD0                     STR_23:
   715  00FFD0  2D                 	db	45
   716  00FFD1  20                 	db	32
   717  00FFD2  4D                 	db	77	;'M'
   718  00FFD3  6F                 	db	111	;'o'
   719  00FFD4  72                 	db	114	;'r'
   720  00FFD5  6E                 	db	110	;'n'
   721  00FFD6  69                 	db	105	;'i'
   722  00FFD7  6E                 	db	110	;'n'
   723  00FFD8  67                 	db	103	;'g'
   724  00FFD9  73                 	db	115	;'s'
   725  00FFDA  00                 	db	0
   726  00FFDB                     STR_27:
   727  00FFDB  2D                 	db	45
   728  00FFDC  20                 	db	32
   729  00FFDD  45                 	db	69	;'E'
   730  00FFDE  76                 	db	118	;'v'
   731  00FFDF  65                 	db	101	;'e'
   732  00FFE0  72                 	db	114	;'r'
   733  00FFE1  79                 	db	121	;'y'
   734  00FFE2  64                 	db	100	;'d'
   735  00FFE3  61                 	db	97	;'a'
   736  00FFE4  79                 	db	121	;'y'
   737  00FFE5  00                 	db	0
   738  00FFE6                     STR_9:
   739  00FFE6  20                 	db	32
   740  00FFE7  20                 	db	32
   741  00FFE8  20                 	db	32
   742  00FFE9  46                 	db	70	;'F'
   743  00FFEA  3A                 	db	58	;':'
   744  00FFEB  20                 	db	32
   745  00FFEC  5F                 	db	95	;'_'
   746  00FFED  00                 	db	0
   747  00FFEE                     STR_10:
   748  00FFEE  20                 	db	32
   749  00FFEF  20                 	db	32
   750  00FFF0  20                 	db	32
   751  00FFF1  4C                 	db	76	;'L'
   752  00FFF2  3A                 	db	58	;':'
   753  00FFF3  20                 	db	32
   754  00FFF4  5F                 	db	95	;'_'
   755  00FFF5  00                 	db	0
   756  00FFF6                     STR_8:
   757  00FFF6  20                 	db	32
   758  00FFF7  20                 	db	32
   759  00FFF8  20                 	db	32
   760  00FFF9  52                 	db	82	;'R'
   761  00FFFA  3A                 	db	58	;':'
   762  00FFFB  20                 	db	32
   763  00FFFC  5F                 	db	95	;'_'
   764  00FFFD  00                 	db	0
   765                           
   766                           ; #config settings
   767  00FFFE  00                 	db	0	; dummy byte at the end
   768  0000                     
   769                           	psect	cinit
   770  000F34                     __pcinit:
   771                           	opt stack 0
   772  000F34                     start_initialization:
   773                           	opt stack 0
   774  000F34                     __initialization:
   775                           	opt stack 0
   776                           
   777                           ; Initialize objects allocated to COMRAM (6 bytes)
   778                           ; load TBLPTR registers with __pidataCOMRAM
   779  000F34  0E46               	movlw	low __pidataCOMRAM
   780  000F36  6EF6               	movwf	tblptrl,c
   781  000F38  0E10               	movlw	high __pidataCOMRAM
   782  000F3A  6EF7               	movwf	tblptrh,c
   783  000F3C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   784  000F3E  6EF8               	movwf	tblptru,c
   785  000F40  EE00  F05F         	lfsr	0,__pdataCOMRAM
   786  000F44  EE10 F006          	lfsr	1,6
   787  000F48                     copy_data0:
   788  000F48  0009               	tblrd		*+
   789  000F4A  CFF5 FFEE          	movff	tablat,postinc0
   790  000F4E  50E5               	movf	postdec1,w,c
   791  000F50  50E1               	movf	fsr1l,w,c
   792  000F52  E1FA               	bnz	copy_data0
   793                           
   794                           ; Clear objects allocated to COMRAM (10 bytes)
   795  000F54  EE00  F055         	lfsr	0,__pbssCOMRAM
   796  000F58  0E0A               	movlw	10
   797  000F5A                     clear_0:
   798  000F5A  6AEE               	clrf	postinc0,c
   799  000F5C  06E8               	decf	wreg,f,c
   800  000F5E  E1FD               	bnz	clear_0
   801  000F60                     end_of_initialization:
   802                           	opt stack 0
   803  000F60                     __end_of__initialization:
   804                           	opt stack 0
   805  000F60  9065               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   806  000F62  9265               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   807  000F64  0E00               	movlw	low (__Lmediumconst shr (0+16))
   808  000F66  6EF8               	movwf	tblptru,c
   809  000F68  0100               	movlb	0
   810  000F6A  EFFD  F004         	goto	_main	;jump to C main() function
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           postdec1	equ	0xFE5
   818                           fsr1l	equ	0xFE1
   819                           
   820                           	psect	bssCOMRAM
   821  000055                     __pbssCOMRAM:
   822                           	opt stack 0
   823  000055                     _total_time:
   824                           	opt stack 0
   825  000055                     	ds	2
   826  000057                     _num_runs:
   827                           	opt stack 0
   828  000057                     	ds	2
   829  000059                     _begin_logging:
   830                           	opt stack 0
   831  000059                     	ds	2
   832  00005B                     _begin_operation:
   833                           	opt stack 0
   834  00005B                     	ds	2
   835  00005D                     	ds	1
   836  00005E                     _LCDinterruptState:
   837                           	opt stack 0
   838  00005E                     	ds	1
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           postdec1	equ	0xFE5
   846                           fsr1l	equ	0xFE1
   847                           
   848                           	psect	dataCOMRAM
   849  00005F                     __pdataCOMRAM:
   850                           	opt stack 0
   851  00005F                     operation@F3021:
   852                           	opt stack 0
   853  00005F                     	ds	6
   854                           tblptru	equ	0xFF8
   855                           tblptrh	equ	0xFF7
   856                           tblptrl	equ	0xFF6
   857                           tablat	equ	0xFF5
   858                           postinc0	equ	0xFEE
   859                           wreg	equ	0xFE8
   860                           postdec1	equ	0xFE5
   861                           fsr1l	equ	0xFE1
   862                           
   863                           	psect	cstackCOMRAM
   864  000001                     __pcstackCOMRAM:
   865                           	opt stack 0
   866  000001                     ??_interruptHandler:
   867  000001                     
   868                           ; 1 bytes @ 0x0
   869  000001                     	ds	18
   870  000013                     interruptHandler@keypress:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x12
   874  000013                     	ds	1
   875  000014                     ??_isdigit:
   876  000014                     ??_I2C_Master_Wait:
   877  000014                     ?___wmul:
   878                           	opt stack 0
   879  000014                     ?___lwdiv:
   880                           	opt stack 0
   881  000014                     ?___lldiv:
   882                           	opt stack 0
   883  000014                     lcdNibble@temp:
   884                           	opt stack 0
   885  000014                     ___wmul@multiplier:
   886                           	opt stack 0
   887  000014                     ___lwdiv@dividend:
   888                           	opt stack 0
   889  000014                     ___lldiv@dividend:
   890                           	opt stack 0
   891                           
   892                           ; 4 bytes @ 0x13
   893  000014                     	ds	1
   894  000015                     lcdNibble@data:
   895                           	opt stack 0
   896  000015                     I2C_Master_Read@ackBit:
   897                           	opt stack 0
   898  000015                     _isdigit$795:
   899                           	opt stack 0
   900  000015                     I2C_Master_Write@byteToWrite:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x14
   904  000015                     	ds	1
   905  000016                     lcdInst@data:
   906                           	opt stack 0
   907  000016                     putch@data:
   908                           	opt stack 0
   909  000016                     I2C_Master_Read@receivedByte:
   910                           	opt stack 0
   911  000016                     isdigit@c:
   912                           	opt stack 0
   913  000016                     ___wmul@multiplicand:
   914                           	opt stack 0
   915  000016                     ___lwdiv@divisor:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x15
   919  000016                     	ds	1
   920  000017                     ??_initLCD:
   921  000017                     lcd_shift_cursor@direction:
   922                           	opt stack 0
   923  000017                     RTC_setTime@i:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x16
   927  000017                     	ds	1
   928  000018                     lcd_shift_cursor@numChars:
   929                           	opt stack 0
   930  000018                     ___wmul@product:
   931                           	opt stack 0
   932  000018                     ___lwdiv@quotient:
   933                           	opt stack 0
   934  000018                     ___lldiv@divisor:
   935                           	opt stack 0
   936                           
   937                           ; 4 bytes @ 0x17
   938  000018                     	ds	1
   939  000019                     lcd_shift_cursor@n:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x18
   943  000019                     	ds	1
   944  00001A                     lcd_set_cursor@y:
   945                           	opt stack 0
   946  00001A                     ___lwdiv@counter:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x19
   950  00001A                     	ds	1
   951  00001B                     ??_lcd_set_cursor:
   952  00001B                     ?___lwmod:
   953                           	opt stack 0
   954  00001B                     ___lwmod@dividend:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x1A
   958  00001B                     	ds	1
   959  00001C                     lcd_set_cursor@x:
   960                           	opt stack 0
   961  00001C                     ___lldiv@quotient:
   962                           	opt stack 0
   963                           
   964                           ; 4 bytes @ 0x1B
   965  00001C                     	ds	1
   966  00001D                     ___lwmod@divisor:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x1C
   970  00001D                     	ds	2
   971  00001F                     ___lwmod@counter:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x1E
   975  00001F                     	ds	1
   976  000020                     ?_printf:
   977                           	opt stack 0
   978  000020                     ___lldiv@counter:
   979                           	opt stack 0
   980  000020                     printf@f:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x1F
   984  000020                     	ds	1
   985  000021                     I2C_Master_Init@clockFreq:
   986                           	opt stack 0
   987                           
   988                           ; 4 bytes @ 0x20
   989  000021                     	ds	4
   990  000025                     ??_I2C_Master_Init:
   991                           
   992                           ; 1 bytes @ 0x24
   993  000025                     	ds	9
   994  00002E                     ??_printf:
   995                           
   996                           ; 1 bytes @ 0x2D
   997  00002E                     	ds	4
   998  000032                     printf@idx:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x31
  1002  000032                     	ds	1
  1003  000033                     printf@ap:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0x32
  1007  000033                     	ds	2
  1008  000035                     printf@prec:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x34
  1012  000035                     	ds	1
  1013  000036                     printf@val:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x35
  1017  000036                     	ds	2
  1018  000038                     printf@flag:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x37
  1022  000038                     	ds	1
  1023  000039                     printf@width:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x38
  1027  000039                     	ds	2
  1028  00003B                     printf@c:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x3A
  1032  00003B                     	ds	1
  1033  00003C                     ??_operation:
  1034                           
  1035                           ; 1 bytes @ 0x3B
  1036  00003C                     	ds	2
  1037  00003E                     operation@frequency:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x3D
  1041  00003E                     	ds	1
  1042  00003F                     operation@repetition:
  1043                           	opt stack 0
  1044                           
  1045                           ; 1 bytes @ 0x3E
  1046  00003F                     	ds	1
  1047  000040                     operation@keypress:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x3F
  1051  000040                     	ds	1
  1052  000041                     operation@keypress_387:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x40
  1056  000041                     	ds	1
  1057  000042                     operation@keypress_400:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x41
  1061  000042                     	ds	1
  1062  000043                     operation@keypress_388:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x42
  1066  000043                     	ds	1
  1067  000044                     operation@keypress_395:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x43
  1071  000044                     	ds	1
  1072  000045                     operation@prescription:
  1073                           	opt stack 0
  1074                           
  1075                           ; 6 bytes @ 0x44
  1076  000045                     	ds	6
  1077  00004B                     ??_main:
  1078                           
  1079                           ; 1 bytes @ 0x4A
  1080  00004B                     	ds	2
  1081  00004D                     main@time:
  1082                           	opt stack 0
  1083                           
  1084                           ; 7 bytes @ 0x4C
  1085  00004D                     	ds	7
  1086  000054                     main@i:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x53
  1090  000054                     	ds	1
  1091                           tblptru	equ	0xFF8
  1092                           tblptrh	equ	0xFF7
  1093                           tblptrl	equ	0xFF6
  1094                           tablat	equ	0xFF5
  1095                           postinc0	equ	0xFEE
  1096                           wreg	equ	0xFE8
  1097                           postdec1	equ	0xFE5
  1098                           fsr1l	equ	0xFE1
  1099                           
  1100 ;;
  1101 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1102 ;;
  1103 ;; *************** function _main *****************
  1104 ;; Defined at:
  1105 ;;		line 39 in file "main.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;		None
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;  time            7   76[COMRAM] unsigned char [7]
  1110 ;;  i               1   83[COMRAM] unsigned char 
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1121 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1124 ;;Total ram usage:       10 bytes
  1125 ;; Hardware stack levels required when called:    6
  1126 ;; This function calls:
  1127 ;;		_I2C_Master_Init
  1128 ;;		_I2C_Master_Read
  1129 ;;		_I2C_Master_Start
  1130 ;;		_I2C_Master_Stop
  1131 ;;		_I2C_Master_Write
  1132 ;;		_RTC_setTime
  1133 ;;		_initLCD
  1134 ;;		_lcdInst
  1135 ;;		_logging
  1136 ;;		_operation
  1137 ;;		_printf
  1138 ;; This function is called by:
  1139 ;;		Startup code after reset
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           	psect	text0
  1144  0009FA                     __ptext0:
  1145                           	opt stack 0
  1146  0009FA                     _main:
  1147                           	opt stack 25
  1148                           
  1149                           ;main.c: 45: LATA = 0x00;
  1150                           
  1151                           ;incstack = 0
  1152  0009FA  0E00               	movlw	0
  1153  0009FC  6E89               	movwf	3977,c	;volatile
  1154                           
  1155                           ;main.c: 46: LATB = 0x00;
  1156  0009FE  0E00               	movlw	0
  1157  000A00  6E8A               	movwf	3978,c	;volatile
  1158                           
  1159                           ;main.c: 47: LATC = 0x00;
  1160  000A02  0E00               	movlw	0
  1161  000A04  6E8B               	movwf	3979,c	;volatile
  1162                           
  1163                           ;main.c: 48: LATD = 0x00;
  1164  000A06  0E00               	movlw	0
  1165  000A08  6E8C               	movwf	3980,c	;volatile
  1166                           
  1167                           ;main.c: 49: LATE = 0x00;
  1168  000A0A  0E00               	movlw	0
  1169  000A0C  6E8D               	movwf	3981,c	;volatile
  1170                           
  1171                           ;main.c: 53: TRISA = 0xFF;
  1172  000A0E  6892               	setf	3986,c	;volatile
  1173                           
  1174                           ;main.c: 54: TRISB = 0xFF;
  1175  000A10  6893               	setf	3987,c	;volatile
  1176                           
  1177                           ;main.c: 55: TRISC = 0b10000000;
  1178  000A12  0E80               	movlw	128
  1179  000A14  6E94               	movwf	3988,c	;volatile
  1180                           
  1181                           ;main.c: 59: TRISD = 0x00;
  1182  000A16  0E00               	movlw	0
  1183  000A18  6E95               	movwf	3989,c	;volatile
  1184                           
  1185                           ;main.c: 60: TRISE = 0x00;
  1186  000A1A  0E00               	movlw	0
  1187  000A1C  6E96               	movwf	3990,c	;volatile
  1188                           
  1189                           ;main.c: 63: ADCON0 = 0x00;
  1190  000A1E  0E00               	movlw	0
  1191  000A20  6EC2               	movwf	4034,c	;volatile
  1192                           
  1193                           ;main.c: 64: ADCON1 = 0b00001111;
  1194  000A22  0E0F               	movlw	15
  1195  000A24  6EC1               	movwf	4033,c	;volatile
  1196                           
  1197                           ;main.c: 66: INT1IE = 1;
  1198  000A26  86F0               	bsf	intcon3,3,c	;volatile
  1199                           
  1200                           ;main.c: 67: (INTCONbits.GIE = 1);
  1201  000A28  8EF2               	bsf	intcon,7,c	;volatile
  1202                           
  1203                           ;main.c: 72: initLCD();
  1204  000A2A  EC53  F007         	call	_initLCD	;wreg free
  1205                           
  1206                           ;main.c: 74: I2C_Master_Init(100000);
  1207  000A2E  0EA0               	movlw	160
  1208  000A30  6E21               	movwf	I2C_Master_Init@clockFreq,c
  1209  000A32  0E86               	movlw	134
  1210  000A34  6E22               	movwf	I2C_Master_Init@clockFreq+1,c
  1211  000A36  0E01               	movlw	1
  1212  000A38  6E23               	movwf	I2C_Master_Init@clockFreq+2,c
  1213  000A3A  0E00               	movlw	0
  1214  000A3C  6E24               	movwf	I2C_Master_Init@clockFreq+3,c
  1215  000A3E  ECD5  F006         	call	_I2C_Master_Init	;wreg free
  1216                           
  1217                           ;main.c: 80: RTC_setTime();
  1218  000A42  EC2C  F007         	call	_RTC_setTime	;wreg free
  1219  000A46                     
  1220                           ;main.c: 89: I2C_Master_Start();
  1221  000A46  EC1F  F008         	call	_I2C_Master_Start	;wreg free
  1222                           
  1223                           ;main.c: 90: I2C_Master_Write(0b11010000);
  1224  000A4A  0E00               	movlw	0
  1225  000A4C  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  1226  000A4E  0ED0               	movlw	208
  1227  000A50  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  1228  000A52  EC16  F008         	call	_I2C_Master_Write	;wreg free
  1229                           
  1230                           ;main.c: 91: I2C_Master_Write(0x00);
  1231  000A56  0E00               	movlw	0
  1232  000A58  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  1233  000A5A  0E00               	movlw	0
  1234  000A5C  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  1235  000A5E  EC16  F008         	call	_I2C_Master_Write	;wreg free
  1236                           
  1237                           ;main.c: 92: I2C_Master_Stop();
  1238  000A62  EC1B  F008         	call	_I2C_Master_Stop	;wreg free
  1239                           
  1240                           ;main.c: 95: I2C_Master_Start();
  1241  000A66  EC1F  F008         	call	_I2C_Master_Start	;wreg free
  1242                           
  1243                           ;main.c: 96: I2C_Master_Write(0b11010001);
  1244  000A6A  0E00               	movlw	0
  1245  000A6C  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  1246  000A6E  0ED1               	movlw	209
  1247  000A70  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  1248  000A72  EC16  F008         	call	_I2C_Master_Write	;wreg free
  1249                           
  1250                           ;main.c: 97: for(i = 0; i < 6; i++){
  1251  000A76  0E00               	movlw	0
  1252  000A78  6E54               	movwf	main@i,c
  1253  000A7A                     l2458:
  1254  000A7A  0E05               	movlw	5
  1255  000A7C  6454               	cpfsgt	main@i,c
  1256  000A7E  D001               	goto	l153
  1257  000A80  D00E               	goto	u1740
  1258  000A82                     l153:
  1259                           
  1260                           ;main.c: 98: time[i] = I2C_Master_Read(0);
  1261  000A82  5054               	movf	main@i,w,c
  1262  000A84  0D01               	mullw	1
  1263  000A86  0E4D               	movlw	low main@time
  1264  000A88  24F3               	addwf	prodl,w,c
  1265  000A8A  6ED9               	movwf	fsr2l,c
  1266  000A8C  0E00               	movlw	high main@time
  1267  000A8E  20F4               	addwfc	prodh,w,c
  1268  000A90  6EDA               	movwf	fsr2h,c
  1269  000A92  0E00               	movlw	0
  1270  000A94  ECCA  F007         	call	_I2C_Master_Read
  1271  000A98  6EDF               	movwf	indf2,c
  1272  000A9A  2A54               	incf	main@i,f,c
  1273  000A9C  D7EE               	goto	l2458
  1274  000A9E                     u1740:
  1275                           
  1276                           ;main.c: 99: }
  1277                           ;main.c: 100: time[6] = I2C_Master_Read(1);
  1278  000A9E  0E01               	movlw	1
  1279  000AA0  ECCA  F007         	call	_I2C_Master_Read
  1280  000AA4  6E53               	movwf	main@time+6,c
  1281                           
  1282                           ;main.c: 101: I2C_Master_Stop();
  1283  000AA6  EC1B  F008         	call	_I2C_Master_Stop	;wreg free
  1284                           
  1285                           ;main.c: 103: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1286  000AAA  0E0C               	movlw	12
  1287  000AAC  EC03  F008         	call	_lcdInst
  1288                           
  1289                           ;main.c: 105: if (begin_operation || begin_logging) {
  1290  000AB0  505B               	movf	_begin_operation,w,c
  1291  000AB2  105C               	iorwf	_begin_operation+1,w,c
  1292  000AB4  A4D8               	btfss	status,2,c
  1293  000AB6  D045               	goto	l158
  1294  000AB8  5059               	movf	_begin_logging,w,c
  1295  000ABA  105A               	iorwf	_begin_logging+1,w,c
  1296  000ABC  A4D8               	btfss	status,2,c
  1297  000ABE  D041               	goto	l158
  1298                           
  1299                           ;main.c: 107: }
  1300                           ;main.c: 110: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1301                           
  1302                           ;main.c: 106: break;
  1303  000AC0  0E80               	movlw	128
  1304  000AC2  EC03  F008         	call	_lcdInst
  1305  000AC6  0E41               	movlw	65
  1306  000AC8  6E4B               	movwf	??_main& (0+255),c
  1307  000ACA  0EEE               	movlw	238
  1308  000ACC                     u1797:
  1309  000ACC  2EE8               	decfsz	wreg,f,c
  1310  000ACE  D7FE               	bra	u1797
  1311  000AD0  2E4B               	decfsz	??_main& (0+255),f,c
  1312  000AD2  D7FC               	bra	u1797
  1313  000AD4  D000               	nop2	
  1314                           
  1315                           ;main.c: 111: printf("%02x/%02x/%02x    %02x:%02x:%02x", time[5],time[4],time[6],time[2]
      +                          ,time[1],time[0]);
  1316  000AD6  0EE1               	movlw	low STR_1
  1317  000AD8  6E20               	movwf	printf@f,c
  1318  000ADA  0EFD               	movlw	high STR_1
  1319  000ADC  6E21               	movwf	printf@f+1,c
  1320  000ADE  C052  F022         	movff	main@time+5,?_printf+2
  1321  000AE2  6A23               	clrf	?_printf+3,c
  1322  000AE4  C051  F024         	movff	main@time+4,?_printf+4
  1323  000AE8  6A25               	clrf	?_printf+5,c
  1324  000AEA  C053  F026         	movff	main@time+6,?_printf+6
  1325  000AEE  6A27               	clrf	?_printf+7,c
  1326  000AF0  C04F  F028         	movff	main@time+2,?_printf+8
  1327  000AF4  6A29               	clrf	?_printf+9,c
  1328  000AF6  C04E  F02A         	movff	main@time+1,?_printf+10
  1329  000AFA  6A2B               	clrf	?_printf+11,c
  1330  000AFC  C04D  F02C         	movff	main@time,?_printf+12
  1331  000B00  6A2D               	clrf	?_printf+13,c
  1332  000B02  EC77  F003         	call	_printf	;wreg free
  1333                           
  1334                           ;main.c: 112: lcdInst(0x94);;
  1335  000B06  0E94               	movlw	148
  1336  000B08  EC03  F008         	call	_lcdInst
  1337                           
  1338                           ;main.c: 113: printf("     * to BEGIN     ");
  1339  000B0C  0E41               	movlw	low STR_2
  1340  000B0E  6E20               	movwf	printf@f,c
  1341  000B10  0EFE               	movlw	high STR_2
  1342  000B12  6E21               	movwf	printf@f+1,c
  1343  000B14  EC77  F003         	call	_printf	;wreg free
  1344                           
  1345                           ;main.c: 114: lcdInst(0xD4);;
  1346  000B18  0ED4               	movlw	212
  1347  000B1A  EC03  F008         	call	_lcdInst
  1348                           
  1349                           ;main.c: 115: printf("    # for LOGGING   ");
  1350  000B1E  0E80               	movlw	low STR_3
  1351  000B20  6E20               	movwf	printf@f,c
  1352  000B22  0EFE               	movlw	high STR_3
  1353  000B24  6E21               	movwf	printf@f+1,c
  1354  000B26  EC77  F003         	call	_printf	;wreg free
  1355                           
  1356                           ;main.c: 116: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1357  000B2A  0E33               	movlw	51
  1358  000B2C  6E4C               	movwf	(??_main+1)& (0+255),c
  1359  000B2E  0EBB               	movlw	187
  1360  000B30  6E4B               	movwf	??_main& (0+255),c
  1361  000B32  0EE0               	movlw	224
  1362  000B34                     u1807:
  1363  000B34  2EE8               	decfsz	wreg,f,c
  1364  000B36  D7FE               	bra	u1807
  1365  000B38  2E4B               	decfsz	??_main& (0+255),f,c
  1366  000B3A  D7FC               	bra	u1807
  1367  000B3C  2E4C               	decfsz	(??_main+1)& (0+255),f,c
  1368  000B3E  D7FA               	bra	u1807
  1369  000B40  D782               	goto	l152
  1370  000B42                     l158:
  1371                           
  1372                           ;main.c: 117: }
  1373                           ;main.c: 119: if (begin_operation) {
  1374  000B42  505B               	movf	_begin_operation,w,c
  1375  000B44  105C               	iorwf	_begin_operation+1,w,c
  1376  000B46  B4D8               	btfsc	status,2,c
  1377  000B48  D008               	goto	l160
  1378                           
  1379                           ;main.c: 120: begin_operation = 0;
  1380  000B4A  0E00               	movlw	0
  1381  000B4C  6E5C               	movwf	_begin_operation+1,c
  1382  000B4E  0E00               	movlw	0
  1383  000B50  6E5B               	movwf	_begin_operation,c
  1384                           
  1385                           ;main.c: 121: operation();
  1386  000B52  EC09  F000         	call	_operation	;wreg free
  1387                           
  1388                           ;main.c: 122: }
  1389  000B56  EF07  F000         	goto	start
  1390  000B5A                     l160:
  1391                           
  1392                           ;main.c: 123: else if (begin_logging) {
  1393  000B5A  5059               	movf	_begin_logging,w,c
  1394  000B5C  105A               	iorwf	_begin_logging+1,w,c
  1395  000B5E  B4D8               	btfsc	status,2,c
  1396  000B60  EF07  F000         	goto	start
  1397                           
  1398                           ;main.c: 124: begin_logging = 0;
  1399  000B64  0E00               	movlw	0
  1400  000B66  6E5A               	movwf	_begin_logging+1,c
  1401  000B68  0E00               	movlw	0
  1402  000B6A  6E59               	movwf	_begin_logging,c
  1403                           
  1404                           ;main.c: 125: logging();
  1405  000B6C  EC26  F008         	call	_logging	;wreg free
  1406  000B70  EF07  F000         	goto	start
  1407  000B74                     __end_of_main:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           prodh	equ	0xFF4
  1414                           prodl	equ	0xFF3
  1415                           intcon	equ	0xFF2
  1416                           intcon3	equ	0xFF0
  1417                           postinc0	equ	0xFEE
  1418                           wreg	equ	0xFE8
  1419                           postdec1	equ	0xFE5
  1420                           fsr1l	equ	0xFE1
  1421                           indf2	equ	0xFDF
  1422                           fsr2h	equ	0xFDA
  1423                           fsr2l	equ	0xFD9
  1424                           status	equ	0xFD8
  1425                           
  1426 ;; *************** function _operation *****************
  1427 ;; Defined at:
  1428 ;;		line 129 in file "main.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;  keypress        1   66[COMRAM] unsigned char 
  1433 ;;  keypress        1   64[COMRAM] unsigned char 
  1434 ;;  keypress        1   63[COMRAM] unsigned char 
  1435 ;;  keypress        1   65[COMRAM] unsigned char 
  1436 ;;  keypress        1   67[COMRAM] unsigned char 
  1437 ;;  prescription    6   68[COMRAM] int [3]
  1438 ;;  repetition      1   62[COMRAM] enum E3002
  1439 ;;  frequency       1   61[COMRAM] enum E3008
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  1    wreg      void 
  1442 ;; Registers used:
  1443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1450 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1451 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1452 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1453 ;;Total ram usage:       15 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    5
  1456 ;; This function calls:
  1457 ;;		_lcdInst
  1458 ;;		_lcd_set_cursor
  1459 ;;		_printf
  1460 ;;		_putch
  1461 ;; This function is called by:
  1462 ;;		_main
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text1
  1467  000012                     __ptext1:
  1468                           	opt stack 0
  1469  000012                     _operation:
  1470                           	opt stack 25
  1471                           
  1472                           ;main.c: 131: (INTCONbits.GIE = 0);
  1473                           
  1474                           ;incstack = 0
  1475  000012  9EF2               	bcf	intcon,7,c	;volatile
  1476                           
  1477                           ;main.c: 133: int prescription[3] = {-1, -1, -1};
  1478  000014  EE20  F05F         	lfsr	2,operation@F3021
  1479  000018  EE10  F045         	lfsr	1,operation@prescription
  1480  00001C  0E05               	movlw	5
  1481  00001E                     u1341:
  1482  00001E  CFDB FFE3          	movff	plusw2,plusw1
  1483  000022  06E8               	decf	wreg,f,c
  1484  000024  E2FC               	bc	u1341
  1485                           
  1486                           ;main.c: 134: enum rep repetition = na_rep;
  1487  000026  0E04               	movlw	4
  1488  000028  6E3F               	movwf	operation@repetition,c
  1489                           
  1490                           ;main.c: 135: enum freq frequency = na_freq;
  1491  00002A  0E03               	movlw	3
  1492  00002C  6E3E               	movwf	operation@frequency,c
  1493                           
  1494                           ;main.c: 137: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1495  00002E  0E01               	movlw	1
  1496  000030  EC03  F008         	call	_lcdInst
  1497  000034  0EC3               	movlw	195
  1498  000036  6E3C               	movwf	??_operation& (0+255),c
  1499  000038  0ECD               	movlw	205
  1500  00003A                     u1817:
  1501  00003A  2EE8               	decfsz	wreg,f,c
  1502  00003C  D7FE               	bra	u1817
  1503  00003E  2E3C               	decfsz	??_operation& (0+255),f,c
  1504  000040  D7FC               	bra	u1817
  1505  000042  F000               	nop	
  1506                           
  1507                           ;main.c: 138: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1508  000044  0E80               	movlw	128
  1509  000046  EC03  F008         	call	_lcdInst
  1510  00004A  0E41               	movlw	65
  1511  00004C  6E3C               	movwf	??_operation& (0+255),c
  1512  00004E  0EEE               	movlw	238
  1513  000050                     u1827:
  1514  000050  2EE8               	decfsz	wreg,f,c
  1515  000052  D7FE               	bra	u1827
  1516  000054  2E3C               	decfsz	??_operation& (0+255),f,c
  1517  000056  D7FC               	bra	u1827
  1518  000058  D000               	nop2	
  1519                           
  1520                           ;main.c: 139: printf("   After entering   ");
  1521  00005A  0E95               	movlw	low STR_4
  1522  00005C  6E20               	movwf	printf@f,c
  1523  00005E  0EFE               	movlw	high STR_4
  1524  000060  6E21               	movwf	printf@f+1,c
  1525  000062  EC77  F003         	call	_printf	;wreg free
  1526                           
  1527                           ;main.c: 140: lcdInst(0xC0);;
  1528  000066  0EC0               	movlw	192
  1529  000068  EC03  F008         	call	_lcdInst
  1530                           
  1531                           ;main.c: 141: printf("  selection, press  ");
  1532  00006C  0EAA               	movlw	low STR_5
  1533  00006E  6E20               	movwf	printf@f,c
  1534  000070  0EFE               	movlw	high STR_5
  1535  000072  6E21               	movwf	printf@f+1,c
  1536  000074  EC77  F003         	call	_printf	;wreg free
  1537                           
  1538                           ;main.c: 142: lcdInst(0x94);;
  1539  000078  0E94               	movlw	148
  1540  00007A  EC03  F008         	call	_lcdInst
  1541                           
  1542                           ;main.c: 143: printf("    # to confirm    ");
  1543  00007E  0E6B               	movlw	low STR_6
  1544  000080  6E20               	movwf	printf@f,c
  1545  000082  0EFE               	movlw	high STR_6
  1546  000084  6E21               	movwf	printf@f+1,c
  1547  000086  EC77  F003         	call	_printf	;wreg free
  1548                           
  1549                           ;main.c: 144: _delay((unsigned long)((1800)*(40000000/4000.0)));
  1550  00008A  0E5C               	movlw	92
  1551  00008C  6E3D               	movwf	(??_operation+1)& (0+255),c
  1552  00008E  0E51               	movlw	81
  1553  000090  6E3C               	movwf	??_operation& (0+255),c
  1554  000092  0E60               	movlw	96
  1555  000094                     u1837:
  1556  000094  2EE8               	decfsz	wreg,f,c
  1557  000096  D7FE               	bra	u1837
  1558  000098  2E3C               	decfsz	??_operation& (0+255),f,c
  1559  00009A  D7FC               	bra	u1837
  1560  00009C  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  1561  00009E  D7FA               	bra	u1837
  1562  0000A0  D000               	nop2	
  1563  0000A2                     
  1564                           ;main.c: 148: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1565  0000A2  0E01               	movlw	1
  1566  0000A4  EC03  F008         	call	_lcdInst
  1567  0000A8  0EC3               	movlw	195
  1568  0000AA  6E3C               	movwf	??_operation& (0+255),c
  1569  0000AC  0ECD               	movlw	205
  1570  0000AE                     u1847:
  1571  0000AE  2EE8               	decfsz	wreg,f,c
  1572  0000B0  D7FE               	bra	u1847
  1573  0000B2  2E3C               	decfsz	??_operation& (0+255),f,c
  1574  0000B4  D7FC               	bra	u1847
  1575  0000B6  F000               	nop	
  1576                           
  1577                           ;main.c: 149: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1578  0000B8  0E80               	movlw	128
  1579  0000BA  EC03  F008         	call	_lcdInst
  1580  0000BE  0E41               	movlw	65
  1581  0000C0  6E3C               	movwf	??_operation& (0+255),c
  1582  0000C2  0EEE               	movlw	238
  1583  0000C4                     u1857:
  1584  0000C4  2EE8               	decfsz	wreg,f,c
  1585  0000C6  D7FE               	bra	u1857
  1586  0000C8  2E3C               	decfsz	??_operation& (0+255),f,c
  1587  0000CA  D7FC               	bra	u1857
  1588  0000CC  D000               	nop2	
  1589                           
  1590                           ;main.c: 150: printf("Number of pills:");
  1591  0000CE  0E58               	movlw	low STR_7
  1592  0000D0  6E20               	movwf	printf@f,c
  1593  0000D2  0EFF               	movlw	high STR_7
  1594  0000D4  6E21               	movwf	printf@f+1,c
  1595  0000D6  EC77  F003         	call	_printf	;wreg free
  1596                           
  1597                           ;main.c: 151: lcdInst(0xC0);;
  1598  0000DA  0EC0               	movlw	192
  1599  0000DC  EC03  F008         	call	_lcdInst
  1600                           
  1601                           ;main.c: 152: printf("   R: _");
  1602  0000E0  0EF6               	movlw	low STR_8
  1603  0000E2  6E20               	movwf	printf@f,c
  1604  0000E4  0EFF               	movlw	high STR_8
  1605  0000E6  6E21               	movwf	printf@f+1,c
  1606  0000E8  EC77  F003         	call	_printf	;wreg free
  1607                           
  1608                           ;main.c: 153: lcdInst(0x94);;
  1609  0000EC  0E94               	movlw	148
  1610  0000EE  EC03  F008         	call	_lcdInst
  1611                           
  1612                           ;main.c: 154: printf("   F: _");
  1613  0000F2  0EE6               	movlw	low STR_9
  1614  0000F4  6E20               	movwf	printf@f,c
  1615  0000F6  0EFF               	movlw	high STR_9
  1616  0000F8  6E21               	movwf	printf@f+1,c
  1617  0000FA  EC77  F003         	call	_printf	;wreg free
  1618                           
  1619                           ;main.c: 155: lcdInst(0xD4);;
  1620  0000FE  0ED4               	movlw	212
  1621  000100  EC03  F008         	call	_lcdInst
  1622                           
  1623                           ;main.c: 156: printf("   L: _");
  1624  000104  0EEE               	movlw	low STR_10
  1625  000106  6E20               	movwf	printf@f,c
  1626  000108  0EFF               	movlw	high STR_10
  1627  00010A  6E21               	movwf	printf@f+1,c
  1628  00010C  EC77  F003         	call	_printf	;wreg free
  1629                           
  1630                           ;main.c: 157: lcd_set_cursor(6, 1);
  1631  000110  0E01               	movlw	1
  1632  000112  6E1A               	movwf	lcd_set_cursor@y,c
  1633  000114  0E06               	movlw	6
  1634  000116  EC9D  F006         	call	_lcd_set_cursor
  1635                           
  1636                           ;main.c: 158: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1637  00011A  0E0F               	movlw	15
  1638  00011C  EC03  F008         	call	_lcdInst
  1639                           
  1640                           ;main.c: 160: prescription[0] = -1;
  1641  000120  6845               	setf	operation@prescription,c
  1642  000122  6846               	setf	operation@prescription+1,c
  1643                           
  1644                           ;main.c: 161: prescription[1] = -1;
  1645  000124  6847               	setf	operation@prescription+2,c
  1646  000126  6848               	setf	operation@prescription+3,c
  1647                           
  1648                           ;main.c: 162: prescription[2] = -1;
  1649  000128  6849               	setf	operation@prescription+4,c
  1650  00012A  684A               	setf	operation@prescription+5,c
  1651  00012C                     
  1652                           ;main.c: 166: continue;
  1653                           
  1654                           ;main.c: 165: while (PORTBbits.RB1 == 0) {
  1655  00012C  A281               	btfss	3969,1,c	;volatile
  1656  00012E  D7FE               	goto	l169
  1657                           
  1658                           ;main.c: 167: }
  1659                           ;main.c: 169: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1660  000130  3881               	swapf	3969,w,c	;volatile
  1661  000132  0B0F               	andlw	15
  1662  000134  0B0F               	andlw	15
  1663  000136  6E40               	movwf	operation@keypress,c
  1664  000138                     
  1665                           ;main.c: 172: continue;
  1666  000138  B281               	btfsc	3969,1,c	;volatile
  1667  00013A  D7FE               	goto	l174
  1668                           
  1669                           ;main.c: 173: }
  1670                           ;main.c: 175: __nop();
  1671  00013C  F000               	nop	
  1672                           
  1673                           ;main.c: 177: if (keypress == 0 || keypress == 1 || keypress == 13) {
  1674  00013E  5040               	movf	operation@keypress,w,c
  1675  000140  B4D8               	btfsc	status,2,c
  1676  000142  D007               	goto	u1390
  1677  000144  0440               	decf	operation@keypress,w,c
  1678  000146  B4D8               	btfsc	status,2,c
  1679  000148  D004               	goto	u1390
  1680  00014A  0E0D               	movlw	13
  1681  00014C  1840               	xorwf	operation@keypress,w,c
  1682  00014E  A4D8               	btfss	status,2,c
  1683  000150  D02A               	goto	l176
  1684  000152                     u1390:
  1685                           
  1686                           ;main.c: 178: lcd_set_cursor(6, 1);
  1687  000152  0E01               	movlw	1
  1688  000154  6E1A               	movwf	lcd_set_cursor@y,c
  1689  000156  0E06               	movlw	6
  1690  000158  EC9D  F006         	call	_lcd_set_cursor
  1691                           
  1692                           ;main.c: 179: putch(keys[keypress]);
  1693  00015C  5040               	movf	operation@keypress,w,c
  1694  00015E  0D01               	mullw	1
  1695  000160  0EB1               	movlw	low _keys
  1696  000162  24F3               	addwf	prodl,w,c
  1697  000164  6EF6               	movwf	tblptrl,c
  1698  000166  0EFD               	movlw	high _keys
  1699  000168  20F4               	addwfc	prodh,w,c
  1700  00016A  6EF7               	movwf	tblptrh,c
  1701  00016C                     	if	0	;There are less than 3 active tblptr bytes
  1702  00016C                     	endif
  1703  00016C  0008               	tblrd		*
  1704  00016E  50F5               	movf	tablat,w,c
  1705  000170  ECF9  F007         	call	_putch
  1706                           
  1707                           ;main.c: 181: switch (keypress) {
  1708  000174  D00D               	goto	l179
  1709  000176                     
  1710                           ;main.c: 183: prescription[0] = 1;
  1711  000176  0E00               	movlw	0
  1712  000178  6E46               	movwf	operation@prescription+1,c
  1713  00017A  0E01               	movlw	1
  1714  00017C  D007               	goto	L2
  1715  00017E                     
  1716                           ;main.c: 186: prescription[0] = 2;
  1717  00017E  0E00               	movlw	0
  1718  000180  6E46               	movwf	operation@prescription+1,c
  1719  000182  0E02               	movlw	2
  1720  000184  D003               	goto	L2
  1721  000186                     
  1722                           ;main.c: 189: prescription[0] = 0;
  1723  000186  0E00               	movlw	0
  1724  000188  6E46               	movwf	operation@prescription+1,c
  1725  00018A  0E00               	movlw	0
  1726  00018C                     L2:
  1727  00018C  6E45               	movwf	operation@prescription,c
  1728                           
  1729                           ;main.c: 191: }
  1730                           
  1731                           ;main.c: 190: break;
  1732  00018E  D7CE               	goto	l169
  1733  000190                     l179:
  1734  000190  5040               	movf	operation@keypress,w,c
  1735                           
  1736                           ; Switch size 1, requested type "space"
  1737                           ; Number of cases is 3, Range of values is 0 to 13
  1738                           ; switch strategies available:
  1739                           ; Name         Instructions Cycles
  1740                           ; simple_byte           10     6 (average)
  1741                           ;	Chosen strategy is simple_byte
  1742  000192  0A00               	xorlw	0	; case 0
  1743  000194  B4D8               	btfsc	status,2,c
  1744  000196  D7EF               	goto	l180
  1745  000198  0A01               	xorlw	1	; case 1
  1746  00019A  B4D8               	btfsc	status,2,c
  1747  00019C  D7F0               	goto	l182
  1748  00019E  0A0C               	xorlw	12	; case 13
  1749  0001A0  B4D8               	btfsc	status,2,c
  1750  0001A2  D7F1               	goto	l183
  1751                           
  1752                           ;main.c: 192: }
  1753  0001A4  D7C3               	goto	l169
  1754  0001A6                     l176:
  1755                           
  1756                           ;main.c: 193: else if (keypress == 14) {
  1757  0001A6  0E0E               	movlw	14
  1758  0001A8  1840               	xorwf	operation@keypress,w,c
  1759  0001AA  A4D8               	btfss	status,2,c
  1760  0001AC  D7BF               	goto	l169
  1761                           
  1762                           ;main.c: 194: if (prescription[0] != -1) {
  1763  0001AE  2845               	incf	operation@prescription,w,c
  1764  0001B0  E103               	bnz	u1410
  1765  0001B2  2846               	incf	operation@prescription+1,w,c
  1766  0001B4  B4D8               	btfsc	status,2,c
  1767  0001B6  D7BA               	goto	l169
  1768  0001B8                     u1410:
  1769                           
  1770                           ;main.c: 195: lcd_set_cursor(6, 2);
  1771  0001B8  0E02               	movlw	2
  1772  0001BA  6E1A               	movwf	lcd_set_cursor@y,c
  1773  0001BC  0E06               	movlw	6
  1774  0001BE  EC9D  F006         	call	_lcd_set_cursor
  1775  0001C2                     
  1776                           ;main.c: 203: continue;
  1777                           
  1778                           ;main.c: 202: while (PORTBbits.RB1 == 0) {
  1779                           
  1780                           ;main.c: 197: }
  1781                           ;main.c: 198: }
  1782                           ;main.c: 199: }
  1783                           ;main.c: 201: while (1) {
  1784  0001C2  A281               	btfss	3969,1,c	;volatile
  1785  0001C4  D7FE               	goto	l187
  1786                           
  1787                           ;main.c: 204: }
  1788                           ;main.c: 206: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1789  0001C6  3881               	swapf	3969,w,c	;volatile
  1790  0001C8  0B0F               	andlw	15
  1791  0001CA  0B0F               	andlw	15
  1792  0001CC  6E41               	movwf	operation@keypress_387,c
  1793  0001CE                     
  1794                           ;main.c: 209: continue;
  1795  0001CE  B281               	btfsc	3969,1,c	;volatile
  1796  0001D0  D7FE               	goto	l194
  1797                           
  1798                           ;main.c: 210: }
  1799                           ;main.c: 212: __nop();
  1800  0001D2  F000               	nop	
  1801                           
  1802                           ;main.c: 214: if (keypress == 0 || keypress == 1 || keypress == 13) {
  1803  0001D4  5041               	movf	operation@keypress_387,w,c
  1804  0001D6  B4D8               	btfsc	status,2,c
  1805  0001D8  D007               	goto	u1460
  1806  0001DA  0441               	decf	operation@keypress_387,w,c
  1807  0001DC  B4D8               	btfsc	status,2,c
  1808  0001DE  D004               	goto	u1460
  1809  0001E0  0E0D               	movlw	13
  1810  0001E2  1841               	xorwf	operation@keypress_387,w,c
  1811  0001E4  A4D8               	btfss	status,2,c
  1812  0001E6  D02A               	goto	l196
  1813  0001E8                     u1460:
  1814                           
  1815                           ;main.c: 215: lcd_set_cursor(6, 2);
  1816  0001E8  0E02               	movlw	2
  1817  0001EA  6E1A               	movwf	lcd_set_cursor@y,c
  1818  0001EC  0E06               	movlw	6
  1819  0001EE  EC9D  F006         	call	_lcd_set_cursor
  1820                           
  1821                           ;main.c: 216: putch(keys[keypress]);
  1822  0001F2  5041               	movf	operation@keypress_387,w,c
  1823  0001F4  0D01               	mullw	1
  1824  0001F6  0EB1               	movlw	low _keys
  1825  0001F8  24F3               	addwf	prodl,w,c
  1826  0001FA  6EF6               	movwf	tblptrl,c
  1827  0001FC  0EFD               	movlw	high _keys
  1828  0001FE  20F4               	addwfc	prodh,w,c
  1829  000200  6EF7               	movwf	tblptrh,c
  1830  000202                     	if	0	;There are less than 3 active tblptr bytes
  1831  000202                     	endif
  1832  000202  0008               	tblrd		*
  1833  000204  50F5               	movf	tablat,w,c
  1834  000206  ECF9  F007         	call	_putch
  1835                           
  1836                           ;main.c: 218: switch (keypress) {
  1837  00020A  D00D               	goto	l199
  1838  00020C                     
  1839                           ;main.c: 220: prescription[1] = 1;
  1840  00020C  0E00               	movlw	0
  1841  00020E  6E48               	movwf	operation@prescription+3,c
  1842  000210  0E01               	movlw	1
  1843  000212  D007               	goto	L4
  1844  000214                     
  1845                           ;main.c: 223: prescription[1] = 2;
  1846  000214  0E00               	movlw	0
  1847  000216  6E48               	movwf	operation@prescription+3,c
  1848  000218  0E02               	movlw	2
  1849  00021A  D003               	goto	L4
  1850  00021C                     
  1851                           ;main.c: 226: prescription[1] = 0;
  1852  00021C  0E00               	movlw	0
  1853  00021E  6E48               	movwf	operation@prescription+3,c
  1854  000220  0E00               	movlw	0
  1855  000222                     L4:
  1856  000222  6E47               	movwf	operation@prescription+2,c
  1857                           
  1858                           ;main.c: 228: }
  1859                           
  1860                           ;main.c: 227: break;
  1861  000224  D7CE               	goto	l187
  1862  000226                     l199:
  1863  000226  5041               	movf	operation@keypress_387,w,c
  1864                           
  1865                           ; Switch size 1, requested type "space"
  1866                           ; Number of cases is 3, Range of values is 0 to 13
  1867                           ; switch strategies available:
  1868                           ; Name         Instructions Cycles
  1869                           ; simple_byte           10     6 (average)
  1870                           ;	Chosen strategy is simple_byte
  1871  000228  0A00               	xorlw	0	; case 0
  1872  00022A  B4D8               	btfsc	status,2,c
  1873  00022C  D7EF               	goto	l200
  1874  00022E  0A01               	xorlw	1	; case 1
  1875  000230  B4D8               	btfsc	status,2,c
  1876  000232  D7F0               	goto	l202
  1877  000234  0A0C               	xorlw	12	; case 13
  1878  000236  B4D8               	btfsc	status,2,c
  1879  000238  D7F1               	goto	l203
  1880                           
  1881                           ;main.c: 229: }
  1882  00023A  D7C3               	goto	l187
  1883  00023C                     l196:
  1884                           
  1885                           ;main.c: 230: else if (keypress == 14) {
  1886  00023C  0E0E               	movlw	14
  1887  00023E  1841               	xorwf	operation@keypress_387,w,c
  1888  000240  A4D8               	btfss	status,2,c
  1889  000242  D7BF               	goto	l187
  1890                           
  1891                           ;main.c: 231: if (prescription[1] != -1) {
  1892  000244  2847               	incf	operation@prescription+2,w,c
  1893  000246  E103               	bnz	u1480
  1894  000248  2848               	incf	operation@prescription+3,w,c
  1895  00024A  B4D8               	btfsc	status,2,c
  1896  00024C  D7BA               	goto	l187
  1897  00024E                     u1480:
  1898                           
  1899                           ;main.c: 232: lcd_set_cursor(6, 3);
  1900  00024E  0E03               	movlw	3
  1901  000250  6E1A               	movwf	lcd_set_cursor@y,c
  1902  000252  0E06               	movlw	6
  1903  000254  EC9D  F006         	call	_lcd_set_cursor
  1904  000258                     
  1905                           ;main.c: 240: continue;
  1906                           
  1907                           ;main.c: 239: while (PORTBbits.RB1 == 0) {
  1908                           
  1909                           ;main.c: 234: }
  1910                           ;main.c: 235: }
  1911                           ;main.c: 236: }
  1912                           ;main.c: 238: while (1) {
  1913  000258  A281               	btfss	3969,1,c	;volatile
  1914  00025A  D7FE               	goto	l207
  1915                           
  1916                           ;main.c: 241: }
  1917                           ;main.c: 243: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1918  00025C  3881               	swapf	3969,w,c	;volatile
  1919  00025E  0B0F               	andlw	15
  1920  000260  0B0F               	andlw	15
  1921  000262  6E43               	movwf	operation@keypress_388,c
  1922  000264                     
  1923                           ;main.c: 246: continue;
  1924  000264  B281               	btfsc	3969,1,c	;volatile
  1925  000266  D7FE               	goto	l214
  1926                           
  1927                           ;main.c: 247: }
  1928                           ;main.c: 249: __nop();
  1929  000268  F000               	nop	
  1930                           
  1931                           ;main.c: 251: if (keypress == 0 || keypress == 1 || keypress == 2 || keypress == 13) {
  1932  00026A  5043               	movf	operation@keypress_388,w,c
  1933  00026C  B4D8               	btfsc	status,2,c
  1934  00026E  D00B               	goto	u1540
  1935  000270  0443               	decf	operation@keypress_388,w,c
  1936  000272  B4D8               	btfsc	status,2,c
  1937  000274  D008               	goto	u1540
  1938  000276  0E02               	movlw	2
  1939  000278  1843               	xorwf	operation@keypress_388,w,c
  1940  00027A  B4D8               	btfsc	status,2,c
  1941  00027C  D004               	goto	u1540
  1942  00027E  0E0D               	movlw	13
  1943  000280  1843               	xorwf	operation@keypress_388,w,c
  1944  000282  A4D8               	btfss	status,2,c
  1945  000284  D031               	goto	l216
  1946  000286                     u1540:
  1947                           
  1948                           ;main.c: 252: lcd_set_cursor(6, 3);
  1949  000286  0E03               	movlw	3
  1950  000288  6E1A               	movwf	lcd_set_cursor@y,c
  1951  00028A  0E06               	movlw	6
  1952  00028C  EC9D  F006         	call	_lcd_set_cursor
  1953                           
  1954                           ;main.c: 253: putch(keys[keypress]);
  1955  000290  5043               	movf	operation@keypress_388,w,c
  1956  000292  0D01               	mullw	1
  1957  000294  0EB1               	movlw	low _keys
  1958  000296  24F3               	addwf	prodl,w,c
  1959  000298  6EF6               	movwf	tblptrl,c
  1960  00029A  0EFD               	movlw	high _keys
  1961  00029C  20F4               	addwfc	prodh,w,c
  1962  00029E  6EF7               	movwf	tblptrh,c
  1963  0002A0                     	if	0	;There are less than 3 active tblptr bytes
  1964  0002A0                     	endif
  1965  0002A0  0008               	tblrd		*
  1966  0002A2  50F5               	movf	tablat,w,c
  1967  0002A4  ECF9  F007         	call	_putch
  1968                           
  1969                           ;main.c: 255: switch (keypress) {
  1970  0002A8  D011               	goto	l219
  1971  0002AA                     
  1972                           ;main.c: 257: prescription[2] = 1;
  1973  0002AA  0E00               	movlw	0
  1974  0002AC  6E4A               	movwf	operation@prescription+5,c
  1975  0002AE  0E01               	movlw	1
  1976  0002B0  D00B               	goto	L7
  1977  0002B2                     
  1978                           ;main.c: 260: prescription[2] = 2;
  1979  0002B2  0E00               	movlw	0
  1980  0002B4  6E4A               	movwf	operation@prescription+5,c
  1981  0002B6  0E02               	movlw	2
  1982  0002B8  D007               	goto	L7
  1983  0002BA                     
  1984                           ;main.c: 263: prescription[2] = 3;
  1985  0002BA  0E00               	movlw	0
  1986  0002BC  6E4A               	movwf	operation@prescription+5,c
  1987  0002BE  0E03               	movlw	3
  1988  0002C0  D003               	goto	L7
  1989  0002C2                     
  1990                           ;main.c: 266: prescription[2] = 0;
  1991  0002C2  0E00               	movlw	0
  1992  0002C4  6E4A               	movwf	operation@prescription+5,c
  1993  0002C6  0E00               	movlw	0
  1994  0002C8                     L7:
  1995  0002C8  6E49               	movwf	operation@prescription+4,c
  1996                           
  1997                           ;main.c: 268: }
  1998                           
  1999                           ;main.c: 267: break;
  2000  0002CA  D7C6               	goto	l207
  2001  0002CC                     l219:
  2002  0002CC  5043               	movf	operation@keypress_388,w,c
  2003                           
  2004                           ; Switch size 1, requested type "space"
  2005                           ; Number of cases is 4, Range of values is 0 to 13
  2006                           ; switch strategies available:
  2007                           ; Name         Instructions Cycles
  2008                           ; simple_byte           13     7 (average)
  2009                           ;	Chosen strategy is simple_byte
  2010  0002CE  0A00               	xorlw	0	; case 0
  2011  0002D0  B4D8               	btfsc	status,2,c
  2012  0002D2  D7EB               	goto	l220
  2013  0002D4  0A01               	xorlw	1	; case 1
  2014  0002D6  B4D8               	btfsc	status,2,c
  2015  0002D8  D7EC               	goto	l222
  2016  0002DA  0A03               	xorlw	3	; case 2
  2017  0002DC  B4D8               	btfsc	status,2,c
  2018  0002DE  D7ED               	goto	l223
  2019  0002E0  0A0F               	xorlw	15	; case 13
  2020  0002E2  B4D8               	btfsc	status,2,c
  2021  0002E4  D7EE               	goto	l224
  2022                           
  2023                           ;main.c: 269: }
  2024  0002E6  D7B8               	goto	l207
  2025  0002E8                     l216:
  2026                           
  2027                           ;main.c: 270: else if (keypress == 14) {
  2028  0002E8  0E0E               	movlw	14
  2029  0002EA  1843               	xorwf	operation@keypress_388,w,c
  2030  0002EC  A4D8               	btfss	status,2,c
  2031  0002EE  D7B4               	goto	l207
  2032                           
  2033                           ;main.c: 271: if (prescription[2] != -1) {
  2034  0002F0  2849               	incf	operation@prescription+4,w,c
  2035  0002F2  E103               	bnz	l2248
  2036  0002F4  284A               	incf	operation@prescription+5,w,c
  2037  0002F6  B4D8               	btfsc	status,2,c
  2038  0002F8  D7AF               	goto	l207
  2039  0002FA                     l2248:
  2040                           
  2041                           ;main.c: 273: }
  2042                           ;main.c: 274: }
  2043                           ;main.c: 275: }
  2044                           ;main.c: 277: if ((prescription[0] + prescription[1] + prescription[2]) <= 4) {
  2045  0002FA  5049               	movf	operation@prescription+4,w,c
  2046  0002FC  2447               	addwf	operation@prescription+2,w,c
  2047  0002FE  6E3C               	movwf	??_operation& (0+255),c
  2048  000300  504A               	movf	operation@prescription+5,w,c
  2049  000302  2048               	addwfc	operation@prescription+3,w,c
  2050  000304  6E3D               	movwf	(??_operation+1)& (0+255),c
  2051  000306  5045               	movf	operation@prescription,w,c
  2052  000308  263C               	addwf	??_operation,f,c
  2053  00030A  5046               	movf	operation@prescription+1,w,c
  2054  00030C  223D               	addwfc	??_operation+1,f,c
  2055  00030E  BE3D               	btfsc	??_operation+1,7,c
  2056  000310  D032               	goto	l231
  2057  000312  503D               	movf	??_operation+1,w,c
  2058  000314  E104               	bnz	l2254
  2059  000316  0E05               	movlw	5
  2060  000318  5C3C               	subwf	??_operation,w,c
  2061  00031A  A0D8               	btfss	status,0,c
  2062  00031C  D02C               	goto	l231
  2063  00031E                     l2254:
  2064                           
  2065                           ;main.c: 280: else {
  2066                           ;main.c: 281: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2067  00031E  0E0C               	movlw	12
  2068  000320  EC03  F008         	call	_lcdInst
  2069                           
  2070                           ;main.c: 282: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2071  000324  0E01               	movlw	1
  2072  000326  EC03  F008         	call	_lcdInst
  2073  00032A  0EC3               	movlw	195
  2074  00032C  6E3C               	movwf	??_operation& (0+255),c
  2075  00032E  0ECD               	movlw	205
  2076  000330                     u1867:
  2077  000330  2EE8               	decfsz	wreg,f,c
  2078  000332  D7FE               	bra	u1867
  2079  000334  2E3C               	decfsz	??_operation& (0+255),f,c
  2080  000336  D7FC               	bra	u1867
  2081  000338  F000               	nop	
  2082                           
  2083                           ;main.c: 283: lcdInst(0xC0);;
  2084  00033A  0EC0               	movlw	192
  2085  00033C  EC03  F008         	call	_lcdInst
  2086                           
  2087                           ;main.c: 284: printf("   INVALID INPUT    ");
  2088  000340  0E56               	movlw	low STR_11
  2089  000342  6E20               	movwf	printf@f,c
  2090  000344  0EFE               	movlw	high STR_11
  2091  000346  6E21               	movwf	printf@f+1,c
  2092  000348  EC77  F003         	call	_printf	;wreg free
  2093                           
  2094                           ;main.c: 285: lcdInst(0x94);;
  2095  00034C  0E94               	movlw	148
  2096  00034E  EC03  F008         	call	_lcdInst
  2097                           
  2098                           ;main.c: 286: printf("     TRY AGAIN      ");
  2099  000352  0E17               	movlw	low STR_12
  2100  000354  6E20               	movwf	printf@f,c
  2101  000356  0EFE               	movlw	high STR_12
  2102  000358  6E21               	movwf	printf@f+1,c
  2103  00035A  EC77  F003         	call	_printf	;wreg free
  2104                           
  2105                           ;main.c: 287: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2106  00035E  0E33               	movlw	51
  2107  000360  6E3D               	movwf	(??_operation+1)& (0+255),c
  2108  000362  0EBB               	movlw	187
  2109  000364  6E3C               	movwf	??_operation& (0+255),c
  2110  000366  0EE0               	movlw	224
  2111  000368                     u1877:
  2112  000368  2EE8               	decfsz	wreg,f,c
  2113  00036A  D7FE               	bra	u1877
  2114  00036C  2E3C               	decfsz	??_operation& (0+255),f,c
  2115  00036E  D7FC               	bra	u1877
  2116  000370  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  2117  000372  D7FA               	bra	u1877
  2118  000374  D696               	goto	l168
  2119  000376                     l231:
  2120                           
  2121                           ;main.c: 288: }
  2122                           ;main.c: 289: }
  2123                           ;main.c: 294: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2124  000376  0E01               	movlw	1
  2125  000378  EC03  F008         	call	_lcdInst
  2126  00037C  0EC3               	movlw	195
  2127  00037E  6E3C               	movwf	??_operation& (0+255),c
  2128  000380  0ECD               	movlw	205
  2129  000382                     u1887:
  2130  000382  2EE8               	decfsz	wreg,f,c
  2131  000384  D7FE               	bra	u1887
  2132  000386  2E3C               	decfsz	??_operation& (0+255),f,c
  2133  000388  D7FC               	bra	u1887
  2134  00038A  F000               	nop	
  2135                           
  2136                           ;main.c: 295: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2137  00038C  0E80               	movlw	128
  2138  00038E  EC03  F008         	call	_lcdInst
  2139  000392  0E41               	movlw	65
  2140  000394  6E3C               	movwf	??_operation& (0+255),c
  2141  000396  0EEE               	movlw	238
  2142  000398                     u1897:
  2143  000398  2EE8               	decfsz	wreg,f,c
  2144  00039A  D7FE               	bra	u1897
  2145  00039C  2E3C               	decfsz	??_operation& (0+255),f,c
  2146  00039E  D7FC               	bra	u1897
  2147  0003A0  D000               	nop2	
  2148                           
  2149                           ;main.c: 296: printf("Repetition: ");
  2150  0003A2  0E85               	movlw	low STR_13
  2151  0003A4  6E20               	movwf	printf@f,c
  2152  0003A6  0EFF               	movlw	high STR_13
  2153  0003A8  6E21               	movwf	printf@f+1,c
  2154  0003AA  EC77  F003         	call	_printf	;wreg free
  2155                           
  2156                           ;main.c: 297: lcdInst(0xC0);;
  2157  0003AE  0EC0               	movlw	192
  2158  0003B0  EC03  F008         	call	_lcdInst
  2159                           
  2160                           ;main.c: 298: printf("(1)Morning");
  2161  0003B4  0EC5               	movlw	low STR_14
  2162  0003B6  6E20               	movwf	printf@f,c
  2163  0003B8  0EFF               	movlw	high STR_14
  2164  0003BA  6E21               	movwf	printf@f+1,c
  2165  0003BC  EC77  F003         	call	_printf	;wreg free
  2166                           
  2167                           ;main.c: 299: lcdInst(0x94);;
  2168  0003C0  0E94               	movlw	148
  2169  0003C2  EC03  F008         	call	_lcdInst
  2170                           
  2171                           ;main.c: 300: printf("(2)Afternoon");
  2172  0003C6  0E92               	movlw	low STR_15
  2173  0003C8  6E20               	movwf	printf@f,c
  2174  0003CA  0EFF               	movlw	high STR_15
  2175  0003CC  6E21               	movwf	printf@f+1,c
  2176  0003CE  EC77  F003         	call	_printf	;wreg free
  2177                           
  2178                           ;main.c: 301: lcdInst(0xD4);;
  2179  0003D2  0ED4               	movlw	212
  2180  0003D4  EC03  F008         	call	_lcdInst
  2181                           
  2182                           ;main.c: 302: printf("(3)Both (4)Alternate");
  2183  0003D8  0EBF               	movlw	low STR_16
  2184  0003DA  6E20               	movwf	printf@f,c
  2185  0003DC  0EFE               	movlw	high STR_16
  2186  0003DE  6E21               	movwf	printf@f+1,c
  2187  0003E0  EC77  F003         	call	_printf	;wreg free
  2188                           
  2189                           ;main.c: 303: lcd_set_cursor(12, 0);
  2190  0003E4  0E00               	movlw	0
  2191  0003E6  6E1A               	movwf	lcd_set_cursor@y,c
  2192  0003E8  0E0C               	movlw	12
  2193  0003EA  EC9D  F006         	call	_lcd_set_cursor
  2194  0003EE                     
  2195                           ;main.c: 307: continue;
  2196                           
  2197                           ;main.c: 306: while (PORTBbits.RB1 == 0) {
  2198  0003EE  A281               	btfss	3969,1,c	;volatile
  2199  0003F0  D7FE               	goto	l234
  2200                           
  2201                           ;main.c: 308: }
  2202                           ;main.c: 310: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2203  0003F2  3881               	swapf	3969,w,c	;volatile
  2204  0003F4  0B0F               	andlw	15
  2205  0003F6  0B0F               	andlw	15
  2206  0003F8  6E44               	movwf	operation@keypress_395,c
  2207  0003FA                     
  2208                           ;main.c: 313: continue;
  2209  0003FA  B281               	btfsc	3969,1,c	;volatile
  2210  0003FC  D7FE               	goto	l239
  2211                           
  2212                           ;main.c: 314: }
  2213                           ;main.c: 316: __nop();
  2214  0003FE  F000               	nop	
  2215                           
  2216                           ;main.c: 318: if (keypress == 0 || keypress == 1 || keypress == 2 || keypress == 4) {
  2217  000400  5044               	movf	operation@keypress_395,w,c
  2218  000402  B4D8               	btfsc	status,2,c
  2219  000404  D00B               	goto	u1630
  2220  000406  0444               	decf	operation@keypress_395,w,c
  2221  000408  B4D8               	btfsc	status,2,c
  2222  00040A  D008               	goto	u1630
  2223  00040C  0E02               	movlw	2
  2224  00040E  1844               	xorwf	operation@keypress_395,w,c
  2225  000410  B4D8               	btfsc	status,2,c
  2226  000412  D004               	goto	u1630
  2227  000414  0E04               	movlw	4
  2228  000416  1844               	xorwf	operation@keypress_395,w,c
  2229  000418  A4D8               	btfss	status,2,c
  2230  00041A  D02B               	goto	l241
  2231  00041C                     u1630:
  2232                           
  2233                           ;main.c: 319: lcd_set_cursor(12, 0);
  2234  00041C  0E00               	movlw	0
  2235  00041E  6E1A               	movwf	lcd_set_cursor@y,c
  2236  000420  0E0C               	movlw	12
  2237  000422  EC9D  F006         	call	_lcd_set_cursor
  2238                           
  2239                           ;main.c: 320: putch(keys[keypress]);
  2240  000426  5044               	movf	operation@keypress_395,w,c
  2241  000428  0D01               	mullw	1
  2242  00042A  0EB1               	movlw	low _keys
  2243  00042C  24F3               	addwf	prodl,w,c
  2244  00042E  6EF6               	movwf	tblptrl,c
  2245  000430  0EFD               	movlw	high _keys
  2246  000432  20F4               	addwfc	prodh,w,c
  2247  000434  6EF7               	movwf	tblptrh,c
  2248  000436                     	if	0	;There are less than 3 active tblptr bytes
  2249  000436                     	endif
  2250  000436  0008               	tblrd		*
  2251  000438  50F5               	movf	tablat,w,c
  2252  00043A  ECF9  F007         	call	_putch
  2253                           
  2254                           ;main.c: 322: switch(keypress) {
  2255  00043E  D00B               	goto	l244
  2256  000440                     
  2257                           ;main.c: 324: repetition = morning;
  2258  000440  0E00               	movlw	0
  2259  000442  D007               	goto	L11
  2260  000444                     
  2261                           ;main.c: 327: repetition = afternoon;
  2262  000444  0E01               	movlw	1
  2263  000446  D005               	goto	L11
  2264  000448                     
  2265                           ;main.c: 330: repetition = both;
  2266  000448  0E03               	movlw	3
  2267  00044A  D003               	goto	L11
  2268  00044C                     
  2269                           ;main.c: 333: repetition = alt;
  2270  00044C  0E02               	movlw	2
  2271  00044E  D001               	goto	L11
  2272  000450                     
  2273                           ;main.c: 336: repetition = na_rep;
  2274  000450  0E04               	movlw	4
  2275  000452                     L11:
  2276  000452  6E3F               	movwf	operation@repetition,c
  2277                           
  2278                           ;main.c: 338: }
  2279                           
  2280                           ;main.c: 337: break;
  2281  000454  D7CC               	goto	l234
  2282  000456                     l244:
  2283  000456  5044               	movf	operation@keypress_395,w,c
  2284                           
  2285                           ; Switch size 1, requested type "space"
  2286                           ; Number of cases is 4, Range of values is 0 to 4
  2287                           ; switch strategies available:
  2288                           ; Name         Instructions Cycles
  2289                           ; simple_byte           13     7 (average)
  2290                           ;	Chosen strategy is simple_byte
  2291  000458  0A00               	xorlw	0	; case 0
  2292  00045A  B4D8               	btfsc	status,2,c
  2293  00045C  D7F1               	goto	l245
  2294  00045E  0A01               	xorlw	1	; case 1
  2295  000460  B4D8               	btfsc	status,2,c
  2296  000462  D7F0               	goto	l247
  2297  000464  0A03               	xorlw	3	; case 2
  2298  000466  B4D8               	btfsc	status,2,c
  2299  000468  D7EF               	goto	l248
  2300  00046A  0A06               	xorlw	6	; case 4
  2301  00046C  B4D8               	btfsc	status,2,c
  2302  00046E  D7EE               	goto	l249
  2303  000470  D7EF               	goto	l250
  2304  000472                     l241:
  2305                           
  2306                           ;main.c: 340: else if (keypress == 14) {
  2307  000472  0E0E               	movlw	14
  2308  000474  1844               	xorwf	operation@keypress_395,w,c
  2309  000476  A4D8               	btfss	status,2,c
  2310  000478  D7BA               	goto	l234
  2311                           
  2312                           ;main.c: 341: if (repetition != na_rep) {
  2313  00047A  0E04               	movlw	4
  2314  00047C  183F               	xorwf	operation@repetition,w,c
  2315  00047E  B4D8               	btfsc	status,2,c
  2316  000480  D7B6               	goto	l234
  2317                           
  2318                           ;main.c: 343: }
  2319                           ;main.c: 344: }
  2320                           ;main.c: 345: }
  2321                           ;main.c: 351: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2322                           
  2323                           ;main.c: 342: break;
  2324  000482  0E01               	movlw	1
  2325  000484  EC03  F008         	call	_lcdInst
  2326  000488  0EC3               	movlw	195
  2327  00048A  6E3C               	movwf	??_operation& (0+255),c
  2328  00048C  0ECD               	movlw	205
  2329  00048E                     u1907:
  2330  00048E  2EE8               	decfsz	wreg,f,c
  2331  000490  D7FE               	bra	u1907
  2332  000492  2E3C               	decfsz	??_operation& (0+255),f,c
  2333  000494  D7FC               	bra	u1907
  2334  000496  F000               	nop	
  2335                           
  2336                           ;main.c: 352: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2337  000498  0E80               	movlw	128
  2338  00049A  EC03  F008         	call	_lcdInst
  2339  00049E  0E41               	movlw	65
  2340  0004A0  6E3C               	movwf	??_operation& (0+255),c
  2341  0004A2  0EEE               	movlw	238
  2342  0004A4                     u1917:
  2343  0004A4  2EE8               	decfsz	wreg,f,c
  2344  0004A6  D7FE               	bra	u1917
  2345  0004A8  2E3C               	decfsz	??_operation& (0+255),f,c
  2346  0004AA  D7FC               	bra	u1917
  2347  0004AC  D000               	nop2	
  2348                           
  2349                           ;main.c: 353: printf("Frequency: ");
  2350  0004AE  0EB9               	movlw	low STR_17
  2351  0004B0  6E20               	movwf	printf@f,c
  2352  0004B2  0EFF               	movlw	high STR_17
  2353  0004B4  6E21               	movwf	printf@f+1,c
  2354  0004B6  EC77  F003         	call	_printf	;wreg free
  2355                           
  2356                           ;main.c: 354: lcdInst(0xC0);;
  2357  0004BA  0EC0               	movlw	192
  2358  0004BC  EC03  F008         	call	_lcdInst
  2359                           
  2360                           ;main.c: 355: printf("(1) Everyday");
  2361  0004C0  0EAC               	movlw	low STR_18
  2362  0004C2  6E20               	movwf	printf@f,c
  2363  0004C4  0EFF               	movlw	high STR_18
  2364  0004C6  6E21               	movwf	printf@f+1,c
  2365  0004C8  EC77  F003         	call	_printf	;wreg free
  2366                           
  2367                           ;main.c: 356: lcdInst(0x94);;
  2368  0004CC  0E94               	movlw	148
  2369  0004CE  EC03  F008         	call	_lcdInst
  2370                           
  2371                           ;main.c: 357: printf("(2) Alternate (Sun)");
  2372  0004D2  0EE8               	movlw	low STR_19
  2373  0004D4  6E20               	movwf	printf@f,c
  2374  0004D6  0EFE               	movlw	high STR_19
  2375  0004D8  6E21               	movwf	printf@f+1,c
  2376  0004DA  EC77  F003         	call	_printf	;wreg free
  2377                           
  2378                           ;main.c: 358: lcdInst(0xD4);;
  2379  0004DE  0ED4               	movlw	212
  2380  0004E0  EC03  F008         	call	_lcdInst
  2381                           
  2382                           ;main.c: 359: printf("(3) Alternate (Mon)");
  2383  0004E4  0ED4               	movlw	low STR_20
  2384  0004E6  6E20               	movwf	printf@f,c
  2385  0004E8  0EFE               	movlw	high STR_20
  2386  0004EA  6E21               	movwf	printf@f+1,c
  2387  0004EC  EC77  F003         	call	_printf	;wreg free
  2388                           
  2389                           ;main.c: 360: lcd_set_cursor(11, 0);
  2390  0004F0  0E00               	movlw	0
  2391  0004F2  6E1A               	movwf	lcd_set_cursor@y,c
  2392  0004F4  0E0B               	movlw	11
  2393  0004F6  EC9D  F006         	call	_lcd_set_cursor
  2394  0004FA                     
  2395                           ;main.c: 364: continue;
  2396                           
  2397                           ;main.c: 363: while (PORTBbits.RB1 == 0) {
  2398  0004FA  A281               	btfss	3969,1,c	;volatile
  2399  0004FC  D7FE               	goto	l256
  2400                           
  2401                           ;main.c: 365: }
  2402                           ;main.c: 367: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2403  0004FE  3881               	swapf	3969,w,c	;volatile
  2404  000500  0B0F               	andlw	15
  2405  000502  0B0F               	andlw	15
  2406  000504  6E42               	movwf	operation@keypress_400,c
  2407  000506                     
  2408                           ;main.c: 370: continue;
  2409  000506  B281               	btfsc	3969,1,c	;volatile
  2410  000508  D7FE               	goto	l261
  2411                           
  2412                           ;main.c: 371: }
  2413                           ;main.c: 373: __nop();
  2414  00050A  F000               	nop	
  2415                           
  2416                           ;main.c: 375: if (keypress == 0 || keypress == 1 || keypress == 2) {
  2417  00050C  5042               	movf	operation@keypress_400,w,c
  2418  00050E  B4D8               	btfsc	status,2,c
  2419  000510  D007               	goto	u1700
  2420  000512  0442               	decf	operation@keypress_400,w,c
  2421  000514  B4D8               	btfsc	status,2,c
  2422  000516  D004               	goto	u1700
  2423  000518  0E02               	movlw	2
  2424  00051A  1842               	xorwf	operation@keypress_400,w,c
  2425  00051C  A4D8               	btfss	status,2,c
  2426  00051E  D026               	goto	l263
  2427  000520                     u1700:
  2428                           
  2429                           ;main.c: 376: lcd_set_cursor(11, 0);
  2430  000520  0E00               	movlw	0
  2431  000522  6E1A               	movwf	lcd_set_cursor@y,c
  2432  000524  0E0B               	movlw	11
  2433  000526  EC9D  F006         	call	_lcd_set_cursor
  2434                           
  2435                           ;main.c: 377: putch(keys[keypress]);
  2436  00052A  5042               	movf	operation@keypress_400,w,c
  2437  00052C  0D01               	mullw	1
  2438  00052E  0EB1               	movlw	low _keys
  2439  000530  24F3               	addwf	prodl,w,c
  2440  000532  6EF6               	movwf	tblptrl,c
  2441  000534  0EFD               	movlw	high _keys
  2442  000536  20F4               	addwfc	prodh,w,c
  2443  000538  6EF7               	movwf	tblptrh,c
  2444  00053A                     	if	0	;There are less than 3 active tblptr bytes
  2445  00053A                     	endif
  2446  00053A  0008               	tblrd		*
  2447  00053C  50F5               	movf	tablat,w,c
  2448  00053E  ECF9  F007         	call	_putch
  2449                           
  2450                           ;main.c: 379: switch(keypress) {
  2451  000542  D009               	goto	l266
  2452  000544                     
  2453                           ;main.c: 381: frequency = every;
  2454  000544  0E00               	movlw	0
  2455  000546  D005               	goto	L14
  2456  000548                     
  2457                           ;main.c: 384: frequency = alt_sun;
  2458  000548  0E01               	movlw	1
  2459  00054A  D003               	goto	L14
  2460  00054C                     
  2461                           ;main.c: 387: frequency = alt_mon;
  2462  00054C  0E02               	movlw	2
  2463  00054E  D001               	goto	L14
  2464  000550                     
  2465                           ;main.c: 390: frequency = na_freq;
  2466  000550  0E03               	movlw	3
  2467  000552                     L14:
  2468  000552  6E3E               	movwf	operation@frequency,c
  2469                           
  2470                           ;main.c: 392: }
  2471                           
  2472                           ;main.c: 391: break;
  2473  000554  D7D2               	goto	l256
  2474  000556                     l266:
  2475  000556  5042               	movf	operation@keypress_400,w,c
  2476                           
  2477                           ; Switch size 1, requested type "space"
  2478                           ; Number of cases is 3, Range of values is 0 to 2
  2479                           ; switch strategies available:
  2480                           ; Name         Instructions Cycles
  2481                           ; simple_byte           10     6 (average)
  2482                           ;	Chosen strategy is simple_byte
  2483  000558  0A00               	xorlw	0	; case 0
  2484  00055A  B4D8               	btfsc	status,2,c
  2485  00055C  D7F3               	goto	l267
  2486  00055E  0A01               	xorlw	1	; case 1
  2487  000560  B4D8               	btfsc	status,2,c
  2488  000562  D7F2               	goto	l269
  2489  000564  0A03               	xorlw	3	; case 2
  2490  000566  B4D8               	btfsc	status,2,c
  2491  000568  D7F1               	goto	l270
  2492  00056A  D7F2               	goto	l271
  2493  00056C                     l263:
  2494                           
  2495                           ;main.c: 394: else if (keypress == 14) {
  2496  00056C  0E0E               	movlw	14
  2497  00056E  1842               	xorwf	operation@keypress_400,w,c
  2498  000570  A4D8               	btfss	status,2,c
  2499  000572  D7C3               	goto	l256
  2500                           
  2501                           ;main.c: 395: if (repetition != na_freq) {
  2502  000574  0E03               	movlw	3
  2503  000576  183F               	xorwf	operation@repetition,w,c
  2504  000578  B4D8               	btfsc	status,2,c
  2505  00057A  D7BF               	goto	l256
  2506                           
  2507                           ;main.c: 397: }
  2508                           ;main.c: 398: }
  2509                           ;main.c: 399: }
  2510                           ;main.c: 403: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2511                           
  2512                           ;main.c: 396: break;
  2513  00057C  0E0C               	movlw	12
  2514  00057E  EC03  F008         	call	_lcdInst
  2515                           
  2516                           ;main.c: 404: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2517  000582  0E01               	movlw	1
  2518  000584  EC03  F008         	call	_lcdInst
  2519  000588  0EC3               	movlw	195
  2520  00058A  6E3C               	movwf	??_operation& (0+255),c
  2521  00058C  0ECD               	movlw	205
  2522  00058E                     u1927:
  2523  00058E  2EE8               	decfsz	wreg,f,c
  2524  000590  D7FE               	bra	u1927
  2525  000592  2E3C               	decfsz	??_operation& (0+255),f,c
  2526  000594  D7FC               	bra	u1927
  2527  000596  F000               	nop	
  2528                           
  2529                           ;main.c: 405: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2530  000598  0E80               	movlw	128
  2531  00059A  EC03  F008         	call	_lcdInst
  2532  00059E  0E41               	movlw	65
  2533  0005A0  6E3C               	movwf	??_operation& (0+255),c
  2534  0005A2  0EEE               	movlw	238
  2535  0005A4                     u1937:
  2536  0005A4  2EE8               	decfsz	wreg,f,c
  2537  0005A6  D7FE               	bra	u1937
  2538  0005A8  2E3C               	decfsz	??_operation& (0+255),f,c
  2539  0005AA  D7FC               	bra	u1937
  2540  0005AC  D000               	nop2	
  2541                           
  2542                           ;main.c: 406: printf("Prescrip. details:");
  2543  0005AE  0E10               	movlw	low STR_21
  2544  0005B0  6E20               	movwf	printf@f,c
  2545  0005B2  0EFF               	movlw	high STR_21
  2546  0005B4  6E21               	movwf	printf@f+1,c
  2547  0005B6  EC77  F003         	call	_printf	;wreg free
  2548                           
  2549                           ;main.c: 407: lcdInst(0xC0);;
  2550  0005BA  0EC0               	movlw	192
  2551  0005BC  EC03  F008         	call	_lcdInst
  2552                           
  2553                           ;main.c: 408: printf("- %dR %dF %dL", prescription[0], prescription[1], prescription[2])
      +                          ;;
  2554  0005C0  0E69               	movlw	low STR_22
  2555  0005C2  6E20               	movwf	printf@f,c
  2556  0005C4  0EFF               	movlw	high STR_22
  2557  0005C6  6E21               	movwf	printf@f+1,c
  2558  0005C8  C045  F022         	movff	operation@prescription,?_printf+2
  2559  0005CC  C046  F023         	movff	operation@prescription+1,?_printf+3
  2560  0005D0  C047  F024         	movff	operation@prescription+2,?_printf+4
  2561  0005D4  C048  F025         	movff	operation@prescription+3,?_printf+5
  2562  0005D8  C049  F026         	movff	operation@prescription+4,?_printf+6
  2563  0005DC  C04A  F027         	movff	operation@prescription+5,?_printf+7
  2564  0005E0  EC77  F003         	call	_printf	;wreg free
  2565                           
  2566                           ;main.c: 409: lcdInst(0x94);;
  2567  0005E4  0E94               	movlw	148
  2568  0005E6  EC03  F008         	call	_lcdInst
  2569                           
  2570                           ;main.c: 410: switch (repetition) {
  2571  0005EA  D01C               	goto	l277
  2572  0005EC                     
  2573                           ;main.c: 412: printf("- Mornings");
  2574  0005EC  0ED0               	movlw	low STR_23
  2575  0005EE  6E20               	movwf	printf@f,c
  2576  0005F0  0EFF               	movlw	high STR_23
  2577  0005F2  6E21               	movwf	printf@f+1,c
  2578  0005F4  EC77  F003         	call	_printf	;wreg free
  2579                           
  2580                           ;main.c: 413: break;
  2581  0005F8  D022               	goto	l279
  2582  0005FA                     
  2583                           ;main.c: 415: printf("- Afternoons");
  2584  0005FA  0E9F               	movlw	low STR_24
  2585  0005FC  6E20               	movwf	printf@f,c
  2586  0005FE  0EFF               	movlw	high STR_24
  2587  000600  6E21               	movwf	printf@f+1,c
  2588  000602  EC77  F003         	call	_printf	;wreg free
  2589                           
  2590                           ;main.c: 416: break;
  2591  000606  D01B               	goto	l279
  2592  000608                     
  2593                           ;main.c: 418: printf("- Morn. & Afternoon");
  2594  000608  0EFC               	movlw	low STR_25
  2595  00060A  6E20               	movwf	printf@f,c
  2596  00060C  0EFE               	movlw	high STR_25
  2597  00060E  6E21               	movwf	printf@f+1,c
  2598  000610  EC77  F003         	call	_printf	;wreg free
  2599                           
  2600                           ;main.c: 419: break;
  2601  000614  D014               	goto	l279
  2602  000616                     
  2603                           ;main.c: 421: printf("- Alternating");
  2604  000616  0E77               	movlw	low STR_26
  2605  000618  6E20               	movwf	printf@f,c
  2606  00061A  0EFF               	movlw	high STR_26
  2607  00061C  6E21               	movwf	printf@f+1,c
  2608  00061E  EC77  F003         	call	_printf	;wreg free
  2609                           
  2610                           ;main.c: 423: }
  2611                           
  2612                           ;main.c: 422: break;
  2613  000622  D00D               	goto	l279
  2614  000624                     l277:
  2615  000624  503F               	movf	operation@repetition,w,c
  2616                           
  2617                           ; Switch size 1, requested type "space"
  2618                           ; Number of cases is 4, Range of values is 0 to 3
  2619                           ; switch strategies available:
  2620                           ; Name         Instructions Cycles
  2621                           ; simple_byte           13     7 (average)
  2622                           ;	Chosen strategy is simple_byte
  2623  000626  0A00               	xorlw	0	; case 0
  2624  000628  B4D8               	btfsc	status,2,c
  2625  00062A  D7E0               	goto	l278
  2626  00062C  0A01               	xorlw	1	; case 1
  2627  00062E  B4D8               	btfsc	status,2,c
  2628  000630  D7E4               	goto	l280
  2629  000632  0A03               	xorlw	3	; case 2
  2630  000634  B4D8               	btfsc	status,2,c
  2631  000636  D7EF               	goto	l282
  2632  000638  0A01               	xorlw	1	; case 3
  2633  00063A  B4D8               	btfsc	status,2,c
  2634  00063C  D7E5               	goto	l281
  2635  00063E                     l279:
  2636                           
  2637                           ;main.c: 425: lcdInst(0xD4);;
  2638  00063E  0ED4               	movlw	212
  2639  000640  EC03  F008         	call	_lcdInst
  2640                           
  2641                           ;main.c: 426: switch (frequency) {
  2642  000644  D015               	goto	l283
  2643  000646                     
  2644                           ;main.c: 428: printf("- Everyday");
  2645  000646  0EDB               	movlw	low STR_27
  2646  000648  6E20               	movwf	printf@f,c
  2647  00064A  0EFF               	movlw	high STR_27
  2648  00064C  6E21               	movwf	printf@f+1,c
  2649  00064E  EC77  F003         	call	_printf	;wreg free
  2650                           
  2651                           ;main.c: 429: break;
  2652  000652  D018               	goto	l285
  2653  000654                     
  2654                           ;main.c: 431: printf("- Alternate (Sun)");
  2655  000654  0E35               	movlw	low STR_28
  2656  000656  6E20               	movwf	printf@f,c
  2657  000658  0EFF               	movlw	high STR_28
  2658  00065A  6E21               	movwf	printf@f+1,c
  2659  00065C  EC77  F003         	call	_printf	;wreg free
  2660                           
  2661                           ;main.c: 432: break;
  2662  000660  D011               	goto	l285
  2663  000662                     
  2664                           ;main.c: 434: printf("- Alternate (Mon)");
  2665  000662  0E23               	movlw	low STR_29
  2666  000664  6E20               	movwf	printf@f,c
  2667  000666  0EFF               	movlw	high STR_29
  2668  000668  6E21               	movwf	printf@f+1,c
  2669  00066A  EC77  F003         	call	_printf	;wreg free
  2670                           
  2671                           ;main.c: 436: }
  2672                           
  2673                           ;main.c: 435: break;
  2674  00066E  D00A               	goto	l285
  2675  000670                     l283:
  2676  000670  503E               	movf	operation@frequency,w,c
  2677                           
  2678                           ; Switch size 1, requested type "space"
  2679                           ; Number of cases is 3, Range of values is 0 to 2
  2680                           ; switch strategies available:
  2681                           ; Name         Instructions Cycles
  2682                           ; simple_byte           10     6 (average)
  2683                           ;	Chosen strategy is simple_byte
  2684  000672  0A00               	xorlw	0	; case 0
  2685  000674  B4D8               	btfsc	status,2,c
  2686  000676  D7E7               	goto	l284
  2687  000678  0A01               	xorlw	1	; case 1
  2688  00067A  B4D8               	btfsc	status,2,c
  2689  00067C  D7EB               	goto	l286
  2690  00067E  0A03               	xorlw	3	; case 2
  2691  000680  B4D8               	btfsc	status,2,c
  2692  000682  D7EF               	goto	l287
  2693  000684                     l285:
  2694                           
  2695                           ;main.c: 437: _delay((unsigned long)((3000)*(40000000/4000.0)));
  2696  000684  0E99               	movlw	153
  2697  000686  6E3D               	movwf	(??_operation+1)& (0+255),c
  2698  000688  0E31               	movlw	49
  2699  00068A  6E3C               	movwf	??_operation& (0+255),c
  2700  00068C  0EA2               	movlw	162
  2701  00068E                     u1947:
  2702  00068E  2EE8               	decfsz	wreg,f,c
  2703  000690  D7FE               	bra	u1947
  2704  000692  2E3C               	decfsz	??_operation& (0+255),f,c
  2705  000694  D7FC               	bra	u1947
  2706  000696  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  2707  000698  D7FA               	bra	u1947
  2708  00069A  D000               	nop2	
  2709                           
  2710                           ;main.c: 439: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2711  00069C  0E01               	movlw	1
  2712  00069E  EC03  F008         	call	_lcdInst
  2713  0006A2  0EC3               	movlw	195
  2714  0006A4  6E3C               	movwf	??_operation& (0+255),c
  2715  0006A6  0ECD               	movlw	205
  2716  0006A8                     u1957:
  2717  0006A8  2EE8               	decfsz	wreg,f,c
  2718  0006AA  D7FE               	bra	u1957
  2719  0006AC  2E3C               	decfsz	??_operation& (0+255),f,c
  2720  0006AE  D7FC               	bra	u1957
  2721  0006B0  F000               	nop	
  2722                           
  2723                           ;main.c: 440: lcdInst(0xC0);;
  2724  0006B2  0EC0               	movlw	192
  2725  0006B4  EC03  F008         	call	_lcdInst
  2726                           
  2727                           ;main.c: 441: printf("     DISPENSING     ");
  2728  0006B8  0E2C               	movlw	low STR_30
  2729  0006BA  6E20               	movwf	printf@f,c
  2730  0006BC  0EFE               	movlw	high STR_30
  2731  0006BE  6E21               	movwf	printf@f+1,c
  2732  0006C0  EC77  F003         	call	_printf	;wreg free
  2733                           
  2734                           ;main.c: 442: lcdInst(0x94);;
  2735  0006C4  0E94               	movlw	148
  2736  0006C6  EC03  F008         	call	_lcdInst
  2737                           
  2738                           ;main.c: 443: printf("      PILLS...      ");
  2739  0006CA  0E02               	movlw	low STR_31
  2740  0006CC  6E20               	movwf	printf@f,c
  2741  0006CE  0EFE               	movlw	high STR_31
  2742  0006D0  6E21               	movwf	printf@f+1,c
  2743  0006D2  EC77  F003         	call	_printf	;wreg free
  2744                           
  2745                           ;main.c: 444: _delay((unsigned long)((3600)*(40000000/4000.0)));
  2746  0006D6  0EB7               	movlw	183
  2747  0006D8  6E3D               	movwf	(??_operation+1)& (0+255),c
  2748  0006DA  0EA1               	movlw	161
  2749  0006DC  6E3C               	movwf	??_operation& (0+255),c
  2750  0006DE  0EC4               	movlw	196
  2751  0006E0                     u1967:
  2752  0006E0  2EE8               	decfsz	wreg,f,c
  2753  0006E2  D7FE               	bra	u1967
  2754  0006E4  2E3C               	decfsz	??_operation& (0+255),f,c
  2755  0006E6  D7FC               	bra	u1967
  2756  0006E8  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  2757  0006EA  D7FA               	bra	u1967
  2758  0006EC  0012               	return	
  2759  0006EE                     __end_of_operation:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           prodh	equ	0xFF4
  2766                           prodl	equ	0xFF3
  2767                           intcon	equ	0xFF2
  2768                           intcon3	equ	0xFF0
  2769                           postinc0	equ	0xFEE
  2770                           wreg	equ	0xFE8
  2771                           postdec1	equ	0xFE5
  2772                           plusw1	equ	0xFE3
  2773                           fsr1l	equ	0xFE1
  2774                           indf2	equ	0xFDF
  2775                           plusw2	equ	0xFDB
  2776                           fsr2h	equ	0xFDA
  2777                           fsr2l	equ	0xFD9
  2778                           status	equ	0xFD8
  2779                           
  2780 ;; *************** function _printf *****************
  2781 ;; Defined at:
  2782 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  f               2   31[COMRAM] PTR const unsigned char 
  2785 ;;		 -> STR_31(21), STR_30(21), STR_29(18), STR_28(18), 
  2786 ;;		 -> STR_27(11), STR_26(14), STR_25(20), STR_24(13), 
  2787 ;;		 -> STR_23(11), STR_22(14), STR_21(19), STR_20(20), 
  2788 ;;		 -> STR_19(20), STR_18(13), STR_17(12), STR_16(21), 
  2789 ;;		 -> STR_15(13), STR_14(11), STR_13(13), STR_12(21), 
  2790 ;;		 -> STR_11(21), STR_10(8), STR_9(8), STR_8(8), 
  2791 ;;		 -> STR_7(17), STR_6(21), STR_5(21), STR_4(21), 
  2792 ;;		 -> STR_3(21), STR_2(21), STR_1(33), 
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;  idx             1   49[COMRAM] unsigned char 
  2795 ;;  tmpval          4    0        struct .
  2796 ;;  cp              3    0        PTR const unsigned char 
  2797 ;;  width           2   56[COMRAM] int 
  2798 ;;  val             2   53[COMRAM] unsigned int 
  2799 ;;  ap              2   50[COMRAM] PTR void [1]
  2800 ;;		 -> ?_printf(2), 
  2801 ;;  len             2    0        unsigned int 
  2802 ;;  c               1   58[COMRAM] char 
  2803 ;;  flag            1   55[COMRAM] unsigned char 
  2804 ;;  prec            1   52[COMRAM] char 
  2805 ;; Return value:  Size  Location     Type
  2806 ;;                  2   31[COMRAM] int 
  2807 ;; Registers used:
  2808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2809 ;; Tracked objects:
  2810 ;;		On entry : 0/0
  2811 ;;		On exit  : 0/0
  2812 ;;		Unchanged: 0/0
  2813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2814 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2818 ;;Total ram usage:       28 bytes
  2819 ;; Hardware stack levels used:    1
  2820 ;; Hardware stack levels required when called:    3
  2821 ;; This function calls:
  2822 ;;		___lwdiv
  2823 ;;		___lwmod
  2824 ;;		___wmul
  2825 ;;		_isdigit
  2826 ;;		_putch
  2827 ;; This function is called by:
  2828 ;;		_main
  2829 ;;		_operation
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text2
  2834  0006EE                     __ptext2:
  2835                           	opt stack 0
  2836  0006EE                     _printf:
  2837                           	opt stack 27
  2838                           
  2839                           ;doprnt.c: 466: va_list ap;
  2840                           ;doprnt.c: 499: signed char c;
  2841                           ;doprnt.c: 501: int width;
  2842                           ;doprnt.c: 506: signed char prec;
  2843                           ;doprnt.c: 508: unsigned char flag;
  2844                           ;doprnt.c: 523: union {
  2845                           ;doprnt.c: 524: unsigned long vd;
  2846                           ;doprnt.c: 525: double integ;
  2847                           ;doprnt.c: 526: } tmpval;
  2848                           ;doprnt.c: 528: unsigned int val;
  2849                           ;doprnt.c: 529: unsigned len;
  2850                           ;doprnt.c: 530: const char * cp;
  2851                           ;doprnt.c: 533: *ap = __va_start();
  2852                           
  2853                           ;incstack = 0
  2854  0006EE  0E22               	movlw	low (?_printf+2)
  2855  0006F0  6E33               	movwf	printf@ap,c
  2856  0006F2  0E00               	movlw	high (?_printf+2)
  2857  0006F4  6E34               	movwf	printf@ap+1,c
  2858                           
  2859                           ;doprnt.c: 536: while(c = *f++) {
  2860  0006F6  D174               	goto	u1260
  2861  0006F8                     
  2862                           ;doprnt.c: 538: if(c != '%')
  2863  0006F8  0E25               	movlw	37
  2864  0006FA  183B               	xorwf	printf@c,w,c
  2865  0006FC  B4D8               	btfsc	status,2,c
  2866  0006FE  D004               	goto	l363
  2867                           
  2868                           ;doprnt.c: 540: {
  2869                           ;doprnt.c: 541: (putch(c) );
  2870  000700  503B               	movf	printf@c,w,c
  2871  000702  ECF9  F007         	call	_putch
  2872                           
  2873                           ;doprnt.c: 542: continue;
  2874  000706  D16C               	goto	u1260
  2875  000708                     l363:
  2876                           
  2877                           ;doprnt.c: 543: }
  2878                           ;doprnt.c: 546: width = 0;
  2879  000708  0E00               	movlw	0
  2880  00070A  6E3A               	movwf	printf@width+1,c
  2881  00070C  0E00               	movlw	0
  2882  00070E  6E39               	movwf	printf@width,c
  2883                           
  2884                           ;doprnt.c: 548: flag = 0;
  2885  000710  0E00               	movlw	0
  2886  000712  6E38               	movwf	printf@flag,c
  2887                           
  2888                           ;doprnt.c: 551: switch(*f) {
  2889                           
  2890                           ;doprnt.c: 550: for(;;) {
  2891  000714  D003               	goto	l365
  2892  000716                     
  2893                           ;doprnt.c: 580: flag |= 0x04;
  2894  000716  8438               	bsf	printf@flag,2,c
  2895                           
  2896                           ;doprnt.c: 581: f++;
  2897  000718  4A20               	infsnz	printf@f,f,c
  2898  00071A  2A21               	incf	printf@f+1,f,c
  2899  00071C                     l365:
  2900  00071C  C020  FFF6         	movff	printf@f,tblptrl
  2901  000720  C021  FFF7         	movff	printf@f+1,tblptrh
  2902  000724                     	if	0	;tblptru may be non-zero
  2903  000724                     	endif
  2904  000724                     	if	0	;tblptru may be non-zero
  2905  000724                     	endif
  2906  000724  0008               	tblrd		*
  2907  000726  50F5               	movf	tablat,w,c
  2908                           
  2909                           ; Switch size 1, requested type "space"
  2910                           ; Number of cases is 1, Range of values is 48 to 48
  2911                           ; switch strategies available:
  2912                           ; Name         Instructions Cycles
  2913                           ; simple_byte            4     3 (average)
  2914                           ;	Chosen strategy is simple_byte
  2915  000728  0A30               	xorlw	48	; case 48
  2916  00072A  B4D8               	btfsc	status,2,c
  2917  00072C  D7F4               	goto	l366
  2918                           
  2919                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2920                           
  2921                           ;doprnt.c: 586: }
  2922                           
  2923                           ;doprnt.c: 585: break;
  2924  00072E  C020  FFF6         	movff	printf@f,tblptrl
  2925  000732  C021  FFF7         	movff	printf@f+1,tblptrh
  2926  000736                     	if	0	;tblptru may be non-zero
  2927  000736                     	endif
  2928  000736                     	if	0	;tblptru may be non-zero
  2929  000736                     	endif
  2930  000736  0008               	tblrd		*
  2931  000738  50F5               	movf	tablat,w,c
  2932  00073A  ECDC  F007         	call	_isdigit
  2933  00073E  A0D8               	btfss	status,0,c
  2934  000740  D035               	goto	l373
  2935                           
  2936                           ;doprnt.c: 598: width = 0;
  2937  000742  0E00               	movlw	0
  2938  000744  6E3A               	movwf	printf@width+1,c
  2939  000746  0E00               	movlw	0
  2940  000748  6E39               	movwf	printf@width,c
  2941  00074A                     
  2942                           ;doprnt.c: 600: width *= 10;
  2943  00074A  C039  F014         	movff	printf@width,___wmul@multiplier
  2944  00074E  C03A  F015         	movff	printf@width+1,___wmul@multiplier+1
  2945  000752  0E00               	movlw	0
  2946  000754  6E17               	movwf	___wmul@multiplicand+1,c
  2947  000756  0E0A               	movlw	10
  2948  000758  6E16               	movwf	___wmul@multiplicand,c
  2949  00075A  ECB7  F007         	call	___wmul	;wreg free
  2950  00075E  C014  F039         	movff	?___wmul,printf@width
  2951  000762  C015  F03A         	movff	?___wmul+1,printf@width+1
  2952                           
  2953                           ;doprnt.c: 601: width += *f++ - '0';
  2954  000766  0ED0               	movlw	208
  2955  000768  6E2E               	movwf	??_printf& (0+255),c
  2956  00076A  0EFF               	movlw	255
  2957  00076C  6E2F               	movwf	(??_printf+1)& (0+255),c
  2958  00076E  C020  FFF6         	movff	printf@f,tblptrl
  2959  000772  C021  FFF7         	movff	printf@f+1,tblptrh
  2960  000776                     	if	0	;tblptru may be non-zero
  2961  000776                     	endif
  2962  000776                     	if	0	;tblptru may be non-zero
  2963  000776                     	endif
  2964  000776  0008               	tblrd		*
  2965  000778  50F5               	movf	tablat,w,c
  2966  00077A  6E30               	movwf	(??_printf+2)& (0+255),c
  2967  00077C  6A31               	clrf	(??_printf+3)& (0+255),c
  2968  00077E  502E               	movf	??_printf,w,c
  2969  000780  2630               	addwf	??_printf+2,f,c
  2970  000782  502F               	movf	??_printf+1,w,c
  2971  000784  2231               	addwfc	??_printf+3,f,c
  2972  000786  5030               	movf	??_printf+2,w,c
  2973  000788  2639               	addwf	printf@width,f,c
  2974  00078A  5031               	movf	??_printf+3,w,c
  2975  00078C  223A               	addwfc	printf@width+1,f,c
  2976  00078E  4A20               	infsnz	printf@f,f,c
  2977  000790  2A21               	incf	printf@f+1,f,c
  2978                           
  2979                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2980  000792  C020  FFF6         	movff	printf@f,tblptrl
  2981  000796  C021  FFF7         	movff	printf@f+1,tblptrh
  2982  00079A                     	if	0	;tblptru may be non-zero
  2983  00079A                     	endif
  2984  00079A                     	if	0	;tblptru may be non-zero
  2985  00079A                     	endif
  2986  00079A  0008               	tblrd		*
  2987  00079C  50F5               	movf	tablat,w,c
  2988  00079E  ECDC  F007         	call	_isdigit
  2989  0007A2  A0D8               	btfss	status,0,c
  2990  0007A4  D003               	goto	l373
  2991  0007A6  D7D1               	goto	l371
  2992  0007A8                     
  2993                           ;doprnt.c: 721: flag |= 0x80;
  2994  0007A8  8E38               	bsf	printf@flag,7,c
  2995                           
  2996                           ;doprnt.c: 723: break;
  2997  0007AA  D017               	goto	l378
  2998  0007AC                     l373:
  2999  0007AC  C020  FFF6         	movff	printf@f,tblptrl
  3000  0007B0  C021  FFF7         	movff	printf@f+1,tblptrh
  3001  0007B4  4A20               	infsnz	printf@f,f,c
  3002  0007B6  2A21               	incf	printf@f+1,f,c
  3003  0007B8                     	if	0	;tblptru may be non-zero
  3004  0007B8                     	endif
  3005  0007B8                     	if	0	;tblptru may be non-zero
  3006  0007B8                     	endif
  3007  0007B8  0008               	tblrd		*
  3008  0007BA  CFF5 F03B          	movff	tablat,printf@c
  3009  0007BE  503B               	movf	printf@c,w,c
  3010                           
  3011                           ; Switch size 1, requested type "space"
  3012                           ; Number of cases is 4, Range of values is 0 to 120
  3013                           ; switch strategies available:
  3014                           ; Name         Instructions Cycles
  3015                           ; simple_byte           13     7 (average)
  3016                           ;	Chosen strategy is simple_byte
  3017  0007C0  0A00               	xorlw	0	; case 0
  3018  0007C2  B4D8               	btfsc	status,2,c
  3019  0007C4  0012               	return	
  3020  0007C6  0A64               	xorlw	100	; case 100
  3021  0007C8  B4D8               	btfsc	status,2,c
  3022  0007CA  D007               	goto	l378
  3023  0007CC  0A0D               	xorlw	13	; case 105
  3024  0007CE  B4D8               	btfsc	status,2,c
  3025  0007D0  D004               	goto	l378
  3026  0007D2  0A11               	xorlw	17	; case 120
  3027  0007D4  B4D8               	btfsc	status,2,c
  3028  0007D6  D7E8               	goto	l379
  3029  0007D8  D103               	goto	u1260
  3030  0007DA                     l378:
  3031                           
  3032                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3033  0007DA  BE38               	btfsc	printf@flag,7,c
  3034  0007DC  D015               	goto	l381
  3035                           
  3036                           ;doprnt.c: 1253: {
  3037                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3038  0007DE  C033  FFD9         	movff	printf@ap,fsr2l
  3039  0007E2  C034  FFDA         	movff	printf@ap+1,fsr2h
  3040  0007E6  CFDE F036          	movff	postinc2,printf@val
  3041  0007EA  CFDD F037          	movff	postdec2,printf@val+1
  3042  0007EE  0E02               	movlw	2
  3043  0007F0  2633               	addwf	printf@ap,f,c
  3044  0007F2  0E00               	movlw	0
  3045  0007F4  2234               	addwfc	printf@ap+1,f,c
  3046                           
  3047                           ;doprnt.c: 1261: if((int)val < 0) {
  3048  0007F6  AE37               	btfss	printf@val+1,7,c
  3049  0007F8  D044               	goto	l384
  3050                           
  3051                           ;doprnt.c: 1262: flag |= 0x03;
  3052  0007FA  0E03               	movlw	3
  3053  0007FC  1238               	iorwf	printf@flag,f,c
  3054                           
  3055                           ;doprnt.c: 1263: val = -val;
  3056  0007FE  6C36               	negf	printf@val,c
  3057  000800  1E37               	comf	printf@val+1,f,c
  3058  000802  B0D8               	btfsc	status,0,c
  3059  000804  2A37               	incf	printf@val+1,f,c
  3060                           
  3061                           ;doprnt.c: 1264: }
  3062                           ;doprnt.c: 1266: }
  3063  000806  D03D               	goto	l384
  3064  000808                     l381:
  3065                           
  3066                           ;doprnt.c: 1268: else
  3067                           ;doprnt.c: 1273: {
  3068                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3069  000808  C033  FFD9         	movff	printf@ap,fsr2l
  3070  00080C  C034  FFDA         	movff	printf@ap+1,fsr2h
  3071  000810  CFDE F036          	movff	postinc2,printf@val
  3072  000814  CFDD F037          	movff	postdec2,printf@val+1
  3073  000818  0E02               	movlw	2
  3074  00081A  2633               	addwf	printf@ap,f,c
  3075  00081C  0E00               	movlw	0
  3076  00081E  2234               	addwfc	printf@ap+1,f,c
  3077                           
  3078                           ;doprnt.c: 1287: }
  3079                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3080  000820  D030               	goto	l384
  3081  000822                     
  3082                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3083  000822  0E01               	movlw	1
  3084  000824  6E3B               	movwf	printf@c,c
  3085  000826                     l1974:
  3086  000826  0E05               	movlw	5
  3087  000828  183B               	xorwf	printf@c,w,c
  3088  00082A  B4D8               	btfsc	status,2,c
  3089  00082C  D032               	goto	l389
  3090                           
  3091                           ;doprnt.c: 1306: if(val < dpowers[c])
  3092  00082E  503B               	movf	printf@c,w,c
  3093  000830  0D02               	mullw	2
  3094  000832  0EC2               	movlw	low _dpowers
  3095  000834  24F3               	addwf	prodl,w,c
  3096  000836  6EF6               	movwf	tblptrl,c
  3097  000838  0EFD               	movlw	high _dpowers
  3098  00083A  20F4               	addwfc	prodh,w,c
  3099  00083C  6EF7               	movwf	tblptrh,c
  3100  00083E                     	if	0	;There are less than 3 active tblptr bytes
  3101  00083E                     	endif
  3102  00083E  0009               	tblrd		*+
  3103  000840  50F5               	movf	tablat,w,c
  3104  000842  5C36               	subwf	printf@val,w,c
  3105  000844  0009               	tblrd		*+
  3106  000846  50F5               	movf	tablat,w,c
  3107  000848  5837               	subwfb	printf@val+1,w,c
  3108  00084A  A0D8               	btfss	status,0,c
  3109  00084C  D022               	goto	l389
  3110                           
  3111                           ;doprnt.c: 1307: break;
  3112  00084E  2A3B               	incf	printf@c,f,c
  3113  000850  D7EA               	goto	l1974
  3114  000852                     
  3115                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3116  000852  0E01               	movlw	1
  3117  000854  6E3B               	movwf	printf@c,c
  3118  000856                     l1988:
  3119  000856  0E04               	movlw	4
  3120  000858  183B               	xorwf	printf@c,w,c
  3121  00085A  B4D8               	btfsc	status,2,c
  3122  00085C  D01A               	goto	l389
  3123                           
  3124                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3125  00085E  503B               	movf	printf@c,w,c
  3126  000860  0D02               	mullw	2
  3127  000862  0ECC               	movlw	low _hexpowers
  3128  000864  24F3               	addwf	prodl,w,c
  3129  000866  6EF6               	movwf	tblptrl,c
  3130  000868  0EFD               	movlw	high _hexpowers
  3131  00086A  20F4               	addwfc	prodh,w,c
  3132  00086C  6EF7               	movwf	tblptrh,c
  3133  00086E                     	if	0	;There are less than 3 active tblptr bytes
  3134  00086E                     	endif
  3135  00086E  0009               	tblrd		*+
  3136  000870  50F5               	movf	tablat,w,c
  3137  000872  5C36               	subwf	printf@val,w,c
  3138  000874  0009               	tblrd		*+
  3139  000876  50F5               	movf	tablat,w,c
  3140  000878  5837               	subwfb	printf@val+1,w,c
  3141  00087A  A0D8               	btfss	status,0,c
  3142  00087C  D00A               	goto	l389
  3143                           
  3144                           ;doprnt.c: 1318: break;
  3145  00087E  2A3B               	incf	printf@c,f,c
  3146  000880  D7EA               	goto	l1988
  3147  000882                     l384:
  3148  000882  5038               	movf	printf@flag,w,c
  3149  000884  0B80               	andlw	128
  3150                           
  3151                           ; Switch size 1, requested type "space"
  3152                           ; Number of cases is 2, Range of values is 0 to 128
  3153                           ; switch strategies available:
  3154                           ; Name         Instructions Cycles
  3155                           ; simple_byte            7     4 (average)
  3156                           ;	Chosen strategy is simple_byte
  3157  000886  0A00               	xorlw	0	; case 0
  3158  000888  B4D8               	btfsc	status,2,c
  3159  00088A  D7CB               	goto	l385
  3160  00088C  0A80               	xorlw	128	; case 128
  3161  00088E  B4D8               	btfsc	status,2,c
  3162  000890  D7E0               	goto	l390
  3163  000892                     l389:
  3164                           
  3165                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3166  000892  5039               	movf	printf@width,w,c
  3167  000894  103A               	iorwf	printf@width+1,w,c
  3168  000896  B4D8               	btfsc	status,2,c
  3169  000898  D009               	goto	l394
  3170  00089A  C038  F02E         	movff	printf@flag,??_printf
  3171  00089E  0E03               	movlw	3
  3172  0008A0  162E               	andwf	??_printf,f,c
  3173  0008A2  B4D8               	btfsc	status,2,c
  3174  0008A4  D003               	goto	l394
  3175                           
  3176                           ;doprnt.c: 1346: width--;
  3177  0008A6  0639               	decf	printf@width,f,c
  3178  0008A8  A0D8               	btfss	status,0,c
  3179  0008AA  063A               	decf	printf@width+1,f,c
  3180  0008AC                     l394:
  3181                           
  3182                           ;doprnt.c: 1381: if(width > c)
  3183  0008AC  0E80               	movlw	128
  3184  0008AE  BE3B               	btfsc	printf@c,7,c
  3185  0008B0  0E7F               	movlw	127
  3186  0008B2  6E2E               	movwf	??_printf& (0+255),c
  3187  0008B4  5039               	movf	printf@width,w,c
  3188  0008B6  5C3B               	subwf	printf@c,w,c
  3189  0008B8  503A               	movf	printf@width+1,w,c
  3190  0008BA  0A80               	xorlw	128
  3191  0008BC  582E               	subwfb	??_printf& (0+255),w,c
  3192  0008BE  B0D8               	btfsc	status,0,c
  3193  0008C0  D007               	goto	l395
  3194                           
  3195                           ;doprnt.c: 1382: width -= c;
  3196  0008C2  503B               	movf	printf@c,w,c
  3197  0008C4  5E39               	subwf	printf@width,f,c
  3198  0008C6  0E00               	movlw	0
  3199  0008C8  BE3B               	btfsc	printf@c,7,c
  3200  0008CA  0EFF               	movlw	255
  3201  0008CC  5A3A               	subwfb	printf@width+1,f,c
  3202  0008CE  D004               	goto	l396
  3203  0008D0                     l395:
  3204                           
  3205                           ;doprnt.c: 1383: else
  3206                           ;doprnt.c: 1384: width = 0;
  3207  0008D0  0E00               	movlw	0
  3208  0008D2  6E3A               	movwf	printf@width+1,c
  3209  0008D4  0E00               	movlw	0
  3210  0008D6  6E39               	movwf	printf@width,c
  3211  0008D8                     l396:
  3212                           
  3213                           ;doprnt.c: 1387: if(flag & 0x04) {
  3214  0008D8  A438               	btfss	printf@flag,2,c
  3215  0008DA  D014               	goto	l397
  3216                           
  3217                           ;doprnt.c: 1392: if(flag & 0x03)
  3218  0008DC  C038  F02E         	movff	printf@flag,??_printf
  3219  0008E0  0E03               	movlw	3
  3220  0008E2  162E               	andwf	??_printf,f,c
  3221  0008E4  B4D8               	btfsc	status,2,c
  3222  0008E6  D003               	goto	l398
  3223                           
  3224                           ;doprnt.c: 1393: (putch('-') );
  3225  0008E8  0E2D               	movlw	45
  3226  0008EA  ECF9  F007         	call	_putch
  3227  0008EE                     l398:
  3228                           
  3229                           ;doprnt.c: 1415: if(width)
  3230  0008EE  5039               	movf	printf@width,w,c
  3231  0008F0  103A               	iorwf	printf@width+1,w,c
  3232  0008F2  B4D8               	btfsc	status,2,c
  3233  0008F4  D01E               	goto	l406
  3234                           
  3235                           ;doprnt.c: 1417: (putch('0') );
  3236                           
  3237                           ;doprnt.c: 1416: do
  3238  0008F6  0E30               	movlw	48
  3239  0008F8  ECF9  F007         	call	_putch
  3240                           
  3241                           ;doprnt.c: 1418: while(--width);
  3242  0008FC  0639               	decf	printf@width,f,c
  3243  0008FE  A0D8               	btfss	status,0,c
  3244  000900  063A               	decf	printf@width+1,f,c
  3245  000902  D7F5               	goto	l398
  3246  000904                     l397:
  3247                           
  3248                           ;doprnt.c: 1422: {
  3249                           ;doprnt.c: 1424: if(width
  3250                           ;doprnt.c: 1428: )
  3251  000904  5039               	movf	printf@width,w,c
  3252  000906  103A               	iorwf	printf@width+1,w,c
  3253  000908  B4D8               	btfsc	status,2,c
  3254  00090A  D00A               	goto	u1240
  3255  00090C                     u1230:
  3256                           
  3257                           ;doprnt.c: 1430: (putch(' ') );
  3258                           
  3259                           ;doprnt.c: 1429: do
  3260  00090C  0E20               	movlw	32
  3261  00090E  ECF9  F007         	call	_putch
  3262                           
  3263                           ;doprnt.c: 1431: while(--width);
  3264  000912  0639               	decf	printf@width,f,c
  3265  000914  A0D8               	btfss	status,0,c
  3266  000916  063A               	decf	printf@width+1,f,c
  3267  000918  5039               	movf	printf@width,w,c
  3268  00091A  103A               	iorwf	printf@width+1,w,c
  3269  00091C  A4D8               	btfss	status,2,c
  3270  00091E  D7F6               	goto	u1230
  3271  000920                     u1240:
  3272                           
  3273                           ;doprnt.c: 1438: if(flag & 0x03)
  3274  000920  C038  F02E         	movff	printf@flag,??_printf
  3275  000924  0E03               	movlw	3
  3276  000926  162E               	andwf	??_printf,f,c
  3277  000928  B4D8               	btfsc	status,2,c
  3278  00092A  D003               	goto	l406
  3279                           
  3280                           ;doprnt.c: 1439: (putch('-') );
  3281  00092C  0E2D               	movlw	45
  3282  00092E  ECF9  F007         	call	_putch
  3283  000932                     l406:
  3284                           
  3285                           ;doprnt.c: 1469: }
  3286                           ;doprnt.c: 1472: prec = c;
  3287  000932  C03B  F035         	movff	printf@c,printf@prec
  3288                           
  3289                           ;doprnt.c: 1474: while(prec--) {
  3290  000936  D050               	goto	l407
  3291  000938                     
  3292                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3293  000938  5035               	movf	printf@prec,w,c
  3294  00093A  0D02               	mullw	2
  3295  00093C  0EC2               	movlw	low _dpowers
  3296  00093E  24F3               	addwf	prodl,w,c
  3297  000940  6EF6               	movwf	tblptrl,c
  3298  000942  0EFD               	movlw	high _dpowers
  3299  000944  20F4               	addwfc	prodh,w,c
  3300  000946  6EF7               	movwf	tblptrh,c
  3301  000948                     	if	0	;There are less than 3 active tblptr bytes
  3302  000948                     	endif
  3303  000948  0009               	tblrd		*+
  3304  00094A  CFF5 F016          	movff	tablat,___lwdiv@divisor
  3305  00094E  000A               	tblrd		*-
  3306  000950  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
  3307  000954  C036  F014         	movff	printf@val,___lwdiv@dividend
  3308  000958  C037  F015         	movff	printf@val+1,___lwdiv@dividend+1
  3309  00095C  EC03  F007         	call	___lwdiv	;wreg free
  3310  000960  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
  3311  000964  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
  3312  000968  0E00               	movlw	0
  3313  00096A  6E1E               	movwf	___lwmod@divisor+1,c
  3314  00096C  0E0A               	movlw	10
  3315  00096E  6E1D               	movwf	___lwmod@divisor,c
  3316  000970  EC79  F007         	call	___lwmod	;wreg free
  3317  000974  501B               	movf	?___lwmod,w,c
  3318  000976  0F30               	addlw	48
  3319  000978  6E3B               	movwf	printf@c,c
  3320                           
  3321                           ;doprnt.c: 1491: break;
  3322  00097A  D02B               	goto	l411
  3323  00097C                     
  3324                           ;doprnt.c: 1499: {
  3325                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3326  00097C  C036  F014         	movff	printf@val,___lwdiv@dividend
  3327  000980  C037  F015         	movff	printf@val+1,___lwdiv@dividend+1
  3328  000984  5035               	movf	printf@prec,w,c
  3329  000986  0D02               	mullw	2
  3330  000988  0ECC               	movlw	low _hexpowers
  3331  00098A  24F3               	addwf	prodl,w,c
  3332  00098C  6EF6               	movwf	tblptrl,c
  3333  00098E  0EFD               	movlw	high _hexpowers
  3334  000990  20F4               	addwfc	prodh,w,c
  3335  000992  6EF7               	movwf	tblptrh,c
  3336  000994                     	if	0	;There are less than 3 active tblptr bytes
  3337  000994                     	endif
  3338  000994  0009               	tblrd		*+
  3339  000996  CFF5 F016          	movff	tablat,___lwdiv@divisor
  3340  00099A  000A               	tblrd		*-
  3341  00099C  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
  3342  0009A0  EC03  F007         	call	___lwdiv	;wreg free
  3343  0009A4  5014               	movf	?___lwdiv,w,c
  3344  0009A6  0B0F               	andlw	15
  3345  0009A8  6E32               	movwf	printf@idx,c
  3346                           
  3347                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3348  0009AA  5032               	movf	printf@idx,w,c
  3349  0009AC  0D01               	mullw	1
  3350  0009AE  0E47               	movlw	low STR_32
  3351  0009B0  24F3               	addwf	prodl,w,c
  3352  0009B2  6EF6               	movwf	tblptrl,c
  3353  0009B4  0EFF               	movlw	high STR_32
  3354  0009B6  20F4               	addwfc	prodh,w,c
  3355  0009B8  6EF7               	movwf	tblptrh,c
  3356  0009BA                     	if	0	;There are less than 3 active tblptr bytes
  3357  0009BA                     	endif
  3358  0009BA  0008               	tblrd		*
  3359  0009BC  CFF5 F03B          	movff	tablat,printf@c
  3360                           
  3361                           ;doprnt.c: 1523: }
  3362                           
  3363                           ;doprnt.c: 1508: }
  3364                           ;doprnt.c: 1510: break;
  3365  0009C0  D008               	goto	l411
  3366  0009C2  5038               	movf	printf@flag,w,c
  3367  0009C4  0B80               	andlw	128
  3368                           
  3369                           ; Switch size 1, requested type "space"
  3370                           ; Number of cases is 2, Range of values is 0 to 128
  3371                           ; switch strategies available:
  3372                           ; Name         Instructions Cycles
  3373                           ; simple_byte            7     4 (average)
  3374                           ;	Chosen strategy is simple_byte
  3375  0009C6  0A00               	xorlw	0	; case 0
  3376  0009C8  B4D8               	btfsc	status,2,c
  3377  0009CA  D7B6               	goto	l410
  3378  0009CC  0A80               	xorlw	128	; case 128
  3379  0009CE  B4D8               	btfsc	status,2,c
  3380  0009D0  D7D5               	goto	l412
  3381  0009D2                     l411:
  3382                           
  3383                           ;doprnt.c: 1524: (putch(c) );
  3384  0009D2  503B               	movf	printf@c,w,c
  3385  0009D4  ECF9  F007         	call	_putch
  3386  0009D8                     l407:
  3387  0009D8  0635               	decf	printf@prec,f,c
  3388  0009DA  2835               	incf	printf@prec,w,c
  3389  0009DC  A4D8               	btfss	status,2,c
  3390  0009DE  D7F1               	goto	l409
  3391  0009E0                     u1260:
  3392  0009E0  C020  FFF6         	movff	printf@f,tblptrl
  3393  0009E4  C021  FFF7         	movff	printf@f+1,tblptrh
  3394  0009E8  4A20               	infsnz	printf@f,f,c
  3395  0009EA  2A21               	incf	printf@f+1,f,c
  3396  0009EC                     	if	0	;tblptru may be non-zero
  3397  0009EC                     	endif
  3398  0009EC                     	if	0	;tblptru may be non-zero
  3399  0009EC                     	endif
  3400  0009EC  0008               	tblrd		*
  3401  0009EE  CFF5 F03B          	movff	tablat,printf@c
  3402  0009F2  503B               	movf	printf@c,w,c
  3403  0009F4  B4D8               	btfsc	status,2,c
  3404  0009F6  0012               	return	
  3405  0009F8  D67F               	goto	l362
  3406  0009FA                     __end_of_printf:
  3407                           	opt stack 0
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           intcon	equ	0xFF2
  3415                           intcon3	equ	0xFF0
  3416                           postinc0	equ	0xFEE
  3417                           wreg	equ	0xFE8
  3418                           postdec1	equ	0xFE5
  3419                           plusw1	equ	0xFE3
  3420                           fsr1l	equ	0xFE1
  3421                           indf2	equ	0xFDF
  3422                           postinc2	equ	0xFDE
  3423                           postdec2	equ	0xFDD
  3424                           plusw2	equ	0xFDB
  3425                           fsr2h	equ	0xFDA
  3426                           fsr2l	equ	0xFD9
  3427                           status	equ	0xFD8
  3428                           
  3429 ;; *************** function _putch *****************
  3430 ;; Defined at:
  3431 ;;		line 24 in file "lcd.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  data            1    wreg     unsigned char 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  data            1   21[COMRAM] unsigned char 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      void 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2, status,0, cstack
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;Total ram usage:        1 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    2
  3452 ;; This function calls:
  3453 ;;		_lcdNibble
  3454 ;; This function is called by:
  3455 ;;		_operation
  3456 ;;		_printf
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text3
  3461  000FF2                     __ptext3:
  3462                           	opt stack 0
  3463  000FF2                     _putch:
  3464                           	opt stack 27
  3465                           
  3466                           ;incstack = 0
  3467                           ;putch@data stored from wreg
  3468  000FF2  6E16               	movwf	putch@data,c
  3469                           
  3470                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  3471  000FF4  848C               	bsf	3980,2,c	;volatile
  3472                           
  3473                           ;lcd.c: 33: lcdNibble(data);
  3474  000FF6  5016               	movf	putch@data,w,c
  3475  000FF8  EC5E  F006         	call	_lcdNibble
  3476                           
  3477                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3478  000FFC  0EC8               	movlw	200
  3479  000FFE                     u1977:
  3480  000FFE  D000               	nop2	
  3481  001000  2EE8               	decfsz	wreg,f,c
  3482  001002  D7FD               	bra	u1977
  3483  001004  0012               	return		;funcret
  3484  001006                     __end_of_putch:
  3485                           	opt stack 0
  3486                           tblptru	equ	0xFF8
  3487                           tblptrh	equ	0xFF7
  3488                           tblptrl	equ	0xFF6
  3489                           tablat	equ	0xFF5
  3490                           prodh	equ	0xFF4
  3491                           prodl	equ	0xFF3
  3492                           intcon	equ	0xFF2
  3493                           intcon3	equ	0xFF0
  3494                           postinc0	equ	0xFEE
  3495                           wreg	equ	0xFE8
  3496                           postdec1	equ	0xFE5
  3497                           plusw1	equ	0xFE3
  3498                           fsr1l	equ	0xFE1
  3499                           indf2	equ	0xFDF
  3500                           postinc2	equ	0xFDE
  3501                           postdec2	equ	0xFDD
  3502                           plusw2	equ	0xFDB
  3503                           fsr2h	equ	0xFDA
  3504                           fsr2l	equ	0xFD9
  3505                           status	equ	0xFD8
  3506                           
  3507 ;; *************** function _isdigit *****************
  3508 ;; Defined at:
  3509 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;  c               1    wreg     unsigned char 
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;  c               1   21[COMRAM] unsigned char 
  3514 ;; Return value:  Size  Location     Type
  3515 ;;		None               void
  3516 ;; Registers used:
  3517 ;;		wreg, status,2, status,0
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;Total ram usage:        3 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; Hardware stack levels required when called:    1
  3530 ;; This function calls:
  3531 ;;		Nothing
  3532 ;; This function is called by:
  3533 ;;		_printf
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	text4
  3538  000FB8                     __ptext4:
  3539                           	opt stack 0
  3540  000FB8                     _isdigit:
  3541                           	opt stack 28
  3542                           
  3543                           ;incstack = 0
  3544                           ;isdigit@c stored from wreg
  3545  000FB8  6E16               	movwf	isdigit@c,c
  3546  000FBA  0E00               	movlw	0
  3547  000FBC  6E15               	movwf	_isdigit$795,c
  3548  000FBE  0E3A               	movlw	58
  3549  000FC0  6016               	cpfslt	isdigit@c,c
  3550  000FC2  D005               	goto	l745
  3551  000FC4  0E2F               	movlw	47
  3552  000FC6  6416               	cpfsgt	isdigit@c,c
  3553  000FC8  D002               	goto	l745
  3554  000FCA  0E01               	movlw	1
  3555  000FCC  6E15               	movwf	_isdigit$795,c
  3556  000FCE                     l745:
  3557  000FCE  C015  F014         	movff	_isdigit$795,??_isdigit
  3558  000FD2  3014               	rrcf	??_isdigit,w,c
  3559  000FD4  0012               	return	
  3560  000FD6                     __end_of_isdigit:
  3561                           	opt stack 0
  3562                           tblptru	equ	0xFF8
  3563                           tblptrh	equ	0xFF7
  3564                           tblptrl	equ	0xFF6
  3565                           tablat	equ	0xFF5
  3566                           prodh	equ	0xFF4
  3567                           prodl	equ	0xFF3
  3568                           intcon	equ	0xFF2
  3569                           intcon3	equ	0xFF0
  3570                           postinc0	equ	0xFEE
  3571                           wreg	equ	0xFE8
  3572                           postdec1	equ	0xFE5
  3573                           plusw1	equ	0xFE3
  3574                           fsr1l	equ	0xFE1
  3575                           indf2	equ	0xFDF
  3576                           postinc2	equ	0xFDE
  3577                           postdec2	equ	0xFDD
  3578                           plusw2	equ	0xFDB
  3579                           fsr2h	equ	0xFDA
  3580                           fsr2l	equ	0xFD9
  3581                           status	equ	0xFD8
  3582                           
  3583 ;; *************** function ___wmul *****************
  3584 ;; Defined at:
  3585 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  multiplier      2   19[COMRAM] unsigned int 
  3588 ;;  multiplicand    2   21[COMRAM] unsigned int 
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;  product         2   23[COMRAM] unsigned int 
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  2   19[COMRAM] unsigned int 
  3593 ;; Registers used:
  3594 ;;		wreg, status,2, status,0, prodl, prodh
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3600 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3601 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3603 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3604 ;;Total ram usage:        6 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    1
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_printf
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text5
  3615  000F6E                     __ptext5:
  3616                           	opt stack 0
  3617  000F6E                     ___wmul:
  3618                           	opt stack 28
  3619                           
  3620                           ;incstack = 0
  3621  000F6E  5014               	movf	___wmul@multiplier,w,c
  3622  000F70  0216               	mulwf	___wmul@multiplicand,c
  3623  000F72  CFF3 F018          	movff	prodl,___wmul@product
  3624  000F76  CFF4 F019          	movff	prodh,___wmul@product+1
  3625  000F7A  5014               	movf	___wmul@multiplier,w,c
  3626  000F7C  0217               	mulwf	___wmul@multiplicand+1,c
  3627  000F7E  50F3               	movf	prodl,w,c
  3628  000F80  2619               	addwf	___wmul@product+1,f,c
  3629  000F82  5015               	movf	___wmul@multiplier+1,w,c
  3630  000F84  0216               	mulwf	___wmul@multiplicand,c
  3631  000F86  50F3               	movf	prodl,w,c
  3632  000F88  2619               	addwf	___wmul@product+1,f,c
  3633  000F8A  C018  F014         	movff	___wmul@product,?___wmul
  3634  000F8E  C019  F015         	movff	___wmul@product+1,?___wmul+1
  3635  000F92  0012               	return	
  3636  000F94                     __end_of___wmul:
  3637                           	opt stack 0
  3638                           tblptru	equ	0xFF8
  3639                           tblptrh	equ	0xFF7
  3640                           tblptrl	equ	0xFF6
  3641                           tablat	equ	0xFF5
  3642                           prodh	equ	0xFF4
  3643                           prodl	equ	0xFF3
  3644                           intcon	equ	0xFF2
  3645                           intcon3	equ	0xFF0
  3646                           postinc0	equ	0xFEE
  3647                           wreg	equ	0xFE8
  3648                           postdec1	equ	0xFE5
  3649                           plusw1	equ	0xFE3
  3650                           fsr1l	equ	0xFE1
  3651                           indf2	equ	0xFDF
  3652                           postinc2	equ	0xFDE
  3653                           postdec2	equ	0xFDD
  3654                           plusw2	equ	0xFDB
  3655                           fsr2h	equ	0xFDA
  3656                           fsr2l	equ	0xFD9
  3657                           status	equ	0xFD8
  3658                           
  3659 ;; *************** function ___lwmod *****************
  3660 ;; Defined at:
  3661 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  dividend        2   26[COMRAM] unsigned int 
  3664 ;;  divisor         2   28[COMRAM] unsigned int 
  3665 ;; Auto vars:     Size  Location     Type
  3666 ;;  counter         1   30[COMRAM] unsigned char 
  3667 ;; Return value:  Size  Location     Type
  3668 ;;                  2   26[COMRAM] unsigned int 
  3669 ;; Registers used:
  3670 ;;		wreg, status,2, status,0
  3671 ;; Tracked objects:
  3672 ;;		On entry : 0/0
  3673 ;;		On exit  : 0/0
  3674 ;;		Unchanged: 0/0
  3675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3676 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3679 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3680 ;;Total ram usage:        5 bytes
  3681 ;; Hardware stack levels used:    1
  3682 ;; Hardware stack levels required when called:    1
  3683 ;; This function calls:
  3684 ;;		Nothing
  3685 ;; This function is called by:
  3686 ;;		_printf
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           	psect	text6
  3691  000EF2                     __ptext6:
  3692                           	opt stack 0
  3693  000EF2                     ___lwmod:
  3694                           	opt stack 28
  3695                           
  3696                           ;incstack = 0
  3697  000EF2  501D               	movf	___lwmod@divisor,w,c
  3698  000EF4  101E               	iorwf	___lwmod@divisor+1,w,c
  3699  000EF6  B4D8               	btfsc	status,2,c
  3700  000EF8  D018               	goto	l839
  3701  000EFA  0E01               	movlw	1
  3702  000EFC  6E1F               	movwf	___lwmod@counter,c
  3703  000EFE  D004               	goto	l834
  3704  000F00  90D8               	bcf	status,0,c
  3705  000F02  361D               	rlcf	___lwmod@divisor,f,c
  3706  000F04  361E               	rlcf	___lwmod@divisor+1,f,c
  3707  000F06  2A1F               	incf	___lwmod@counter,f,c
  3708  000F08                     l834:
  3709  000F08  AE1E               	btfss	___lwmod@divisor+1,7,c
  3710  000F0A  D7FA               	goto	l835
  3711  000F0C                     u1030:
  3712  000F0C  501D               	movf	___lwmod@divisor,w,c
  3713  000F0E  5C1B               	subwf	___lwmod@dividend,w,c
  3714  000F10  501E               	movf	___lwmod@divisor+1,w,c
  3715  000F12  581C               	subwfb	___lwmod@dividend+1,w,c
  3716  000F14  A0D8               	btfss	status,0,c
  3717  000F16  D004               	goto	l838
  3718  000F18  501D               	movf	___lwmod@divisor,w,c
  3719  000F1A  5E1B               	subwf	___lwmod@dividend,f,c
  3720  000F1C  501E               	movf	___lwmod@divisor+1,w,c
  3721  000F1E  5A1C               	subwfb	___lwmod@dividend+1,f,c
  3722  000F20                     l838:
  3723  000F20  90D8               	bcf	status,0,c
  3724  000F22  321E               	rrcf	___lwmod@divisor+1,f,c
  3725  000F24  321D               	rrcf	___lwmod@divisor,f,c
  3726  000F26  2E1F               	decfsz	___lwmod@counter,f,c
  3727  000F28  D7F1               	goto	u1030
  3728  000F2A                     l839:
  3729  000F2A  C01B  F01B         	movff	___lwmod@dividend,?___lwmod
  3730  000F2E  C01C  F01C         	movff	___lwmod@dividend+1,?___lwmod+1
  3731  000F32  0012               	return		;funcret
  3732  000F34                     __end_of___lwmod:
  3733                           	opt stack 0
  3734                           tblptru	equ	0xFF8
  3735                           tblptrh	equ	0xFF7
  3736                           tblptrl	equ	0xFF6
  3737                           tablat	equ	0xFF5
  3738                           prodh	equ	0xFF4
  3739                           prodl	equ	0xFF3
  3740                           intcon	equ	0xFF2
  3741                           intcon3	equ	0xFF0
  3742                           postinc0	equ	0xFEE
  3743                           wreg	equ	0xFE8
  3744                           postdec1	equ	0xFE5
  3745                           plusw1	equ	0xFE3
  3746                           fsr1l	equ	0xFE1
  3747                           indf2	equ	0xFDF
  3748                           postinc2	equ	0xFDE
  3749                           postdec2	equ	0xFDD
  3750                           plusw2	equ	0xFDB
  3751                           fsr2h	equ	0xFDA
  3752                           fsr2l	equ	0xFD9
  3753                           status	equ	0xFD8
  3754                           
  3755 ;; *************** function ___lwdiv *****************
  3756 ;; Defined at:
  3757 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  dividend        2   19[COMRAM] unsigned int 
  3760 ;;  divisor         2   21[COMRAM] unsigned int 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  quotient        2   23[COMRAM] unsigned int 
  3763 ;;  counter         1   25[COMRAM] unsigned char 
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  2   19[COMRAM] unsigned int 
  3766 ;; Registers used:
  3767 ;;		wreg, status,2, status,0
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3773 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;Total ram usage:        7 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    1
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_printf
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text7
  3788  000E06                     __ptext7:
  3789                           	opt stack 0
  3790  000E06                     ___lwdiv:
  3791                           	opt stack 28
  3792                           
  3793                           ;incstack = 0
  3794  000E06  0E00               	movlw	0
  3795  000E08  6E19               	movwf	___lwdiv@quotient+1,c
  3796  000E0A  0E00               	movlw	0
  3797  000E0C  6E18               	movwf	___lwdiv@quotient,c
  3798  000E0E  5016               	movf	___lwdiv@divisor,w,c
  3799  000E10  1017               	iorwf	___lwdiv@divisor+1,w,c
  3800  000E12  B4D8               	btfsc	status,2,c
  3801  000E14  D01C               	goto	l829
  3802  000E16  0E01               	movlw	1
  3803  000E18  6E1A               	movwf	___lwdiv@counter,c
  3804  000E1A  D004               	goto	l824
  3805  000E1C  90D8               	bcf	status,0,c
  3806  000E1E  3616               	rlcf	___lwdiv@divisor,f,c
  3807  000E20  3617               	rlcf	___lwdiv@divisor+1,f,c
  3808  000E22  2A1A               	incf	___lwdiv@counter,f,c
  3809  000E24                     l824:
  3810  000E24  AE17               	btfss	___lwdiv@divisor+1,7,c
  3811  000E26  D7FA               	goto	l825
  3812  000E28                     u1000:
  3813  000E28  90D8               	bcf	status,0,c
  3814  000E2A  3618               	rlcf	___lwdiv@quotient,f,c
  3815  000E2C  3619               	rlcf	___lwdiv@quotient+1,f,c
  3816  000E2E  5016               	movf	___lwdiv@divisor,w,c
  3817  000E30  5C14               	subwf	___lwdiv@dividend,w,c
  3818  000E32  5017               	movf	___lwdiv@divisor+1,w,c
  3819  000E34  5815               	subwfb	___lwdiv@dividend+1,w,c
  3820  000E36  A0D8               	btfss	status,0,c
  3821  000E38  D005               	goto	l828
  3822  000E3A  5016               	movf	___lwdiv@divisor,w,c
  3823  000E3C  5E14               	subwf	___lwdiv@dividend,f,c
  3824  000E3E  5017               	movf	___lwdiv@divisor+1,w,c
  3825  000E40  5A15               	subwfb	___lwdiv@dividend+1,f,c
  3826  000E42  8018               	bsf	___lwdiv@quotient,0,c
  3827  000E44                     l828:
  3828  000E44  90D8               	bcf	status,0,c
  3829  000E46  3217               	rrcf	___lwdiv@divisor+1,f,c
  3830  000E48  3216               	rrcf	___lwdiv@divisor,f,c
  3831  000E4A  2E1A               	decfsz	___lwdiv@counter,f,c
  3832  000E4C  D7ED               	goto	u1000
  3833  000E4E                     l829:
  3834  000E4E  C018  F014         	movff	___lwdiv@quotient,?___lwdiv
  3835  000E52  C019  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3836  000E56  0012               	return		;funcret
  3837  000E58                     __end_of___lwdiv:
  3838                           	opt stack 0
  3839                           tblptru	equ	0xFF8
  3840                           tblptrh	equ	0xFF7
  3841                           tblptrl	equ	0xFF6
  3842                           tablat	equ	0xFF5
  3843                           prodh	equ	0xFF4
  3844                           prodl	equ	0xFF3
  3845                           intcon	equ	0xFF2
  3846                           intcon3	equ	0xFF0
  3847                           postinc0	equ	0xFEE
  3848                           wreg	equ	0xFE8
  3849                           postdec1	equ	0xFE5
  3850                           plusw1	equ	0xFE3
  3851                           fsr1l	equ	0xFE1
  3852                           indf2	equ	0xFDF
  3853                           postinc2	equ	0xFDE
  3854                           postdec2	equ	0xFDD
  3855                           plusw2	equ	0xFDB
  3856                           fsr2h	equ	0xFDA
  3857                           fsr2l	equ	0xFD9
  3858                           status	equ	0xFD8
  3859                           
  3860 ;; *************** function _lcd_set_cursor *****************
  3861 ;; Defined at:
  3862 ;;		line 80 in file "lcd.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  x               1    wreg     unsigned char 
  3865 ;;  y               1   25[COMRAM] unsigned char 
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;  x               1   27[COMRAM] unsigned char 
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      void 
  3870 ;; Registers used:
  3871 ;;		wreg, status,2, status,0, cstack
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3877 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;Total ram usage:        3 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    4
  3884 ;; This function calls:
  3885 ;;		_lcdInst
  3886 ;;		_lcd_shift_cursor
  3887 ;; This function is called by:
  3888 ;;		_operation
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text8
  3893  000D3A                     __ptext8:
  3894                           	opt stack 0
  3895  000D3A                     _lcd_set_cursor:
  3896                           	opt stack 25
  3897                           
  3898                           ;incstack = 0
  3899                           ;lcd_set_cursor@x stored from wreg
  3900  000D3A  6E1C               	movwf	lcd_set_cursor@x,c
  3901                           
  3902                           ;lcd.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3903  000D3C  0E80               	movlw	128
  3904  000D3E  EC03  F008         	call	_lcdInst
  3905  000D42  0E41               	movlw	65
  3906  000D44  6E1B               	movwf	??_lcd_set_cursor& (0+255),c
  3907  000D46  0EEE               	movlw	238
  3908  000D48                     u1987:
  3909  000D48  2EE8               	decfsz	wreg,f,c
  3910  000D4A  D7FE               	bra	u1987
  3911  000D4C  2E1B               	decfsz	??_lcd_set_cursor& (0+255),f,c
  3912  000D4E  D7FC               	bra	u1987
  3913  000D50  D000               	nop2	
  3914                           
  3915                           ;lcd.c: 92: switch (y) {
  3916  000D52  D018               	goto	l41
  3917  000D54                     
  3918                           ;lcd.c: 94: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3919  000D54  0E80               	movlw	128
  3920  000D56  EC03  F008         	call	_lcdInst
  3921  000D5A  0E41               	movlw	65
  3922  000D5C  6E1B               	movwf	??_lcd_set_cursor& (0+255),c
  3923  000D5E  0EEE               	movlw	238
  3924  000D60                     u1997:
  3925  000D60  2EE8               	decfsz	wreg,f,c
  3926  000D62  D7FE               	bra	u1997
  3927  000D64  2E1B               	decfsz	??_lcd_set_cursor& (0+255),f,c
  3928  000D66  D7FC               	bra	u1997
  3929  000D68  D000               	nop2	
  3930                           
  3931                           ;lcd.c: 95: break;
  3932  000D6A  D019               	goto	l43
  3933  000D6C                     
  3934                           ;lcd.c: 97: lcdInst(0xC0);;
  3935  000D6C  0EC0               	movlw	192
  3936  000D6E  EC03  F008         	call	_lcdInst
  3937                           
  3938                           ;lcd.c: 98: break;
  3939  000D72  D015               	goto	l43
  3940  000D74                     
  3941                           ;lcd.c: 100: lcdInst(0x94);;
  3942  000D74  0E94               	movlw	148
  3943  000D76  EC03  F008         	call	_lcdInst
  3944                           
  3945                           ;lcd.c: 101: break;
  3946  000D7A  D011               	goto	l43
  3947  000D7C                     
  3948                           ;lcd.c: 103: lcdInst(0xD4);;
  3949  000D7C  0ED4               	movlw	212
  3950  000D7E  EC03  F008         	call	_lcdInst
  3951                           
  3952                           ;lcd.c: 105: }
  3953                           
  3954                           ;lcd.c: 104: break;
  3955  000D82  D00D               	goto	l43
  3956  000D84                     l41:
  3957  000D84  501A               	movf	lcd_set_cursor@y,w,c
  3958                           
  3959                           ; Switch size 1, requested type "space"
  3960                           ; Number of cases is 4, Range of values is 0 to 3
  3961                           ; switch strategies available:
  3962                           ; Name         Instructions Cycles
  3963                           ; simple_byte           13     7 (average)
  3964                           ;	Chosen strategy is simple_byte
  3965  000D86  0A00               	xorlw	0	; case 0
  3966  000D88  B4D8               	btfsc	status,2,c
  3967  000D8A  D7E4               	goto	l42
  3968  000D8C  0A01               	xorlw	1	; case 1
  3969  000D8E  B4D8               	btfsc	status,2,c
  3970  000D90  D7ED               	goto	l44
  3971  000D92  0A03               	xorlw	3	; case 2
  3972  000D94  B4D8               	btfsc	status,2,c
  3973  000D96  D7EE               	goto	l45
  3974  000D98  0A01               	xorlw	1	; case 3
  3975  000D9A  B4D8               	btfsc	status,2,c
  3976  000D9C  D7EF               	goto	l46
  3977  000D9E                     l43:
  3978                           
  3979                           ;lcd.c: 107: lcd_shift_cursor(x, 1);
  3980  000D9E  0E01               	movlw	1
  3981  000DA0  6E17               	movwf	lcd_shift_cursor@direction,c
  3982  000DA2  501C               	movf	lcd_set_cursor@x,w,c
  3983  000DA4  ECEB  F007         	call	_lcd_shift_cursor
  3984  000DA8  0012               	return		;funcret
  3985  000DAA                     __end_of_lcd_set_cursor:
  3986                           	opt stack 0
  3987                           tblptru	equ	0xFF8
  3988                           tblptrh	equ	0xFF7
  3989                           tblptrl	equ	0xFF6
  3990                           tablat	equ	0xFF5
  3991                           prodh	equ	0xFF4
  3992                           prodl	equ	0xFF3
  3993                           intcon	equ	0xFF2
  3994                           intcon3	equ	0xFF0
  3995                           postinc0	equ	0xFEE
  3996                           wreg	equ	0xFE8
  3997                           postdec1	equ	0xFE5
  3998                           plusw1	equ	0xFE3
  3999                           fsr1l	equ	0xFE1
  4000                           indf2	equ	0xFDF
  4001                           postinc2	equ	0xFDE
  4002                           postdec2	equ	0xFDD
  4003                           plusw2	equ	0xFDB
  4004                           fsr2h	equ	0xFDA
  4005                           fsr2l	equ	0xFD9
  4006                           status	equ	0xFD8
  4007                           
  4008 ;; *************** function _lcd_shift_cursor *****************
  4009 ;; Defined at:
  4010 ;;		line 110 in file "lcd.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  numChars        1    wreg     unsigned char 
  4013 ;;  direction       1   22[COMRAM] unsigned char 
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;  numChars        1   23[COMRAM] unsigned char 
  4016 ;;  n               1   24[COMRAM] unsigned char 
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      void 
  4019 ;; Registers used:
  4020 ;;		wreg, status,2, status,0, cstack
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4026 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4027 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4030 ;;Total ram usage:        3 bytes
  4031 ;; Hardware stack levels used:    1
  4032 ;; Hardware stack levels required when called:    3
  4033 ;; This function calls:
  4034 ;;		_lcdInst
  4035 ;; This function is called by:
  4036 ;;		_lcd_set_cursor
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           	psect	text9
  4041  000FD6                     __ptext9:
  4042                           	opt stack 0
  4043  000FD6                     _lcd_shift_cursor:
  4044                           	opt stack 25
  4045                           
  4046                           ;incstack = 0
  4047                           ;lcd_shift_cursor@numChars stored from wreg
  4048  000FD6  6E18               	movwf	lcd_shift_cursor@numChars,c
  4049                           
  4050                           ;lcd.c: 122: for(unsigned char n = numChars; n > 0; n--){
  4051  000FD8  C018  F019         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  4052  000FDC                     l1836:
  4053  000FDC  5019               	movf	lcd_shift_cursor@n,w,c
  4054  000FDE  B4D8               	btfsc	status,2,c
  4055  000FE0  0012               	return	
  4056                           
  4057                           ;lcd.c: 125: lcdInst((unsigned char)(0x10 | (direction << 2)));
  4058  000FE2  4417               	rlncf	lcd_shift_cursor@direction,w,c
  4059  000FE4  46E8               	rlncf	wreg,f,c
  4060  000FE6  0BFC               	andlw	252
  4061  000FE8  0910               	iorlw	16
  4062  000FEA  EC03  F008         	call	_lcdInst
  4063  000FEE  0619               	decf	lcd_shift_cursor@n,f,c
  4064  000FF0  D7F5               	goto	l1836
  4065  000FF2                     __end_of_lcd_shift_cursor:
  4066                           	opt stack 0
  4067                           tblptru	equ	0xFF8
  4068                           tblptrh	equ	0xFF7
  4069                           tblptrl	equ	0xFF6
  4070                           tablat	equ	0xFF5
  4071                           prodh	equ	0xFF4
  4072                           prodl	equ	0xFF3
  4073                           intcon	equ	0xFF2
  4074                           intcon3	equ	0xFF0
  4075                           postinc0	equ	0xFEE
  4076                           wreg	equ	0xFE8
  4077                           postdec1	equ	0xFE5
  4078                           plusw1	equ	0xFE3
  4079                           fsr1l	equ	0xFE1
  4080                           indf2	equ	0xFDF
  4081                           postinc2	equ	0xFDE
  4082                           postdec2	equ	0xFDD
  4083                           plusw2	equ	0xFDB
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function _logging *****************
  4089 ;; Defined at:
  4090 ;;		line 451 in file "main.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;		None
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		None
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;Total ram usage:        0 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    1
  4111 ;; This function calls:
  4112 ;;		Nothing
  4113 ;; This function is called by:
  4114 ;;		_main
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text10
  4119  00104C                     __ptext10:
  4120                           	opt stack 0
  4121  00104C                     _logging:
  4122                           	opt stack 29
  4123                           
  4124                           ;main.c: 452: return;
  4125                           
  4126                           ;incstack = 0
  4127  00104C  0012               	return		;funcret
  4128  00104E                     __end_of_logging:
  4129                           	opt stack 0
  4130                           tblptru	equ	0xFF8
  4131                           tblptrh	equ	0xFF7
  4132                           tblptrl	equ	0xFF6
  4133                           tablat	equ	0xFF5
  4134                           prodh	equ	0xFF4
  4135                           prodl	equ	0xFF3
  4136                           intcon	equ	0xFF2
  4137                           intcon3	equ	0xFF0
  4138                           postinc0	equ	0xFEE
  4139                           wreg	equ	0xFE8
  4140                           postdec1	equ	0xFE5
  4141                           plusw1	equ	0xFE3
  4142                           fsr1l	equ	0xFE1
  4143                           indf2	equ	0xFDF
  4144                           postinc2	equ	0xFDE
  4145                           postdec2	equ	0xFDD
  4146                           plusw2	equ	0xFDB
  4147                           fsr2h	equ	0xFDA
  4148                           fsr2l	equ	0xFD9
  4149                           status	equ	0xFD8
  4150                           
  4151 ;; *************** function _initLCD *****************
  4152 ;; Defined at:
  4153 ;;		line 60 in file "lcd.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  1    wreg      void 
  4160 ;; Registers used:
  4161 ;;		wreg, status,2, status,0, cstack
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;Total ram usage:        1 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    3
  4174 ;; This function calls:
  4175 ;;		_lcdInst
  4176 ;; This function is called by:
  4177 ;;		_main
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text11
  4182  000EA6                     __ptext11:
  4183                           	opt stack 0
  4184  000EA6                     _initLCD:
  4185                           	opt stack 27
  4186                           
  4187                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  4188                           
  4189                           ;incstack = 0
  4190  000EA6  0EC3               	movlw	195
  4191  000EA8  6E17               	movwf	??_initLCD& (0+255),c
  4192  000EAA  0ECD               	movlw	205
  4193  000EAC                     u2007:
  4194  000EAC  2EE8               	decfsz	wreg,f,c
  4195  000EAE  D7FE               	bra	u2007
  4196  000EB0  2E17               	decfsz	??_initLCD& (0+255),f,c
  4197  000EB2  D7FC               	bra	u2007
  4198  000EB4  F000               	nop	
  4199                           
  4200                           ;lcd.c: 69: lcdInst(0b00110011);
  4201  000EB6  0E33               	movlw	51
  4202  000EB8  EC03  F008         	call	_lcdInst
  4203                           
  4204                           ;lcd.c: 70: lcdInst(0b00110010);
  4205  000EBC  0E32               	movlw	50
  4206  000EBE  EC03  F008         	call	_lcdInst
  4207                           
  4208                           ;lcd.c: 71: lcdInst(0b00101000);
  4209  000EC2  0E28               	movlw	40
  4210  000EC4  EC03  F008         	call	_lcdInst
  4211                           
  4212                           ;lcd.c: 72: lcdInst(0b00001111);
  4213  000EC8  0E0F               	movlw	15
  4214  000ECA  EC03  F008         	call	_lcdInst
  4215                           
  4216                           ;lcd.c: 73: lcdInst(0b00000110);
  4217  000ECE  0E06               	movlw	6
  4218  000ED0  EC03  F008         	call	_lcdInst
  4219                           
  4220                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4221  000ED4  0E01               	movlw	1
  4222  000ED6  EC03  F008         	call	_lcdInst
  4223  000EDA  0EC3               	movlw	195
  4224  000EDC  6E17               	movwf	??_initLCD& (0+255),c
  4225  000EDE  0ECD               	movlw	205
  4226  000EE0                     u2017:
  4227  000EE0  2EE8               	decfsz	wreg,f,c
  4228  000EE2  D7FE               	bra	u2017
  4229  000EE4  2E17               	decfsz	??_initLCD& (0+255),f,c
  4230  000EE6  D7FC               	bra	u2017
  4231  000EE8  F000               	nop	
  4232                           
  4233                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  4234  000EEA  0E0F               	movlw	15
  4235  000EEC  EC03  F008         	call	_lcdInst
  4236  000EF0  0012               	return		;funcret
  4237  000EF2                     __end_of_initLCD:
  4238                           	opt stack 0
  4239                           tblptru	equ	0xFF8
  4240                           tblptrh	equ	0xFF7
  4241                           tblptrl	equ	0xFF6
  4242                           tablat	equ	0xFF5
  4243                           prodh	equ	0xFF4
  4244                           prodl	equ	0xFF3
  4245                           intcon	equ	0xFF2
  4246                           intcon3	equ	0xFF0
  4247                           postinc0	equ	0xFEE
  4248                           wreg	equ	0xFE8
  4249                           postdec1	equ	0xFE5
  4250                           plusw1	equ	0xFE3
  4251                           fsr1l	equ	0xFE1
  4252                           indf2	equ	0xFDF
  4253                           postinc2	equ	0xFDE
  4254                           postdec2	equ	0xFDD
  4255                           plusw2	equ	0xFDB
  4256                           fsr2h	equ	0xFDA
  4257                           fsr2l	equ	0xFD9
  4258                           status	equ	0xFD8
  4259                           
  4260 ;; *************** function _lcdInst *****************
  4261 ;; Defined at:
  4262 ;;		line 11 in file "lcd.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;  data            1    wreg     unsigned char 
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  data            1   21[COMRAM] unsigned char 
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  1    wreg      void 
  4269 ;; Registers used:
  4270 ;;		wreg, status,2, status,0, cstack
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4277 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;Total ram usage:        1 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; Hardware stack levels required when called:    2
  4283 ;; This function calls:
  4284 ;;		_lcdNibble
  4285 ;; This function is called by:
  4286 ;;		_initLCD
  4287 ;;		_lcd_set_cursor
  4288 ;;		_lcd_shift_cursor
  4289 ;;		_main
  4290 ;;		_operation
  4291 ;;		_lcd_shift_display
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text12
  4296  001006                     __ptext12:
  4297                           	opt stack 0
  4298  001006                     _lcdInst:
  4299                           	opt stack 25
  4300                           
  4301                           ;incstack = 0
  4302                           ;lcdInst@data stored from wreg
  4303  001006  6E16               	movwf	lcdInst@data,c
  4304                           
  4305                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  4306  001008  948C               	bcf	3980,2,c	;volatile
  4307                           
  4308                           ;lcd.c: 20: lcdNibble(data);
  4309  00100A  5016               	movf	lcdInst@data,w,c
  4310  00100C  EC5E  F006         	call	_lcdNibble
  4311                           
  4312                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4313  001010  0EC8               	movlw	200
  4314  001012                     u2027:
  4315  001012  D000               	nop2	
  4316  001014  2EE8               	decfsz	wreg,f,c
  4317  001016  D7FD               	bra	u2027
  4318  001018  0012               	return		;funcret
  4319  00101A                     __end_of_lcdInst:
  4320                           	opt stack 0
  4321                           tblptru	equ	0xFF8
  4322                           tblptrh	equ	0xFF7
  4323                           tblptrl	equ	0xFF6
  4324                           tablat	equ	0xFF5
  4325                           prodh	equ	0xFF4
  4326                           prodl	equ	0xFF3
  4327                           intcon	equ	0xFF2
  4328                           intcon3	equ	0xFF0
  4329                           postinc0	equ	0xFEE
  4330                           wreg	equ	0xFE8
  4331                           postdec1	equ	0xFE5
  4332                           plusw1	equ	0xFE3
  4333                           fsr1l	equ	0xFE1
  4334                           indf2	equ	0xFDF
  4335                           postinc2	equ	0xFDE
  4336                           postdec2	equ	0xFDD
  4337                           plusw2	equ	0xFDB
  4338                           fsr2h	equ	0xFDA
  4339                           fsr2l	equ	0xFD9
  4340                           status	equ	0xFD8
  4341                           
  4342 ;; *************** function _lcdNibble *****************
  4343 ;; Defined at:
  4344 ;;		line 37 in file "lcd.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  data            1    wreg     unsigned char 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  data            1   20[COMRAM] unsigned char 
  4349 ;;  temp            1   19[COMRAM] unsigned char 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  1    wreg      void 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4362 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;Total ram usage:        2 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:    1
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_lcdInst
  4370 ;;		_putch
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text13
  4375  000CBC                     __ptext13:
  4376                           	opt stack 0
  4377  000CBC                     _lcdNibble:
  4378                           	opt stack 27
  4379                           
  4380                           ;incstack = 0
  4381                           ;lcdNibble@data stored from wreg
  4382  000CBC  6E15               	movwf	lcdNibble@data,c
  4383                           
  4384                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  4385  000CBE  5015               	movf	lcdNibble@data,w,c
  4386  000CC0  0BF0               	andlw	240
  4387  000CC2  6E14               	movwf	lcdNibble@temp,c
  4388                           
  4389                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  4390  000CC4  508C               	movf	3980,w,c	;volatile
  4391  000CC6  0B0F               	andlw	15
  4392  000CC8  6E8C               	movwf	3980,c	;volatile
  4393                           
  4394                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  4395  000CCA  5014               	movf	lcdNibble@temp,w,c
  4396  000CCC  108C               	iorwf	3980,w,c	;volatile
  4397  000CCE  6E8C               	movwf	3980,c	;volatile
  4398                           
  4399                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4400  000CD0  0E00               	movlw	0
  4401  000CD2  BEF2               	btfsc	intcon,7,c	;volatile
  4402  000CD4  0E01               	movlw	1
  4403  000CD6  6E5E               	movwf	_LCDinterruptState,c
  4404  000CD8  9EF2               	bcf	intcon,7,c	;volatile
  4405  000CDA  868C               	bsf	3980,3,c	;volatile
  4406  000CDC  0E53               	movlw	83
  4407  000CDE                     u2037:
  4408  000CDE  2EE8               	decfsz	wreg,f,c
  4409  000CE0  D7FE               	bra	u2037
  4410  000CE2  F000               	nop	
  4411  000CE4  968C               	bcf	3980,3,c	;volatile
  4412  000CE6  0EC8               	movlw	200
  4413  000CE8                     u2047:
  4414  000CE8  D000               	nop2	
  4415  000CEA  2EE8               	decfsz	wreg,f,c
  4416  000CEC  D7FD               	bra	u2047
  4417  000CEE  B05E               	btfsc	_LCDinterruptState,0,c
  4418  000CF0  D002               	bra	u15
  4419  000CF2  9EF2               	bcf	intcon,7,c	;volatile
  4420  000CF4  D001               	bra	u16
  4421  000CF6                     u15:
  4422  000CF6  8EF2               	bsf	intcon,7,c	;volatile
  4423  000CF8                     u16:
  4424                           
  4425                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  4426  000CF8  3815               	swapf	lcdNibble@data,w,c
  4427  000CFA  0BF0               	andlw	240
  4428  000CFC  6E15               	movwf	lcdNibble@data,c
  4429                           
  4430                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  4431  000CFE  5015               	movf	lcdNibble@data,w,c
  4432  000D00  0BF0               	andlw	240
  4433  000D02  6E14               	movwf	lcdNibble@temp,c
  4434                           
  4435                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  4436  000D04  508C               	movf	3980,w,c	;volatile
  4437  000D06  0B0F               	andlw	15
  4438  000D08  6E8C               	movwf	3980,c	;volatile
  4439                           
  4440                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  4441  000D0A  5014               	movf	lcdNibble@temp,w,c
  4442  000D0C  108C               	iorwf	3980,w,c	;volatile
  4443  000D0E  6E8C               	movwf	3980,c	;volatile
  4444                           
  4445                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4446  000D10  0E00               	movlw	0
  4447  000D12  BEF2               	btfsc	intcon,7,c	;volatile
  4448  000D14  0E01               	movlw	1
  4449  000D16  6E5E               	movwf	_LCDinterruptState,c
  4450  000D18  9EF2               	bcf	intcon,7,c	;volatile
  4451  000D1A  868C               	bsf	3980,3,c	;volatile
  4452  000D1C  0E53               	movlw	83
  4453  000D1E                     u2057:
  4454  000D1E  2EE8               	decfsz	wreg,f,c
  4455  000D20  D7FE               	bra	u2057
  4456  000D22  F000               	nop	
  4457  000D24  968C               	bcf	3980,3,c	;volatile
  4458  000D26  0EC8               	movlw	200
  4459  000D28                     u2067:
  4460  000D28  D000               	nop2	
  4461  000D2A  2EE8               	decfsz	wreg,f,c
  4462  000D2C  D7FD               	bra	u2067
  4463  000D2E  B05E               	btfsc	_LCDinterruptState,0,c
  4464  000D30  D002               	bra	u25
  4465  000D32  9EF2               	bcf	intcon,7,c	;volatile
  4466  000D34  D001               	bra	u26
  4467  000D36                     u25:
  4468  000D36  8EF2               	bsf	intcon,7,c	;volatile
  4469  000D38                     u26:
  4470  000D38  0012               	return		;funcret
  4471  000D3A                     __end_of_lcdNibble:
  4472                           	opt stack 0
  4473                           tblptru	equ	0xFF8
  4474                           tblptrh	equ	0xFF7
  4475                           tblptrl	equ	0xFF6
  4476                           tablat	equ	0xFF5
  4477                           prodh	equ	0xFF4
  4478                           prodl	equ	0xFF3
  4479                           intcon	equ	0xFF2
  4480                           intcon3	equ	0xFF0
  4481                           postinc0	equ	0xFEE
  4482                           wreg	equ	0xFE8
  4483                           postdec1	equ	0xFE5
  4484                           plusw1	equ	0xFE3
  4485                           fsr1l	equ	0xFE1
  4486                           indf2	equ	0xFDF
  4487                           postinc2	equ	0xFDE
  4488                           postdec2	equ	0xFDD
  4489                           plusw2	equ	0xFDB
  4490                           fsr2h	equ	0xFDA
  4491                           fsr2l	equ	0xFD9
  4492                           status	equ	0xFD8
  4493                           
  4494 ;; *************** function _RTC_setTime *****************
  4495 ;; Defined at:
  4496 ;;		line 455 in file "main.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;		None
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  i               1   22[COMRAM] unsigned char 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;                  1    wreg      void 
  4503 ;; Registers used:
  4504 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;Total ram usage:        1 bytes
  4515 ;; Hardware stack levels used:    1
  4516 ;; Hardware stack levels required when called:    3
  4517 ;; This function calls:
  4518 ;;		_I2C_Master_Start
  4519 ;;		_I2C_Master_Stop
  4520 ;;		_I2C_Master_Write
  4521 ;; This function is called by:
  4522 ;;		_main
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           	psect	text14
  4527  000E58                     __ptext14:
  4528                           	opt stack 0
  4529  000E58                     _RTC_setTime:
  4530                           	opt stack 27
  4531                           
  4532                           ;main.c: 456: I2C_Master_Start();
  4533                           
  4534                           ;incstack = 0
  4535  000E58  EC1F  F008         	call	_I2C_Master_Start	;wreg free
  4536                           
  4537                           ;main.c: 457: I2C_Master_Write(0b11010000);
  4538  000E5C  0E00               	movlw	0
  4539  000E5E  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  4540  000E60  0ED0               	movlw	208
  4541  000E62  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  4542  000E64  EC16  F008         	call	_I2C_Master_Write	;wreg free
  4543                           
  4544                           ;main.c: 458: I2C_Master_Write(0x00);
  4545  000E68  0E00               	movlw	0
  4546  000E6A  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  4547  000E6C  0E00               	movlw	0
  4548  000E6E  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  4549  000E70  EC16  F008         	call	_I2C_Master_Write	;wreg free
  4550                           
  4551                           ;main.c: 461: for(char i=0; i<7; i++){
  4552  000E74  0E00               	movlw	0
  4553  000E76  6E17               	movwf	RTC_setTime@i,c
  4554  000E78                     l2088:
  4555  000E78  0E06               	movlw	6
  4556  000E7A  6417               	cpfsgt	RTC_setTime@i,c
  4557  000E7C  D001               	goto	l294
  4558  000E7E  D010               	goto	u1330
  4559  000E80                     l294:
  4560                           
  4561                           ;main.c: 462: I2C_Master_Write(currDate[i]);
  4562  000E80  5017               	movf	RTC_setTime@i,w,c
  4563  000E82  0D01               	mullw	1
  4564  000E84  0ED4               	movlw	low _currDate
  4565  000E86  24F3               	addwf	prodl,w,c
  4566  000E88  6EF6               	movwf	tblptrl,c
  4567  000E8A  0EFD               	movlw	high _currDate
  4568  000E8C  20F4               	addwfc	prodh,w,c
  4569  000E8E  6EF7               	movwf	tblptrh,c
  4570  000E90                     	if	0	;There are less than 3 active tblptr bytes
  4571  000E90                     	endif
  4572  000E90  0008               	tblrd		*
  4573  000E92  50F5               	movf	tablat,w,c
  4574  000E94  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  4575  000E96  6A16               	clrf	I2C_Master_Write@byteToWrite+1,c
  4576  000E98  EC16  F008         	call	_I2C_Master_Write	;wreg free
  4577  000E9C  2A17               	incf	RTC_setTime@i,f,c
  4578  000E9E  D7EC               	goto	l2088
  4579  000EA0                     u1330:
  4580                           
  4581                           ;main.c: 463: }
  4582                           ;main.c: 465: I2C_Master_Stop();
  4583  000EA0  EC1B  F008         	call	_I2C_Master_Stop	;wreg free
  4584  000EA4  0012               	return		;funcret
  4585  000EA6                     __end_of_RTC_setTime:
  4586                           	opt stack 0
  4587                           tblptru	equ	0xFF8
  4588                           tblptrh	equ	0xFF7
  4589                           tblptrl	equ	0xFF6
  4590                           tablat	equ	0xFF5
  4591                           prodh	equ	0xFF4
  4592                           prodl	equ	0xFF3
  4593                           intcon	equ	0xFF2
  4594                           intcon3	equ	0xFF0
  4595                           postinc0	equ	0xFEE
  4596                           wreg	equ	0xFE8
  4597                           postdec1	equ	0xFE5
  4598                           plusw1	equ	0xFE3
  4599                           fsr1l	equ	0xFE1
  4600                           indf2	equ	0xFDF
  4601                           postinc2	equ	0xFDE
  4602                           postdec2	equ	0xFDD
  4603                           plusw2	equ	0xFDB
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function _I2C_Master_Write *****************
  4609 ;; Defined at:
  4610 ;;		line 108 in file "I2C.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  byteToWrite     2   20[COMRAM] unsigned int 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4624 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;Total ram usage:        2 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    2
  4631 ;; This function calls:
  4632 ;;		_I2C_Master_Wait
  4633 ;; This function is called by:
  4634 ;;		_main
  4635 ;;		_RTC_setTime
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text15
  4640  00102C                     __ptext15:
  4641                           	opt stack 0
  4642  00102C                     _I2C_Master_Write:
  4643                           	opt stack 27
  4644                           
  4645                           ;I2C.c: 116: I2C_Master_Wait();
  4646                           
  4647                           ;incstack = 0
  4648  00102C  EC0D  F008         	call	_I2C_Master_Wait	;wreg free
  4649                           
  4650                           ;I2C.c: 117: SSPBUF = byteToWrite;
  4651  001030  C015  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  4652  001034  0012               	return		;funcret
  4653  001036                     __end_of_I2C_Master_Write:
  4654                           	opt stack 0
  4655                           tblptru	equ	0xFF8
  4656                           tblptrh	equ	0xFF7
  4657                           tblptrl	equ	0xFF6
  4658                           tablat	equ	0xFF5
  4659                           prodh	equ	0xFF4
  4660                           prodl	equ	0xFF3
  4661                           intcon	equ	0xFF2
  4662                           intcon3	equ	0xFF0
  4663                           postinc0	equ	0xFEE
  4664                           wreg	equ	0xFE8
  4665                           postdec1	equ	0xFE5
  4666                           plusw1	equ	0xFE3
  4667                           fsr1l	equ	0xFE1
  4668                           indf2	equ	0xFDF
  4669                           postinc2	equ	0xFDE
  4670                           postdec2	equ	0xFDD
  4671                           plusw2	equ	0xFDB
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function _I2C_Master_Stop *****************
  4677 ;; Defined at:
  4678 ;;		line 95 in file "I2C.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;		None
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;		None
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  1    wreg      void 
  4685 ;; Registers used:
  4686 ;;		wreg, status,2, status,0, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;Total ram usage:        0 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    2
  4699 ;; This function calls:
  4700 ;;		_I2C_Master_Wait
  4701 ;; This function is called by:
  4702 ;;		_main
  4703 ;;		_RTC_setTime
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           	psect	text16
  4708  001036                     __ptext16:
  4709                           	opt stack 0
  4710  001036                     _I2C_Master_Stop:
  4711                           	opt stack 27
  4712                           
  4713                           ;I2C.c: 104: I2C_Master_Wait();
  4714                           
  4715                           ;incstack = 0
  4716  001036  EC0D  F008         	call	_I2C_Master_Wait	;wreg free
  4717                           
  4718                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  4719  00103A  84C5               	bsf	4037,2,c	;volatile
  4720  00103C  0012               	return		;funcret
  4721  00103E                     __end_of_I2C_Master_Stop:
  4722                           	opt stack 0
  4723                           tblptru	equ	0xFF8
  4724                           tblptrh	equ	0xFF7
  4725                           tblptrl	equ	0xFF6
  4726                           tablat	equ	0xFF5
  4727                           prodh	equ	0xFF4
  4728                           prodl	equ	0xFF3
  4729                           intcon	equ	0xFF2
  4730                           intcon3	equ	0xFF0
  4731                           postinc0	equ	0xFEE
  4732                           wreg	equ	0xFE8
  4733                           postdec1	equ	0xFE5
  4734                           plusw1	equ	0xFE3
  4735                           fsr1l	equ	0xFE1
  4736                           indf2	equ	0xFDF
  4737                           postinc2	equ	0xFDE
  4738                           postdec2	equ	0xFDD
  4739                           plusw2	equ	0xFDB
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function _I2C_Master_Start *****************
  4745 ;; Defined at:
  4746 ;;		line 69 in file "I2C.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;		None
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;		None
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  1    wreg      void 
  4753 ;; Registers used:
  4754 ;;		wreg, status,2, status,0, cstack
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;Total ram usage:        0 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; Hardware stack levels required when called:    2
  4767 ;; This function calls:
  4768 ;;		_I2C_Master_Wait
  4769 ;; This function is called by:
  4770 ;;		_main
  4771 ;;		_RTC_setTime
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text17
  4776  00103E                     __ptext17:
  4777                           	opt stack 0
  4778  00103E                     _I2C_Master_Start:
  4779                           	opt stack 27
  4780                           
  4781                           ;I2C.c: 78: I2C_Master_Wait();
  4782                           
  4783                           ;incstack = 0
  4784  00103E  EC0D  F008         	call	_I2C_Master_Wait	;wreg free
  4785                           
  4786                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  4787  001042  80C5               	bsf	4037,0,c	;volatile
  4788  001044  0012               	return		;funcret
  4789  001046                     __end_of_I2C_Master_Start:
  4790                           	opt stack 0
  4791                           tblptru	equ	0xFF8
  4792                           tblptrh	equ	0xFF7
  4793                           tblptrl	equ	0xFF6
  4794                           tablat	equ	0xFF5
  4795                           prodh	equ	0xFF4
  4796                           prodl	equ	0xFF3
  4797                           intcon	equ	0xFF2
  4798                           intcon3	equ	0xFF0
  4799                           postinc0	equ	0xFEE
  4800                           wreg	equ	0xFE8
  4801                           postdec1	equ	0xFE5
  4802                           plusw1	equ	0xFE3
  4803                           fsr1l	equ	0xFE1
  4804                           indf2	equ	0xFDF
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           plusw2	equ	0xFDB
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _I2C_Master_Read *****************
  4813 ;; Defined at:
  4814 ;;		line 120 in file "I2C.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  ackBit          1    wreg     unsigned char 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  ackBit          1   20[COMRAM] unsigned char 
  4819 ;;  receivedByte    1   21[COMRAM] unsigned char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  1    wreg      unsigned char 
  4822 ;; Registers used:
  4823 ;;		wreg, status,2, status,0, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;Total ram usage:        2 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    2
  4836 ;; This function calls:
  4837 ;;		_I2C_Master_Wait
  4838 ;; This function is called by:
  4839 ;;		_main
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text18
  4844  000F94                     __ptext18:
  4845                           	opt stack 0
  4846  000F94                     _I2C_Master_Read:
  4847                           	opt stack 28
  4848                           
  4849                           ;incstack = 0
  4850                           ;I2C_Master_Read@ackBit stored from wreg
  4851  000F94  6E15               	movwf	I2C_Master_Read@ackBit,c
  4852                           
  4853                           ;I2C.c: 130: unsigned char receivedByte;
  4854                           ;I2C.c: 132: I2C_Master_Wait();
  4855  000F96  EC0D  F008         	call	_I2C_Master_Wait	;wreg free
  4856                           
  4857                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  4858  000F9A  86C5               	bsf	4037,3,c	;volatile
  4859                           
  4860                           ;I2C.c: 135: I2C_Master_Wait();
  4861  000F9C  EC0D  F008         	call	_I2C_Master_Wait	;wreg free
  4862                           
  4863                           ;I2C.c: 136: receivedByte = SSPBUF;
  4864  000FA0  CFC9 F016          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  4865                           
  4866                           ;I2C.c: 138: I2C_Master_Wait();
  4867  000FA4  EC0D  F008         	call	_I2C_Master_Wait	;wreg free
  4868                           
  4869                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  4870  000FA8  B015               	btfsc	I2C_Master_Read@ackBit,0,c
  4871  000FAA  D002               	bra	u445
  4872  000FAC  9AC5               	bcf	4037,5,c	;volatile
  4873  000FAE  D001               	bra	u446
  4874  000FB0                     u445:
  4875  000FB0  8AC5               	bsf	4037,5,c	;volatile
  4876  000FB2                     u446:
  4877                           
  4878                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  4879  000FB2  88C5               	bsf	4037,4,c	;volatile
  4880                           
  4881                           ;I2C.c: 142: return receivedByte;
  4882  000FB4  5016               	movf	I2C_Master_Read@receivedByte,w,c
  4883  000FB6  0012               	return	
  4884  000FB8                     __end_of_I2C_Master_Read:
  4885                           	opt stack 0
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           intcon	equ	0xFF2
  4893                           intcon3	equ	0xFF0
  4894                           postinc0	equ	0xFEE
  4895                           wreg	equ	0xFE8
  4896                           postdec1	equ	0xFE5
  4897                           plusw1	equ	0xFE3
  4898                           fsr1l	equ	0xFE1
  4899                           indf2	equ	0xFDF
  4900                           postinc2	equ	0xFDE
  4901                           postdec2	equ	0xFDD
  4902                           plusw2	equ	0xFDB
  4903                           fsr2h	equ	0xFDA
  4904                           fsr2l	equ	0xFD9
  4905                           status	equ	0xFD8
  4906                           
  4907 ;; *************** function _I2C_Master_Wait *****************
  4908 ;; Defined at:
  4909 ;;		line 51 in file "I2C.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;		None
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;		None
  4914 ;; Return value:  Size  Location     Type
  4915 ;;                  1    wreg      void 
  4916 ;; Registers used:
  4917 ;;		wreg, status,2, status,0
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;Total ram usage:        1 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:    1
  4930 ;; This function calls:
  4931 ;;		Nothing
  4932 ;; This function is called by:
  4933 ;;		_I2C_Master_Start
  4934 ;;		_I2C_Master_Stop
  4935 ;;		_I2C_Master_Write
  4936 ;;		_I2C_Master_Read
  4937 ;;		_I2C_Master_RepeatedStart
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text19
  4942  00101A                     __ptext19:
  4943                           	opt stack 0
  4944  00101A                     _I2C_Master_Wait:
  4945                           	opt stack 27
  4946                           
  4947                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  4948                           
  4949                           ;incstack = 0
  4950  00101A  B4C7               	btfsc	4039,2,c	;volatile
  4951  00101C  D7FE               	goto	_I2C_Master_Wait
  4952  00101E  CFC5 F014          	movff	4037,??_I2C_Master_Wait	;volatile
  4953  001022  0E1F               	movlw	31
  4954  001024  1614               	andwf	??_I2C_Master_Wait,f,c
  4955  001026  B4D8               	btfsc	status,2,c
  4956  001028  0012               	return	
  4957  00102A  D7F7               	goto	_I2C_Master_Wait
  4958  00102C                     __end_of_I2C_Master_Wait:
  4959                           	opt stack 0
  4960                           tblptru	equ	0xFF8
  4961                           tblptrh	equ	0xFF7
  4962                           tblptrl	equ	0xFF6
  4963                           tablat	equ	0xFF5
  4964                           prodh	equ	0xFF4
  4965                           prodl	equ	0xFF3
  4966                           intcon	equ	0xFF2
  4967                           intcon3	equ	0xFF0
  4968                           postinc0	equ	0xFEE
  4969                           wreg	equ	0xFE8
  4970                           postdec1	equ	0xFE5
  4971                           plusw1	equ	0xFE3
  4972                           fsr1l	equ	0xFE1
  4973                           indf2	equ	0xFDF
  4974                           postinc2	equ	0xFDE
  4975                           postdec2	equ	0xFDD
  4976                           plusw2	equ	0xFDB
  4977                           fsr2h	equ	0xFDA
  4978                           fsr2l	equ	0xFD9
  4979                           status	equ	0xFD8
  4980                           
  4981 ;; *************** function _I2C_Master_Init *****************
  4982 ;; Defined at:
  4983 ;;		line 14 in file "I2C.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  clockFreq       4   32[COMRAM] const unsigned long 
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;		None
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      void 
  4990 ;; Registers used:
  4991 ;;		wreg, status,2, status,0, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : 0/0
  4994 ;;		On exit  : 0/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4997 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5000 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;Total ram usage:        8 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:    2
  5004 ;; This function calls:
  5005 ;;		___lldiv
  5006 ;; This function is called by:
  5007 ;;		_main
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text20
  5012  000DAA                     __ptext20:
  5013                           	opt stack 0
  5014  000DAA                     _I2C_Master_Init:
  5015                           	opt stack 28
  5016                           
  5017                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  5018                           
  5019                           ;incstack = 0
  5020  000DAA  9AC6               	bcf	4038,5,c	;volatile
  5021                           
  5022                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  5023  000DAC  8694               	bsf	3988,3,c	;volatile
  5024                           
  5025                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  5026  000DAE  8894               	bsf	3988,4,c	;volatile
  5027                           
  5028                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  5029  000DB0  0E80               	movlw	128
  5030  000DB2  6EC7               	movwf	4039,c	;volatile
  5031                           
  5032                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  5033  000DB4  0E28               	movlw	40
  5034  000DB6  6EC6               	movwf	4038,c	;volatile
  5035                           
  5036                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  5037  000DB8  0E00               	movlw	0
  5038  000DBA  6EC5               	movwf	4037,c	;volatile
  5039                           
  5040                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  5041  000DBC  0E00               	movlw	0
  5042  000DBE  6E14               	movwf	___lldiv@dividend,c
  5043  000DC0  0E5A               	movlw	90
  5044  000DC2  6E15               	movwf	___lldiv@dividend+1,c
  5045  000DC4  0E62               	movlw	98
  5046  000DC6  6E16               	movwf	___lldiv@dividend+2,c
  5047  000DC8  0E02               	movlw	2
  5048  000DCA  6E17               	movwf	___lldiv@dividend+3,c
  5049  000DCC  C021  F025         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  5050  000DD0  C022  F026         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  5051  000DD4  C023  F027         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  5052  000DD8  C024  F028         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  5053  000DDC  0E02               	movlw	2
  5054  000DDE                     u1315:
  5055  000DDE  90D8               	bcf	status,0,c
  5056  000DE0  3625               	rlcf	??_I2C_Master_Init,f,c
  5057  000DE2  3626               	rlcf	??_I2C_Master_Init+1,f,c
  5058  000DE4  3627               	rlcf	??_I2C_Master_Init+2,f,c
  5059  000DE6  3628               	rlcf	??_I2C_Master_Init+3,f,c
  5060  000DE8  2EE8               	decfsz	wreg,f,c
  5061  000DEA  D7F9               	goto	u1315
  5062  000DEC  C025  F018         	movff	??_I2C_Master_Init,___lldiv@divisor
  5063  000DF0  C026  F019         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5064  000DF4  C027  F01A         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5065  000DF8  C028  F01B         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5066  000DFC  EC1D  F006         	call	___lldiv	;wreg free
  5067  000E00  0414               	decf	?___lldiv,w,c
  5068  000E02  6EC8               	movwf	4040,c	;volatile
  5069  000E04  0012               	return		;funcret
  5070  000E06                     __end_of_I2C_Master_Init:
  5071                           	opt stack 0
  5072                           tblptru	equ	0xFF8
  5073                           tblptrh	equ	0xFF7
  5074                           tblptrl	equ	0xFF6
  5075                           tablat	equ	0xFF5
  5076                           prodh	equ	0xFF4
  5077                           prodl	equ	0xFF3
  5078                           intcon	equ	0xFF2
  5079                           intcon3	equ	0xFF0
  5080                           postinc0	equ	0xFEE
  5081                           wreg	equ	0xFE8
  5082                           postdec1	equ	0xFE5
  5083                           plusw1	equ	0xFE3
  5084                           fsr1l	equ	0xFE1
  5085                           indf2	equ	0xFDF
  5086                           postinc2	equ	0xFDE
  5087                           postdec2	equ	0xFDD
  5088                           plusw2	equ	0xFDB
  5089                           fsr2h	equ	0xFDA
  5090                           fsr2l	equ	0xFD9
  5091                           status	equ	0xFD8
  5092                           
  5093 ;; *************** function ___lldiv *****************
  5094 ;; Defined at:
  5095 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;  dividend        4   19[COMRAM] unsigned long 
  5098 ;;  divisor         4   23[COMRAM] unsigned long 
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;  quotient        4   27[COMRAM] unsigned long 
  5101 ;;  counter         1   31[COMRAM] unsigned char 
  5102 ;; Return value:  Size  Location     Type
  5103 ;;                  4   19[COMRAM] unsigned long 
  5104 ;; Registers used:
  5105 ;;		wreg, status,2, status,0
  5106 ;; Tracked objects:
  5107 ;;		On entry : 0/0
  5108 ;;		On exit  : 0/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5111 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5114 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5115 ;;Total ram usage:       13 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:    1
  5118 ;; This function calls:
  5119 ;;		Nothing
  5120 ;; This function is called by:
  5121 ;;		_I2C_Master_Init
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text21
  5126  000C3A                     __ptext21:
  5127                           	opt stack 0
  5128  000C3A                     ___lldiv:
  5129                           	opt stack 28
  5130                           
  5131                           ;incstack = 0
  5132  000C3A  0E00               	movlw	0
  5133  000C3C  6E1C               	movwf	___lldiv@quotient,c
  5134  000C3E  0E00               	movlw	0
  5135  000C40  6E1D               	movwf	___lldiv@quotient+1,c
  5136  000C42  0E00               	movlw	0
  5137  000C44  6E1E               	movwf	___lldiv@quotient+2,c
  5138  000C46  0E00               	movlw	0
  5139  000C48  6E1F               	movwf	___lldiv@quotient+3,c
  5140  000C4A  5018               	movf	___lldiv@divisor,w,c
  5141  000C4C  1019               	iorwf	___lldiv@divisor+1,w,c
  5142  000C4E  101A               	iorwf	___lldiv@divisor+2,w,c
  5143  000C50  101B               	iorwf	___lldiv@divisor+3,w,c
  5144  000C52  B4D8               	btfsc	status,2,c
  5145  000C54  D02A               	goto	l776
  5146  000C56  0E01               	movlw	1
  5147  000C58  6E20               	movwf	___lldiv@counter,c
  5148  000C5A  D006               	goto	l771
  5149  000C5C  90D8               	bcf	status,0,c
  5150  000C5E  3618               	rlcf	___lldiv@divisor,f,c
  5151  000C60  3619               	rlcf	___lldiv@divisor+1,f,c
  5152  000C62  361A               	rlcf	___lldiv@divisor+2,f,c
  5153  000C64  361B               	rlcf	___lldiv@divisor+3,f,c
  5154  000C66  2A20               	incf	___lldiv@counter,f,c
  5155  000C68                     l771:
  5156  000C68  AE1B               	btfss	___lldiv@divisor+3,7,c
  5157  000C6A  D7F8               	goto	l772
  5158  000C6C                     u1290:
  5159  000C6C  90D8               	bcf	status,0,c
  5160  000C6E  361C               	rlcf	___lldiv@quotient,f,c
  5161  000C70  361D               	rlcf	___lldiv@quotient+1,f,c
  5162  000C72  361E               	rlcf	___lldiv@quotient+2,f,c
  5163  000C74  361F               	rlcf	___lldiv@quotient+3,f,c
  5164  000C76  5018               	movf	___lldiv@divisor,w,c
  5165  000C78  5C14               	subwf	___lldiv@dividend,w,c
  5166  000C7A  5019               	movf	___lldiv@divisor+1,w,c
  5167  000C7C  5815               	subwfb	___lldiv@dividend+1,w,c
  5168  000C7E  501A               	movf	___lldiv@divisor+2,w,c
  5169  000C80  5816               	subwfb	___lldiv@dividend+2,w,c
  5170  000C82  501B               	movf	___lldiv@divisor+3,w,c
  5171  000C84  5817               	subwfb	___lldiv@dividend+3,w,c
  5172  000C86  A0D8               	btfss	status,0,c
  5173  000C88  D009               	goto	l775
  5174  000C8A  5018               	movf	___lldiv@divisor,w,c
  5175  000C8C  5E14               	subwf	___lldiv@dividend,f,c
  5176  000C8E  5019               	movf	___lldiv@divisor+1,w,c
  5177  000C90  5A15               	subwfb	___lldiv@dividend+1,f,c
  5178  000C92  501A               	movf	___lldiv@divisor+2,w,c
  5179  000C94  5A16               	subwfb	___lldiv@dividend+2,f,c
  5180  000C96  501B               	movf	___lldiv@divisor+3,w,c
  5181  000C98  5A17               	subwfb	___lldiv@dividend+3,f,c
  5182  000C9A  801C               	bsf	___lldiv@quotient,0,c
  5183  000C9C                     l775:
  5184  000C9C  90D8               	bcf	status,0,c
  5185  000C9E  321B               	rrcf	___lldiv@divisor+3,f,c
  5186  000CA0  321A               	rrcf	___lldiv@divisor+2,f,c
  5187  000CA2  3219               	rrcf	___lldiv@divisor+1,f,c
  5188  000CA4  3218               	rrcf	___lldiv@divisor,f,c
  5189  000CA6  2E20               	decfsz	___lldiv@counter,f,c
  5190  000CA8  D7E1               	goto	u1290
  5191  000CAA                     l776:
  5192  000CAA  C01C  F014         	movff	___lldiv@quotient,?___lldiv
  5193  000CAE  C01D  F015         	movff	___lldiv@quotient+1,?___lldiv+1
  5194  000CB2  C01E  F016         	movff	___lldiv@quotient+2,?___lldiv+2
  5195  000CB6  C01F  F017         	movff	___lldiv@quotient+3,?___lldiv+3
  5196  000CBA  0012               	return		;funcret
  5197  000CBC                     __end_of___lldiv:
  5198                           	opt stack 0
  5199                           tblptru	equ	0xFF8
  5200                           tblptrh	equ	0xFF7
  5201                           tblptrl	equ	0xFF6
  5202                           tablat	equ	0xFF5
  5203                           prodh	equ	0xFF4
  5204                           prodl	equ	0xFF3
  5205                           intcon	equ	0xFF2
  5206                           intcon3	equ	0xFF0
  5207                           postinc0	equ	0xFEE
  5208                           wreg	equ	0xFE8
  5209                           postdec1	equ	0xFE5
  5210                           plusw1	equ	0xFE3
  5211                           fsr1l	equ	0xFE1
  5212                           indf2	equ	0xFDF
  5213                           postinc2	equ	0xFDE
  5214                           postdec2	equ	0xFDD
  5215                           plusw2	equ	0xFDB
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function _interruptHandler *****************
  5221 ;; Defined at:
  5222 ;;		line 468 in file "main.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  keypress        1   18[COMRAM] unsigned char 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  1    wreg      void 
  5229 ;; Registers used:
  5230 ;;		wreg, status,2, status,0
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;Total ram usage:       19 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		Interrupt level 2
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	intcode
  5250  000008                     __pintcode:
  5251                           	opt stack 0
  5252  000008                     _interruptHandler:
  5253                           	opt stack 25
  5254                           
  5255                           ;incstack = 0
  5256  000008  8265               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5257  00000A  EDBA  F005         	call	int_func,f	;refresh shadow registers
  5258                           tblptru	equ	0xFF8
  5259                           tblptrh	equ	0xFF7
  5260                           tblptrl	equ	0xFF6
  5261                           tablat	equ	0xFF5
  5262                           prodh	equ	0xFF4
  5263                           prodl	equ	0xFF3
  5264                           intcon	equ	0xFF2
  5265                           intcon3	equ	0xFF0
  5266                           postinc0	equ	0xFEE
  5267                           wreg	equ	0xFE8
  5268                           postdec1	equ	0xFE5
  5269                           plusw1	equ	0xFE3
  5270                           fsr1l	equ	0xFE1
  5271                           indf2	equ	0xFDF
  5272                           postinc2	equ	0xFDE
  5273                           postdec2	equ	0xFDD
  5274                           plusw2	equ	0xFDB
  5275                           fsr2h	equ	0xFDA
  5276                           fsr2l	equ	0xFD9
  5277                           status	equ	0xFD8
  5278                           
  5279                           	psect	intcode_body
  5280  000B74                     __pintcode_body:
  5281                           	opt stack 25
  5282  000B74                     int_func:
  5283                           	opt stack 25
  5284  000B74  0006               	pop		; remove dummy address from shadow register refresh
  5285  000B76  CFFA F001          	movff	pclath,??_interruptHandler
  5286  000B7A  CFFB F002          	movff	pclatu,??_interruptHandler+1
  5287  000B7E  CFE9 F003          	movff	fsr0l,??_interruptHandler+2
  5288  000B82  CFEA F004          	movff	fsr0h,??_interruptHandler+3
  5289  000B86  CFE1 F005          	movff	fsr1l,??_interruptHandler+4
  5290  000B8A  CFE2 F006          	movff	fsr1h,??_interruptHandler+5
  5291  000B8E  CFD9 F007          	movff	fsr2l,??_interruptHandler+6
  5292  000B92  CFDA F008          	movff	fsr2h,??_interruptHandler+7
  5293  000B96  CFF3 F009          	movff	prodl,??_interruptHandler+8
  5294  000B9A  CFF4 F00A          	movff	prodh,??_interruptHandler+9
  5295  000B9E  CFF6 F00B          	movff	tblptrl,??_interruptHandler+10
  5296  000BA2  CFF7 F00C          	movff	tblptrh,??_interruptHandler+11
  5297  000BA6  CFF8 F00D          	movff	tblptru,??_interruptHandler+12
  5298  000BAA  CFF5 F00E          	movff	tablat,??_interruptHandler+13
  5299  000BAE  C065  F00F         	movff	btemp,??_interruptHandler+14
  5300  000BB2  C066  F010         	movff	btemp+1,??_interruptHandler+15
  5301  000BB6  C067  F011         	movff	btemp+2,??_interruptHandler+16
  5302  000BBA  C068  F012         	movff	btemp+3,??_interruptHandler+17
  5303                           
  5304                           ;main.c: 470: if (INT1IF) {
  5305  000BBE  A0F0               	btfss	intcon3,0,c	;volatile
  5306  000BC0  D016               	goto	i2l305
  5307                           
  5308                           ;main.c: 473: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5309  000BC2  3881               	swapf	3969,w,c	;volatile
  5310  000BC4  0B0F               	andlw	15
  5311  000BC6  0B0F               	andlw	15
  5312  000BC8  6E13               	movwf	interruptHandler@keypress,c
  5313                           
  5314                           ;main.c: 475: if (keypress == 12) {
  5315  000BCA  0E0C               	movlw	12
  5316  000BCC  1813               	xorwf	interruptHandler@keypress,w,c
  5317  000BCE  A4D8               	btfss	status,2,c
  5318  000BD0  D005               	goto	i2l302
  5319                           
  5320                           ;main.c: 476: begin_operation = 1;
  5321  000BD2  0E00               	movlw	0
  5322  000BD4  6E5C               	movwf	_begin_operation+1,c
  5323  000BD6  0E01               	movlw	1
  5324  000BD8  6E5B               	movwf	_begin_operation,c
  5325  000BDA  D008               	goto	i2l1828
  5326  000BDC                     i2l302:
  5327                           
  5328                           ;main.c: 479: else if (keypress == 14) {
  5329  000BDC  0E0E               	movlw	14
  5330  000BDE  1813               	xorwf	interruptHandler@keypress,w,c
  5331  000BE0  A4D8               	btfss	status,2,c
  5332  000BE2  D004               	goto	i2l1828
  5333                           
  5334                           ;main.c: 480: begin_logging = 1;
  5335  000BE4  0E00               	movlw	0
  5336  000BE6  6E5A               	movwf	_begin_logging+1,c
  5337  000BE8  0E01               	movlw	1
  5338  000BEA  6E59               	movwf	_begin_logging,c
  5339  000BEC                     i2l1828:
  5340                           
  5341                           ;main.c: 483: else {
  5342                           ;main.c: 484: INT1IF = 0;
  5343                           
  5344                           ;main.c: 482: }
  5345                           
  5346                           ;main.c: 481: INT1IF = 0;
  5347  000BEC  90F0               	bcf	intcon3,0,c	;volatile
  5348  000BEE                     i2l305:
  5349  000BEE  C012  F068         	movff	??_interruptHandler+17,btemp+3
  5350  000BF2  C011  F067         	movff	??_interruptHandler+16,btemp+2
  5351  000BF6  C010  F066         	movff	??_interruptHandler+15,btemp+1
  5352  000BFA  C00F  F065         	movff	??_interruptHandler+14,btemp
  5353  000BFE  C00E  FFF5         	movff	??_interruptHandler+13,tablat
  5354  000C02  C00D  FFF8         	movff	??_interruptHandler+12,tblptru
  5355  000C06  C00C  FFF7         	movff	??_interruptHandler+11,tblptrh
  5356  000C0A  C00B  FFF6         	movff	??_interruptHandler+10,tblptrl
  5357  000C0E  C00A  FFF4         	movff	??_interruptHandler+9,prodh
  5358  000C12  C009  FFF3         	movff	??_interruptHandler+8,prodl
  5359  000C16  C008  FFDA         	movff	??_interruptHandler+7,fsr2h
  5360  000C1A  C007  FFD9         	movff	??_interruptHandler+6,fsr2l
  5361  000C1E  C006  FFE2         	movff	??_interruptHandler+5,fsr1h
  5362  000C22  C005  FFE1         	movff	??_interruptHandler+4,fsr1l
  5363  000C26  C004  FFEA         	movff	??_interruptHandler+3,fsr0h
  5364  000C2A  C003  FFE9         	movff	??_interruptHandler+2,fsr0l
  5365  000C2E  C002  FFFB         	movff	??_interruptHandler+1,pclatu
  5366  000C32  C001  FFFA         	movff	??_interruptHandler,pclath
  5367  000C36  9265               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5368  000C38  0011               	retfie		f
  5369  000C3A                     __end_of_interruptHandler:
  5370                           	opt stack 0
  5371                           pclatu	equ	0xFFB
  5372                           pclath	equ	0xFFA
  5373                           tblptru	equ	0xFF8
  5374                           tblptrh	equ	0xFF7
  5375                           tblptrl	equ	0xFF6
  5376                           tablat	equ	0xFF5
  5377                           prodh	equ	0xFF4
  5378                           prodl	equ	0xFF3
  5379                           intcon	equ	0xFF2
  5380                           intcon3	equ	0xFF0
  5381                           postinc0	equ	0xFEE
  5382                           fsr0h	equ	0xFEA
  5383                           fsr0l	equ	0xFE9
  5384                           wreg	equ	0xFE8
  5385                           postdec1	equ	0xFE5
  5386                           plusw1	equ	0xFE3
  5387                           fsr1h	equ	0xFE2
  5388                           fsr1l	equ	0xFE1
  5389                           indf2	equ	0xFDF
  5390                           postinc2	equ	0xFDE
  5391                           postdec2	equ	0xFDD
  5392                           plusw2	equ	0xFDB
  5393                           fsr2h	equ	0xFDA
  5394                           fsr2l	equ	0xFD9
  5395                           status	equ	0xFD8
  5396                           pclatu	equ	0xFFB
  5397                           pclath	equ	0xFFA
  5398                           tblptru	equ	0xFF8
  5399                           tblptrh	equ	0xFF7
  5400                           tblptrl	equ	0xFF6
  5401                           tablat	equ	0xFF5
  5402                           prodh	equ	0xFF4
  5403                           prodl	equ	0xFF3
  5404                           intcon	equ	0xFF2
  5405                           intcon3	equ	0xFF0
  5406                           postinc0	equ	0xFEE
  5407                           fsr0h	equ	0xFEA
  5408                           fsr0l	equ	0xFE9
  5409                           wreg	equ	0xFE8
  5410                           postdec1	equ	0xFE5
  5411                           plusw1	equ	0xFE3
  5412                           fsr1h	equ	0xFE2
  5413                           fsr1l	equ	0xFE1
  5414                           indf2	equ	0xFDF
  5415                           postinc2	equ	0xFDE
  5416                           postdec2	equ	0xFDD
  5417                           plusw2	equ	0xFDB
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422                           	psect	rparam
  5423  0000                     pclatu	equ	0xFFB
  5424                           pclath	equ	0xFFA
  5425                           tblptru	equ	0xFF8
  5426                           tblptrh	equ	0xFF7
  5427                           tblptrl	equ	0xFF6
  5428                           tablat	equ	0xFF5
  5429                           prodh	equ	0xFF4
  5430                           prodl	equ	0xFF3
  5431                           intcon	equ	0xFF2
  5432                           intcon3	equ	0xFF0
  5433                           postinc0	equ	0xFEE
  5434                           fsr0h	equ	0xFEA
  5435                           fsr0l	equ	0xFE9
  5436                           wreg	equ	0xFE8
  5437                           postdec1	equ	0xFE5
  5438                           plusw1	equ	0xFE3
  5439                           fsr1h	equ	0xFE2
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           plusw2	equ	0xFDB
  5445                           fsr2h	equ	0xFDA
  5446                           fsr2l	equ	0xFD9
  5447                           status	equ	0xFD8
  5448                           
  5449                           	psect	temp
  5450  000065                     btemp:
  5451                           	opt stack 0
  5452  000065                     	ds	1
  5453  0000                     int$flags	set	btemp
  5454  0000                     wtemp6	set	btemp+1
  5455                           pclatu	equ	0xFFB
  5456                           pclath	equ	0xFFA
  5457                           tblptru	equ	0xFF8
  5458                           tblptrh	equ	0xFF7
  5459                           tblptrl	equ	0xFF6
  5460                           tablat	equ	0xFF5
  5461                           prodh	equ	0xFF4
  5462                           prodl	equ	0xFF3
  5463                           intcon	equ	0xFF2
  5464                           intcon3	equ	0xFF0
  5465                           postinc0	equ	0xFEE
  5466                           fsr0h	equ	0xFEA
  5467                           fsr0l	equ	0xFE9
  5468                           wreg	equ	0xFE8
  5469                           postdec1	equ	0xFE5
  5470                           plusw1	equ	0xFE3
  5471                           fsr1h	equ	0xFE2
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           plusw2	equ	0xFDB
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8


Data Sizes:
    Strings     541
    Constant    48
    Data        6
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     84     100
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_31(CODE[21]), STR_30(CODE[21]), STR_29(CODE[18]), STR_28(CODE[18]), 
		 -> STR_27(CODE[11]), STR_26(CODE[14]), STR_25(CODE[20]), STR_24(CODE[13]), 
		 -> STR_23(CODE[11]), STR_22(CODE[14]), STR_21(CODE[19]), STR_20(CODE[20]), 
		 -> STR_19(CODE[20]), STR_18(CODE[13]), STR_17(CODE[12]), STR_16(CODE[21]), 
		 -> STR_15(CODE[13]), STR_14(CODE[11]), STR_13(CODE[13]), STR_12(CODE[21]), 
		 -> STR_11(CODE[21]), STR_10(CODE[8]), STR_9(CODE[8]), STR_8(CODE[8]), 
		 -> STR_7(CODE[17]), STR_6(CODE[21]), STR_5(CODE[21]), STR_4(CODE[21]), 
		 -> STR_3(CODE[21]), STR_2(CODE[21]), STR_1(CODE[33]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_operation
    _operation->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _RTC_setTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   13660
                                             74 COMRAM    10    10      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                        _RTC_setTime
                            _initLCD
                            _lcdInst
                            _logging
                          _operation
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                           15    15      0    7162
                                             59 COMRAM    15    15      0
                            _lcdInst
                     _lcd_set_cursor
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    4599
                                             31 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                             21 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             26 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_set_cursor                                       3     2      1    1150
                                             25 COMRAM     3     2      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (3) _lcd_shift_cursor                                     3     2      1     256
                                             22 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _logging                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             22 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0      90
                                             21 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTC_setTime                                          1     1      0     546
                                             22 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     478
                                             20 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                             20 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             32 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                             19 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interruptHandler                                    19    19      0      30
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _RTC_setTime
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _logging
   _operation
     _lcdInst
       _lcdNibble
     _lcd_set_cursor
       _lcdInst
         _lcdNibble
       _lcd_shift_cursor
         _lcdInst
           _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _putch
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     54      64       1       79.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64      34        0.0%
DATA                 0      0      64       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Feb 04 20:03:38 2018

         operation@frequency 003E                           l41 0D84                           l42 0D54  
                         l43 0D9E                           l44 0D6C                           l45 0D74  
                         l46 0D7C                           u15 0CF6                           u16 0CF8  
                         u25 0D36                           u26 0D38                  __CFG_CPD$ON 000000  
        ___wmul@multiplicand 0016                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l200 020C                          l202 0214                          l203 021C  
                        l220 02AA                          l222 02B2                          l214 0264  
                        l231 0376                          l223 02BA                          l207 0258  
                        l216 02E8                          l224 02C2                          l160 0B5A  
                        l152 0A46                          l241 0472                          l153 0A82  
                        l410 0938                          l250 0450                          l234 03EE  
                        l411 09D2                          l219 02CC                          l412 097C  
                        l244 0456                          l180 0176                          l261 0506  
                        l245 0440                          l406 0932                          l270 054C  
                        l182 017E                          l174 0138                          l158 0B42  
                        l407 09D8                          l263 056C                          l271 0550  
                        l247 0444                          l239 03FA                          l183 0186  
                        l280 05FA                          l256 04FA                          l248 0448  
                        l176 01A6                          l168 00A2                          l409 09C2  
                        l281 0608                          l249 044C                          l169 012C  
                        l362 06F8                          l282 0616                          l266 0556  
                        l194 01CE                          l371 074A                          l363 0708  
                        l283 0670                          l267 0544                          l187 01C2  
                        l179 0190                          l284 0646                          l196 023C  
                        l381 0808                          l373 07AC                          l365 071C  
                        l285 0684                          l277 0624                          l269 0548  
                        l294 0E80                          l390 0852                          l366 0716  
                        l286 0654                          l278 05EC                          l287 0662  
                        l279 063E                          l199 0226                          l384 0882  
                        l385 0822                          l394 08AC                          l378 07DA  
                        l395 08D0                          l379 07A8                          l396 08D8  
                        l397 0904                          l389 0892                          l398 08EE  
                        l824 0E24                          l825 0E1C                          l745 0FCE  
                        l834 0F08                          l771 0C68                          l835 0F00  
                        l772 0C5C                          l828 0E44                          l829 0E4E  
                        l838 0F20                          l775 0C9C                          l839 0F2A  
                        l776 0CAA                 __CFG_CPB$OFF 000000                          u445 0FB0  
                        u446 0FB2                          prod 000FF3                          wreg 000FE8  
                _RTC_setTime 0E58              ?_lcd_set_cursor 001A                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l2254 031E                         l2088 0E78  
                       l2248 02FA                         l2458 0A7A                         l1836 0FDC  
                       l1974 0826                         l1988 0856                         STR_1 FDE1  
                       STR_2 FE41                         STR_3 FE80                         STR_4 FE95  
                       STR_5 FEAA                         STR_6 FE6B                         STR_7 FF58  
                       STR_8 FFF6                         STR_9 FFE6                         u1000 0E28  
                       u1030 0F0C                         u1230 090C                         u2007 0EAC  
                       u1240 0920                         u2017 0EE0                         u1330 0EA0  
                       u1410 01B8                         u1315 0DDE                         u2027 1012  
                       u1260 09E0                         u2037 0CDE                         u1341 001E  
                       _LATA 000F89                         _LATB 000F8A                         u2047 0CE8  
                       _LATC 000F8B                         _LATD 000F8C                         u2057 0D1E  
                       _LATE 000F8D                         u1290 0C6C                         u2067 0D28  
                       u1700 0520                         u1540 0286                         u1460 01E8  
                       u1630 041C                         u1390 0152                         u1480 024E  
                       u1740 0A9E                         u1807 0B34                         u1817 003A  
                       u1907 048E                         u1827 0050                         u1917 04A4  
                       u1837 0094                         u1927 058E                         u1847 00AE  
                       u1937 05A4                         u1857 00C4                         u1947 068E  
                       u1867 0330                         u1957 06A8                         u1877 0368  
                       u1797 0ACC                         u1967 06E0                         u1887 0382  
                       u1977 0FFE                         u1897 0398                         u1987 0D48  
                       u1997 0D60                         _main 09FA     __end_of_interruptHandler 0C3A  
                       _keys FDB1                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 0065  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
           __end_of_LCD_LEFT FDDC          operation@repetition 003F        I2C_Master_Read@ackBit 0015  
           ?_I2C_Master_Init 0021             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001                        STR_10 FFEE  
                      STR_11 FE56                        STR_20 FED4                        STR_12 FE17  
                      STR_13 FF85                        STR_21 FF10                        STR_14 FFC5  
                      STR_22 FF69                        STR_30 FE2C                        STR_23 FFD0  
                      STR_15 FF92                        STR_31 FE02                        STR_24 FF9F  
                      STR_32 FF47                        STR_16 FEBF                        STR_17 FFB9  
                      STR_25 FEFC                        STR_18 FFAC                        STR_26 FF77  
                      STR_27 FFDB                        STR_19 FEE8                        STR_28 FF35  
                      STR_29 FF23              __end_of___lldiv 0CBC              __end_of___lwdiv 0E58  
            __end_of___lwmod 0F34                        i2l302 0BDC                        i2l305 0BEE  
                      _PORTB 000F81                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000              __end_of_lcdInst 101A  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 0EF2  
             __CFG_EBTRB$OFF 000000              __end_of_dpowers FDCC              __end_of_isdigit 0FD6  
            __end_of_logging 104E                        _putch 0FF2                        main@i 0054  
                      pclath 000FFA                        tablat 000FF5            _LCDinterruptState 005E  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
I2C_Master_Read@receivedByte 0016                        wtemp6 0066               __CFG_PBADEN$ON 000000  
            __initialization 0F34                 __end_of_main 0B74                 __end_of_keys FDC2  
          ?_lcd_shift_cursor 0017               __CFG_OSC$HSPLL 000000            __end_of_LCD_RIGHT FDDD  
                     ??_main 004B           ??_lcd_shift_cursor 0018                __activetblptr 000002  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0015           ??_I2C_Master_Start 0015  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0017  
                     ?_putch 0001        operation@keypress_400 0042        operation@keypress_395 0044  
      operation@keypress_387 0041        operation@keypress_388 0043                       _INT1IE 007F83  
                     _INT1IF 007F80                       i2l1828 0BEC                       _SSPADD 000FC8  
                     _SSPBUF 000FC9               __CFG_XINST$OFF 000000                       ___wmul 0F6E  
             __CFG_STVREN$ON 000000                    ??___lldiv 001C             __end_of_currDate FDDB  
                  ??___lwdiv 0018                    ??___lwmod 001F                       clear_0 0F5A  
                  ??_lcdInst 0016                       _printf 06EE                    ??_initLCD 0017  
               __pdataCOMRAM 005F                    ??_isdigit 0014                    ??_logging 0014  
               __mediumconst FDB0                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                   __accesstop 0080      __end_of__initialization 0F60  
               RTC_setTime@i 0017                ___rparam_used 000001               __pcstackCOMRAM 0001  
              __end_of_putch 1006             ??_lcd_set_cursor 001B           __size_of_lcdNibble 007E  
               ?_RTC_setTime 0001                      ??_putch 0016            ?_interruptHandler 0001  
         ??_interruptHandler 0001                      ?___wmul 0014                      ?_printf 0020  
         __size_of_operation 06DC         lcd@LCDinterruptState 005D                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7            __end_of_lcdNibble 0D3A  
                    __Hparam 0000        operation@prescription 0045                      __Lparam 0000  
                    ___lldiv 0C3A              __size_of___wmul 0026                      ___lwdiv 0E06  
                    ___lwmod 0EF2     interruptHandler@keypress 0013               operation@F3021 005F  
                    __pcinit 0F34                      __ramtop 1000                      _lcdInst 1006  
                    __ptext0 09FA                      __ptext1 0012                      __ptext2 06EE  
                    __ptext3 0FF2                      __ptext4 0FB8                      __ptext5 0F6E  
                    __ptext6 0EF2                      __ptext7 0E06                      __ptext8 0D3A  
                    __ptext9 0FD6              __size_of_printf 030C                      _initLCD 0EA6  
          __end_of_hexpowers FDD4                      _dpowers FDC2                      _isdigit 0FB8  
                    _logging 104C                    _LCD_RIGHT FDDC     __size_of_I2C_Master_Init 005C  
   __size_of_I2C_Master_Read 0024     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
             __pintcode_body 0B74    __size_of_lcd_shift_cursor 001C         end_of_initialization 0F60  
              _begin_logging 0059        __end_of_LCD_SIZE_HORZ FDDF        __end_of_LCD_SIZE_VERT FDDE  
              __Lmediumconst FDB0                      int_func 0B74            __end_of_operation 06EE  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0018  
            ___lldiv@counter 0020                      printf@c 003B                      printf@f 0020  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE                    _PORTBbits 000F81                    _TRISCbits 000F94  
       __size_of_RTC_setTime 004E            operation@keypress 0040                   _total_time 0055  
                printf@width 0039    lcd_shift_cursor@direction 0017               __end_of___wmul 0F94  
              __pidataCOMRAM 1046               __end_of_printf 09FA          start_initialization 0F34  
          ??_I2C_Master_Init 0025            ??_I2C_Master_Read 0015            ??_I2C_Master_Wait 0014  
          ??_I2C_Master_Stop 0015                     ??___wmul 0018     I2C_Master_Init@clockFreq 0021  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 002E    __size_of_interruptHandler 0C32  
                __pbssCOMRAM 0055             _lcd_shift_cursor 0FD6             _I2C_Master_Start 103E  
           _I2C_Master_Write 102C             ___lwdiv@dividend 0014            __CFG_CCP2MX$PORTC 000000  
                  __pintcode 0008                __pmediumconst FDB0                    _lcdNibble 0CBC  
                   ?___lldiv 0014                     ?___lwdiv 0014                     ?___lwmod 001B  
                   ?_lcdInst 0001                     ?_initLCD 0001                     ?_isdigit 0001  
                   ?_logging 0001                    _hexpowers FDCC             ___lwdiv@quotient 0018  
             __size_of_putch 0014                     _LCD_LEFT FDDB      __size_of_lcd_set_cursor 0070  
             ___wmul@product 0018                     _LATDbits 000F8C              lcd_set_cursor@x 001C  
            lcd_set_cursor@y 001A                    _operation 0012             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001            ___wmul@multiplier 0014                lcdNibble@data 0015  
                 printf@flag 0038                lcdNibble@temp 0014                   printf@prec 0035  
             _LCD_HORZ_LIMIT FDE0                    copy_data0 0F48                     __Hrparam 0000  
                 ?_operation 0001                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
            _begin_operation 005B             __size_of___lldiv 0082             __size_of___lwdiv 0052  
           __size_of___lwmod 0042             _interruptHandler 0008                  _isdigit$795 0015  
           __size_of_lcdInst 0014                ??_RTC_setTime 0017              _I2C_Master_Init 0DAA  
            _I2C_Master_Read 0F94             __size_of_initLCD 004C              _I2C_Master_Wait 101A  
            _I2C_Master_Stop 1036       __end_of_LCD_HORZ_LIMIT FDE1             __size_of_isdigit 001E  
           __size_of_logging 0002              ___lwdiv@divisor 0016              ___lwdiv@counter 001A  
                   __ptext10 104C                     __ptext11 0EA6                     __ptext20 0DAA  
                   __ptext12 1006                     __ptext21 0C3A                     __ptext13 0CBC  
                   __ptext14 0E58                     __ptext15 102C                     __ptext16 1036  
                   __ptext17 103E                     __ptext18 0F94                     __ptext19 101A  
             _LCD_VERT_LIMIT FDDF                     _currDate FDD4                __size_of_main 017A  
                ??_lcdNibble 0014                     _num_runs 0057                     int$flags 0065  
   __end_of_lcd_shift_cursor 0FF2                    printf@idx 0032                    printf@val 0036  
                   main@time 004D  I2C_Master_Write@byteToWrite 0015            lcd_shift_cursor@n 0019  
                  putch@data 0016     __end_of_I2C_Master_Start 1046     __end_of_I2C_Master_Write 1036  
                 _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT FDE0                     isdigit@c 0016  
                   intlevel2 0000               _lcd_set_cursor 0D3A          __end_of_RTC_setTime 0EA6  
              _LCD_SIZE_HORZ FDDE             ___lwmod@dividend 001B                _LCD_SIZE_VERT FDDD  
           ___lldiv@dividend 0014                  ??_operation 003C                     printf@ap 0033  
    __end_of_I2C_Master_Init 0E06      __end_of_I2C_Master_Read 0FB8      __end_of_I2C_Master_Wait 102C  
    __end_of_I2C_Master_Stop 103E                  lcdInst@data 0016             ___lldiv@quotient 001C  
            ___lwmod@divisor 001D              ___lwmod@counter 001F                  _SSPCON1bits 000FC6  
                _SSPCON2bits 000FC5       __end_of_lcd_set_cursor 0DAA     lcd_shift_cursor@numChars 0018  
