

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb  5 20:59:38 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.45
    41                           ; Generated 16/11/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4620 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  0017A8                     __pidataCOMRAM:
    77                           	opt stack 0
    78                           
    79                           ;initializer for operation@F3027
    80  0017A8  FFFF               	dw	65535
    81  0017AA  FFFF               	dw	65535
    82  0017AC  FFFF               	dw	65535
    83                           
    84                           	psect	mediumconst
    85  00FD02                     __pmediumconst:
    86                           	opt stack 0
    87  00FD02  00                 	db	0
    88  00FD03                     _keys:
    89                           	opt stack 0
    90  00FD03  31                 	db	49
    91  00FD04  32                 	db	50
    92  00FD05  33                 	db	51
    93  00FD06  41                 	db	65
    94  00FD07  34                 	db	52
    95  00FD08  35                 	db	53
    96  00FD09  36                 	db	54
    97  00FD0A  42                 	db	66
    98  00FD0B  37                 	db	55
    99  00FD0C  38                 	db	56
   100  00FD0D  39                 	db	57
   101  00FD0E  43                 	db	67
   102  00FD0F  2A                 	db	42
   103  00FD10  30                 	db	48
   104  00FD11  23                 	db	35
   105  00FD12  44                 	db	68
   106  00FD13  00                 	db	0
   107  00FD14                     __end_of_keys:
   108                           	opt stack 0
   109  00FD14                     _dpowers:
   110                           	opt stack 0
   111  00FD14  0001               	dw	1
   112  00FD16  000A               	dw	10
   113  00FD18  0064               	dw	100
   114  00FD1A  03E8               	dw	1000
   115  00FD1C  2710               	dw	10000
   116  00FD1E                     __end_of_dpowers:
   117                           	opt stack 0
   118  00FD1E                     _hexpowers:
   119                           	opt stack 0
   120  00FD1E  0001               	dw	1
   121  00FD20  0010               	dw	16
   122  00FD22  0100               	dw	256
   123  00FD24  1000               	dw	4096
   124  00FD26                     __end_of_hexpowers:
   125                           	opt stack 0
   126  00FD26                     _currDate:
   127                           	opt stack 0
   128  00FD26  00                 	db	0
   129  00FD27  30                 	db	48
   130  00FD28  20                 	db	32
   131  00FD29  00                 	db	0
   132  00FD2A  04                 	db	4
   133  00FD2B  02                 	db	2
   134  00FD2C  18                 	db	24
   135  00FD2D                     __end_of_currDate:
   136                           	opt stack 0
   137  00FD2D                     _LCD_LEFT:
   138                           	opt stack 0
   139  00FD2D  00                 	db	0
   140  00FD2E                     __end_of_LCD_LEFT:
   141                           	opt stack 0
   142  00FD2E                     _LCD_RIGHT:
   143                           	opt stack 0
   144  00FD2E  01                 	db	1
   145  00FD2F                     __end_of_LCD_RIGHT:
   146                           	opt stack 0
   147  00FD2F                     _LCD_SIZE_VERT:
   148                           	opt stack 0
   149  00FD2F  02                 	db	2
   150  00FD30                     __end_of_LCD_SIZE_VERT:
   151                           	opt stack 0
   152  00FD30                     _LCD_SIZE_HORZ:
   153                           	opt stack 0
   154  00FD30  10                 	db	16
   155  00FD31                     __end_of_LCD_SIZE_HORZ:
   156                           	opt stack 0
   157  00FD31                     _LCD_VERT_LIMIT:
   158                           	opt stack 0
   159  00FD31  04                 	db	4
   160  00FD32                     __end_of_LCD_VERT_LIMIT:
   161                           	opt stack 0
   162  00FD32                     _LCD_HORZ_LIMIT:
   163                           	opt stack 0
   164  00FD32  14                 	db	20
   165  00FD33                     __end_of_LCD_HORZ_LIMIT:
   166                           	opt stack 0
   167  0000                     _SSPBUF	set	4041
   168  0000                     _SSPCON2bits	set	4037
   169  0000                     _SSPADD	set	4040
   170  0000                     _SSPCON2	set	4037
   171  0000                     _SSPCON1	set	4038
   172  0000                     _SSPSTAT	set	4039
   173  0000                     _TRISCbits	set	3988
   174  0000                     _SSPCON1bits	set	4038
   175  0000                     _PORTB	set	3969
   176  0000                     _PORTBbits	set	3969
   177  0000                     _ADCON1	set	4033
   178  0000                     _ADCON0	set	4034
   179  0000                     _TRISE	set	3990
   180  0000                     _TRISD	set	3989
   181  0000                     _TRISC	set	3988
   182  0000                     _TRISB	set	3987
   183  0000                     _TRISA	set	3986
   184  0000                     _LATE	set	3981
   185  0000                     _LATC	set	3979
   186  0000                     _LATB	set	3978
   187  0000                     _LATA	set	3977
   188  0000                     _INTCONbits	set	4082
   189  0000                     _LATD	set	3980
   190  0000                     _LATDbits	set	3980
   191  0000                     _INT1IF	set	32640
   192  0000                     _INT1IE	set	32643
   193  00FD33                     STR_1:
   194  00FD33  25                 	db	37
   195  00FD34  30                 	db	48	;'0'
   196  00FD35  32                 	db	50	;'2'
   197  00FD36  78                 	db	120	;'x'
   198  00FD37  2F                 	db	47
   199  00FD38  25                 	db	37
   200  00FD39  30                 	db	48	;'0'
   201  00FD3A  32                 	db	50	;'2'
   202  00FD3B  78                 	db	120	;'x'
   203  00FD3C  2F                 	db	47
   204  00FD3D  25                 	db	37
   205  00FD3E  30                 	db	48	;'0'
   206  00FD3F  32                 	db	50	;'2'
   207  00FD40  78                 	db	120	;'x'
   208  00FD41  20                 	db	32
   209  00FD42  20                 	db	32
   210  00FD43  20                 	db	32
   211  00FD44  20                 	db	32
   212  00FD45  25                 	db	37
   213  00FD46  30                 	db	48	;'0'
   214  00FD47  32                 	db	50	;'2'
   215  00FD48  78                 	db	120	;'x'
   216  00FD49  3A                 	db	58	;':'
   217  00FD4A  25                 	db	37
   218  00FD4B  30                 	db	48	;'0'
   219  00FD4C  32                 	db	50	;'2'
   220  00FD4D  78                 	db	120	;'x'
   221  00FD4E  3A                 	db	58	;':'
   222  00FD4F  25                 	db	37
   223  00FD50  30                 	db	48	;'0'
   224  00FD51  32                 	db	50	;'2'
   225  00FD52  78                 	db	120	;'x'
   226  00FD53  00                 	db	0
   227  00FD54                     STR_38:
   228  00FD54  50                 	db	80	;'P'
   229  00FD55  72                 	db	114	;'r'
   230  00FD56  65                 	db	101	;'e'
   231  00FD57  73                 	db	115	;'s'
   232  00FD58  63                 	db	99	;'c'
   233  00FD59  72                 	db	114	;'r'
   234  00FD5A  69                 	db	105	;'i'
   235  00FD5B  70                 	db	112	;'p'
   236  00FD5C  2E                 	db	46
   237  00FD5D  3A                 	db	58	;':'
   238  00FD5E  20                 	db	32
   239  00FD5F  25                 	db	37
   240  00FD60  64                 	db	100	;'d'
   241  00FD61  52                 	db	82	;'R'
   242  00FD62  20                 	db	32
   243  00FD63  25                 	db	37
   244  00FD64  64                 	db	100	;'d'
   245  00FD65  46                 	db	70	;'F'
   246  00FD66  20                 	db	32
   247  00FD67  25                 	db	37
   248  00FD68  64                 	db	100	;'d'
   249  00FD69  4C                 	db	76	;'L'
   250  00FD6A  00                 	db	0
   251  00FD6B                     STR_31:
   252  00FD6B  20                 	db	32
   253  00FD6C  20                 	db	32
   254  00FD6D  20                 	db	32
   255  00FD6E  20                 	db	32
   256  00FD6F  20                 	db	32
   257  00FD70  20                 	db	32
   258  00FD71  50                 	db	80	;'P'
   259  00FD72  49                 	db	73	;'I'
   260  00FD73  4C                 	db	76	;'L'
   261  00FD74  4C                 	db	76	;'L'
   262  00FD75  53                 	db	83	;'S'
   263  00FD76  2E                 	db	46
   264  00FD77  2E                 	db	46
   265  00FD78  2E                 	db	46
   266  00FD79  20                 	db	32
   267  00FD7A  20                 	db	32
   268  00FD7B  20                 	db	32
   269  00FD7C  20                 	db	32
   270  00FD7D  20                 	db	32
   271  00FD7E  20                 	db	32
   272  00FD7F  00                 	db	0
   273  00FD80                     STR_12:
   274  00FD80  20                 	db	32
   275  00FD81  20                 	db	32
   276  00FD82  20                 	db	32
   277  00FD83  20                 	db	32
   278  00FD84  20                 	db	32
   279  00FD85  54                 	db	84	;'T'
   280  00FD86  52                 	db	82	;'R'
   281  00FD87  59                 	db	89	;'Y'
   282  00FD88  20                 	db	32
   283  00FD89  41                 	db	65	;'A'
   284  00FD8A  47                 	db	71	;'G'
   285  00FD8B  41                 	db	65	;'A'
   286  00FD8C  49                 	db	73	;'I'
   287  00FD8D  4E                 	db	78	;'N'
   288  00FD8E  20                 	db	32
   289  00FD8F  20                 	db	32
   290  00FD90  20                 	db	32
   291  00FD91  20                 	db	32
   292  00FD92  20                 	db	32
   293  00FD93  20                 	db	32
   294  00FD94  00                 	db	0
   295  00FD95                     STR_30:
   296  00FD95  20                 	db	32
   297  00FD96  20                 	db	32
   298  00FD97  20                 	db	32
   299  00FD98  20                 	db	32
   300  00FD99  20                 	db	32
   301  00FD9A  44                 	db	68	;'D'
   302  00FD9B  49                 	db	73	;'I'
   303  00FD9C  53                 	db	83	;'S'
   304  00FD9D  50                 	db	80	;'P'
   305  00FD9E  45                 	db	69	;'E'
   306  00FD9F  4E                 	db	78	;'N'
   307  00FDA0  53                 	db	83	;'S'
   308  00FDA1  49                 	db	73	;'I'
   309  00FDA2  4E                 	db	78	;'N'
   310  00FDA3  47                 	db	71	;'G'
   311  00FDA4  20                 	db	32
   312  00FDA5  20                 	db	32
   313  00FDA6  20                 	db	32
   314  00FDA7  20                 	db	32
   315  00FDA8  20                 	db	32
   316  00FDA9  00                 	db	0
   317  00FDAA                     STR_2:
   318  00FDAA  20                 	db	32
   319  00FDAB  20                 	db	32
   320  00FDAC  20                 	db	32
   321  00FDAD  20                 	db	32
   322  00FDAE  20                 	db	32
   323  00FDAF  2A                 	db	42
   324  00FDB0  20                 	db	32
   325  00FDB1  74                 	db	116	;'t'
   326  00FDB2  6F                 	db	111	;'o'
   327  00FDB3  20                 	db	32
   328  00FDB4  42                 	db	66	;'B'
   329  00FDB5  45                 	db	69	;'E'
   330  00FDB6  47                 	db	71	;'G'
   331  00FDB7  49                 	db	73	;'I'
   332  00FDB8  4E                 	db	78	;'N'
   333  00FDB9  20                 	db	32
   334  00FDBA  20                 	db	32
   335  00FDBB  20                 	db	32
   336  00FDBC  20                 	db	32
   337  00FDBD  20                 	db	32
   338  00FDBE  00                 	db	0
   339  00FDBF                     STR_11:
   340  00FDBF  20                 	db	32
   341  00FDC0  20                 	db	32
   342  00FDC1  20                 	db	32
   343  00FDC2  49                 	db	73	;'I'
   344  00FDC3  4E                 	db	78	;'N'
   345  00FDC4  56                 	db	86	;'V'
   346  00FDC5  41                 	db	65	;'A'
   347  00FDC6  4C                 	db	76	;'L'
   348  00FDC7  49                 	db	73	;'I'
   349  00FDC8  44                 	db	68	;'D'
   350  00FDC9  20                 	db	32
   351  00FDCA  49                 	db	73	;'I'
   352  00FDCB  4E                 	db	78	;'N'
   353  00FDCC  50                 	db	80	;'P'
   354  00FDCD  55                 	db	85	;'U'
   355  00FDCE  54                 	db	84	;'T'
   356  00FDCF  20                 	db	32
   357  00FDD0  20                 	db	32
   358  00FDD1  20                 	db	32
   359  00FDD2  20                 	db	32
   360  00FDD3  00                 	db	0
   361  00FDD4                     STR_6:
   362  00FDD4  20                 	db	32
   363  00FDD5  20                 	db	32
   364  00FDD6  20                 	db	32
   365  00FDD7  20                 	db	32
   366  00FDD8  23                 	db	35
   367  00FDD9  20                 	db	32
   368  00FDDA  74                 	db	116	;'t'
   369  00FDDB  6F                 	db	111	;'o'
   370  00FDDC  20                 	db	32
   371  00FDDD  63                 	db	99	;'c'
   372  00FDDE  6F                 	db	111	;'o'
   373  00FDDF  6E                 	db	110	;'n'
   374  00FDE0  66                 	db	102	;'f'
   375  00FDE1  69                 	db	105	;'i'
   376  00FDE2  72                 	db	114	;'r'
   377  00FDE3  6D                 	db	109	;'m'
   378  00FDE4  20                 	db	32
   379  00FDE5  20                 	db	32
   380  00FDE6  20                 	db	32
   381  00FDE7  20                 	db	32
   382  00FDE8  00                 	db	0
   383  00FDE9                     STR_3:
   384  00FDE9  20                 	db	32
   385  00FDEA  20                 	db	32
   386  00FDEB  20                 	db	32
   387  00FDEC  20                 	db	32
   388  00FDED  23                 	db	35
   389  00FDEE  20                 	db	32
   390  00FDEF  66                 	db	102	;'f'
   391  00FDF0  6F                 	db	111	;'o'
   392  00FDF1  72                 	db	114	;'r'
   393  00FDF2  20                 	db	32
   394  00FDF3  4C                 	db	76	;'L'
   395  00FDF4  4F                 	db	79	;'O'
   396  00FDF5  47                 	db	71	;'G'
   397  00FDF6  47                 	db	71	;'G'
   398  00FDF7  49                 	db	73	;'I'
   399  00FDF8  4E                 	db	78	;'N'
   400  00FDF9  47                 	db	71	;'G'
   401  00FDFA  20                 	db	32
   402  00FDFB  20                 	db	32
   403  00FDFC  20                 	db	32
   404  00FDFD  00                 	db	0
   405  00FDFE                     STR_4:
   406  00FDFE  20                 	db	32
   407  00FDFF  20                 	db	32
   408  00FE00  20                 	db	32
   409  00FE01  41                 	db	65	;'A'
   410  00FE02  66                 	db	102	;'f'
   411  00FE03  74                 	db	116	;'t'
   412  00FE04  65                 	db	101	;'e'
   413  00FE05  72                 	db	114	;'r'
   414  00FE06  20                 	db	32
   415  00FE07  65                 	db	101	;'e'
   416  00FE08  6E                 	db	110	;'n'
   417  00FE09  74                 	db	116	;'t'
   418  00FE0A  65                 	db	101	;'e'
   419  00FE0B  72                 	db	114	;'r'
   420  00FE0C  69                 	db	105	;'i'
   421  00FE0D  6E                 	db	110	;'n'
   422  00FE0E  67                 	db	103	;'g'
   423  00FE0F  20                 	db	32
   424  00FE10  20                 	db	32
   425  00FE11  20                 	db	32
   426  00FE12  00                 	db	0
   427  00FE13                     STR_33:
   428  00FE13  20                 	db	32
   429  00FE14  20                 	db	32
   430  00FE15  50                 	db	80	;'P'
   431  00FE16  52                 	db	82	;'R'
   432  00FE17  45                 	db	69	;'E'
   433  00FE18  53                 	db	83	;'S'
   434  00FE19  53                 	db	83	;'S'
   435  00FE1A  20                 	db	32
   436  00FE1B  41                 	db	65	;'A'
   437  00FE1C  4E                 	db	78	;'N'
   438  00FE1D  59                 	db	89	;'Y'
   439  00FE1E  20                 	db	32
   440  00FE1F  4B                 	db	75	;'K'
   441  00FE20  45                 	db	69	;'E'
   442  00FE21  59                 	db	89	;'Y'
   443  00FE22  2E                 	db	46
   444  00FE23  2E                 	db	46
   445  00FE24  2E                 	db	46
   446  00FE25  20                 	db	32
   447  00FE26  20                 	db	32
   448  00FE27  00                 	db	0
   449  00FE28                     STR_5:
   450  00FE28  20                 	db	32
   451  00FE29  20                 	db	32
   452  00FE2A  73                 	db	115	;'s'
   453  00FE2B  65                 	db	101	;'e'
   454  00FE2C  6C                 	db	108	;'l'
   455  00FE2D  65                 	db	101	;'e'
   456  00FE2E  63                 	db	99	;'c'
   457  00FE2F  74                 	db	116	;'t'
   458  00FE30  69                 	db	105	;'i'
   459  00FE31  6F                 	db	111	;'o'
   460  00FE32  6E                 	db	110	;'n'
   461  00FE33  2C                 	db	44
   462  00FE34  20                 	db	32
   463  00FE35  70                 	db	112	;'p'
   464  00FE36  72                 	db	114	;'r'
   465  00FE37  65                 	db	101	;'e'
   466  00FE38  73                 	db	115	;'s'
   467  00FE39  73                 	db	115	;'s'
   468  00FE3A  20                 	db	32
   469  00FE3B  20                 	db	32
   470  00FE3C  00                 	db	0
   471  00FE3D                     STR_32:
   472  00FE3D  20                 	db	32
   473  00FE3E  4F                 	db	79	;'O'
   474  00FE3F  50                 	db	80	;'P'
   475  00FE40  45                 	db	69	;'E'
   476  00FE41  52                 	db	82	;'R'
   477  00FE42  41                 	db	65	;'A'
   478  00FE43  54                 	db	84	;'T'
   479  00FE44  49                 	db	73	;'I'
   480  00FE45  4F                 	db	79	;'O'
   481  00FE46  4E                 	db	78	;'N'
   482  00FE47  20                 	db	32
   483  00FE48  43                 	db	67	;'C'
   484  00FE49  4F                 	db	79	;'O'
   485  00FE4A  4D                 	db	77	;'M'
   486  00FE4B  50                 	db	80	;'P'
   487  00FE4C  4C                 	db	76	;'L'
   488  00FE4D  45                 	db	69	;'E'
   489  00FE4E  54                 	db	84	;'T'
   490  00FE4F  45                 	db	69	;'E'
   491  00FE50  20                 	db	32
   492  00FE51  00                 	db	0
   493  00FE52                     STR_16:
   494  00FE52  28                 	db	40
   495  00FE53  33                 	db	51	;'3'
   496  00FE54  29                 	db	41
   497  00FE55  42                 	db	66	;'B'
   498  00FE56  6F                 	db	111	;'o'
   499  00FE57  74                 	db	116	;'t'
   500  00FE58  68                 	db	104	;'h'
   501  00FE59  20                 	db	32
   502  00FE5A  28                 	db	40
   503  00FE5B  34                 	db	52	;'4'
   504  00FE5C  29                 	db	41
   505  00FE5D  41                 	db	65	;'A'
   506  00FE5E  6C                 	db	108	;'l'
   507  00FE5F  74                 	db	116	;'t'
   508  00FE60  65                 	db	101	;'e'
   509  00FE61  72                 	db	114	;'r'
   510  00FE62  6E                 	db	110	;'n'
   511  00FE63  61                 	db	97	;'a'
   512  00FE64  74                 	db	116	;'t'
   513  00FE65  65                 	db	101	;'e'
   514  00FE66  00                 	db	0
   515  00FE67                     STR_20:
   516  00FE67  28                 	db	40
   517  00FE68  33                 	db	51	;'3'
   518  00FE69  29                 	db	41
   519  00FE6A  20                 	db	32
   520  00FE6B  41                 	db	65	;'A'
   521  00FE6C  6C                 	db	108	;'l'
   522  00FE6D  74                 	db	116	;'t'
   523  00FE6E  65                 	db	101	;'e'
   524  00FE6F  72                 	db	114	;'r'
   525  00FE70  6E                 	db	110	;'n'
   526  00FE71  61                 	db	97	;'a'
   527  00FE72  74                 	db	116	;'t'
   528  00FE73  65                 	db	101	;'e'
   529  00FE74  20                 	db	32
   530  00FE75  28                 	db	40
   531  00FE76  4D                 	db	77	;'M'
   532  00FE77  6F                 	db	111	;'o'
   533  00FE78  6E                 	db	110	;'n'
   534  00FE79  29                 	db	41
   535  00FE7A  00                 	db	0
   536  00FE7B                     STR_19:
   537  00FE7B  28                 	db	40
   538  00FE7C  32                 	db	50	;'2'
   539  00FE7D  29                 	db	41
   540  00FE7E  20                 	db	32
   541  00FE7F  41                 	db	65	;'A'
   542  00FE80  6C                 	db	108	;'l'
   543  00FE81  74                 	db	116	;'t'
   544  00FE82  65                 	db	101	;'e'
   545  00FE83  72                 	db	114	;'r'
   546  00FE84  6E                 	db	110	;'n'
   547  00FE85  61                 	db	97	;'a'
   548  00FE86  74                 	db	116	;'t'
   549  00FE87  65                 	db	101	;'e'
   550  00FE88  20                 	db	32
   551  00FE89  28                 	db	40
   552  00FE8A  53                 	db	83	;'S'
   553  00FE8B  75                 	db	117	;'u'
   554  00FE8C  6E                 	db	110	;'n'
   555  00FE8D  29                 	db	41
   556  00FE8E  00                 	db	0
   557  00FE8F                     STR_25:
   558  00FE8F  2D                 	db	45
   559  00FE90  20                 	db	32
   560  00FE91  4D                 	db	77	;'M'
   561  00FE92  6F                 	db	111	;'o'
   562  00FE93  72                 	db	114	;'r'
   563  00FE94  6E                 	db	110	;'n'
   564  00FE95  2E                 	db	46
   565  00FE96  20                 	db	32
   566  00FE97  26                 	db	38
   567  00FE98  20                 	db	32
   568  00FE99  41                 	db	65	;'A'
   569  00FE9A  66                 	db	102	;'f'
   570  00FE9B  74                 	db	116	;'t'
   571  00FE9C  65                 	db	101	;'e'
   572  00FE9D  72                 	db	114	;'r'
   573  00FE9E  6E                 	db	110	;'n'
   574  00FE9F  6F                 	db	111	;'o'
   575  00FEA0  6F                 	db	111	;'o'
   576  00FEA1  6E                 	db	110	;'n'
   577  00FEA2  00                 	db	0
   578  00FEA3                     STR_36:
   579  00FEA3  28                 	db	40
   580  00FEA4  23                 	db	35
   581  00FEA5  20                 	db	32
   582  00FEA6  74                 	db	116	;'t'
   583  00FEA7  6F                 	db	111	;'o'
   584  00FEA8  20                 	db	32
   585  00FEA9  63                 	db	99	;'c'
   586  00FEAA  6F                 	db	111	;'o'
   587  00FEAB  6E                 	db	110	;'n'
   588  00FEAC  74                 	db	116	;'t'
   589  00FEAD  69                 	db	105	;'i'
   590  00FEAE  6E                 	db	110	;'n'
   591  00FEAF  75                 	db	117	;'u'
   592  00FEB0  65                 	db	101	;'e'
   593  00FEB1  2E                 	db	46
   594  00FEB2  2E                 	db	46
   595  00FEB3  2E                 	db	46
   596  00FEB4  29                 	db	41
   597  00FEB5  00                 	db	0
   598  00FEB6                     STR_21:
   599  00FEB6  50                 	db	80	;'P'
   600  00FEB7  72                 	db	114	;'r'
   601  00FEB8  65                 	db	101	;'e'
   602  00FEB9  73                 	db	115	;'s'
   603  00FEBA  63                 	db	99	;'c'
   604  00FEBB  72                 	db	114	;'r'
   605  00FEBC  69                 	db	105	;'i'
   606  00FEBD  70                 	db	112	;'p'
   607  00FEBE  2E                 	db	46
   608  00FEBF  20                 	db	32
   609  00FEC0  64                 	db	100	;'d'
   610  00FEC1  65                 	db	101	;'e'
   611  00FEC2  74                 	db	116	;'t'
   612  00FEC3  61                 	db	97	;'a'
   613  00FEC4  69                 	db	105	;'i'
   614  00FEC5  6C                 	db	108	;'l'
   615  00FEC6  73                 	db	115	;'s'
   616  00FEC7  3A                 	db	58	;':'
   617  00FEC8  00                 	db	0
   618  00FEC9                     STR_29:
   619  00FEC9  2D                 	db	45
   620  00FECA  20                 	db	32
   621  00FECB  41                 	db	65	;'A'
   622  00FECC  6C                 	db	108	;'l'
   623  00FECD  74                 	db	116	;'t'
   624  00FECE  65                 	db	101	;'e'
   625  00FECF  72                 	db	114	;'r'
   626  00FED0  6E                 	db	110	;'n'
   627  00FED1  61                 	db	97	;'a'
   628  00FED2  74                 	db	116	;'t'
   629  00FED3  65                 	db	101	;'e'
   630  00FED4  20                 	db	32
   631  00FED5  28                 	db	40
   632  00FED6  4D                 	db	77	;'M'
   633  00FED7  6F                 	db	111	;'o'
   634  00FED8  6E                 	db	110	;'n'
   635  00FED9  29                 	db	41
   636  00FEDA  00                 	db	0
   637  00FEDB                     STR_28:
   638  00FEDB  2D                 	db	45
   639  00FEDC  20                 	db	32
   640  00FEDD  41                 	db	65	;'A'
   641  00FEDE  6C                 	db	108	;'l'
   642  00FEDF  74                 	db	116	;'t'
   643  00FEE0  65                 	db	101	;'e'
   644  00FEE1  72                 	db	114	;'r'
   645  00FEE2  6E                 	db	110	;'n'
   646  00FEE3  61                 	db	97	;'a'
   647  00FEE4  74                 	db	116	;'t'
   648  00FEE5  65                 	db	101	;'e'
   649  00FEE6  20                 	db	32
   650  00FEE7  28                 	db	40
   651  00FEE8  53                 	db	83	;'S'
   652  00FEE9  75                 	db	117	;'u'
   653  00FEEA  6E                 	db	110	;'n'
   654  00FEEB  29                 	db	41
   655  00FEEC  00                 	db	0
   656  00FEED                     STR_55:
   657  00FEED  52                 	db	82	;'R'
   658  00FEEE  3A                 	db	58	;':'
   659  00FEEF  20                 	db	32
   660  00FEF0  25                 	db	37
   661  00FEF1  64                 	db	100	;'d'
   662  00FEF2  20                 	db	32
   663  00FEF3  46                 	db	70	;'F'
   664  00FEF4  3A                 	db	58	;':'
   665  00FEF5  20                 	db	32
   666  00FEF6  25                 	db	37
   667  00FEF7  64                 	db	100	;'d'
   668  00FEF8  20                 	db	32
   669  00FEF9  4C                 	db	76	;'L'
   670  00FEFA  3A                 	db	58	;':'
   671  00FEFB  20                 	db	32
   672  00FEFC  25                 	db	37
   673  00FEFD  64                 	db	100	;'d'
   674  00FEFE  00                 	db	0
   675  00FEFF                     STR_57:
   676  00FEFF  30                 	db	48	;'0'
   677  00FF00  31                 	db	49	;'1'
   678  00FF01  32                 	db	50	;'2'
   679  00FF02  33                 	db	51	;'3'
   680  00FF03  34                 	db	52	;'4'
   681  00FF04  35                 	db	53	;'5'
   682  00FF05  36                 	db	54	;'6'
   683  00FF06  37                 	db	55	;'7'
   684  00FF07  38                 	db	56	;'8'
   685  00FF08  39                 	db	57	;'9'
   686  00FF09  61                 	db	97	;'a'
   687  00FF0A  62                 	db	98	;'b'
   688  00FF0B  63                 	db	99	;'c'
   689  00FF0C  64                 	db	100	;'d'
   690  00FF0D  65                 	db	101	;'e'
   691  00FF0E  66                 	db	102	;'f'
   692  00FF0F  00                 	db	0
   693  00FF10                     STR_54:
   694  00FF10  50                 	db	80	;'P'
   695  00FF11  69                 	db	105	;'i'
   696  00FF12  6C                 	db	108	;'l'
   697  00FF13  6C                 	db	108	;'l'
   698  00FF14  73                 	db	115	;'s'
   699  00FF15  20                 	db	32
   700  00FF16  52                 	db	82	;'R'
   701  00FF17  65                 	db	101	;'e'
   702  00FF18  6D                 	db	109	;'m'
   703  00FF19  61                 	db	97	;'a'
   704  00FF1A  69                 	db	105	;'i'
   705  00FF1B  6E                 	db	110	;'n'
   706  00FF1C  69                 	db	105	;'i'
   707  00FF1D  6E                 	db	110	;'n'
   708  00FF1E  67                 	db	103	;'g'
   709  00FF1F  3A                 	db	58	;':'
   710  00FF20  00                 	db	0
   711  00FF21                     STR_7:
   712  00FF21  4E                 	db	78	;'N'
   713  00FF22  75                 	db	117	;'u'
   714  00FF23  6D                 	db	109	;'m'
   715  00FF24  62                 	db	98	;'b'
   716  00FF25  65                 	db	101	;'e'
   717  00FF26  72                 	db	114	;'r'
   718  00FF27  20                 	db	32
   719  00FF28  6F                 	db	111	;'o'
   720  00FF29  66                 	db	102	;'f'
   721  00FF2A  20                 	db	32
   722  00FF2B  70                 	db	112	;'p'
   723  00FF2C  69                 	db	105	;'i'
   724  00FF2D  6C                 	db	108	;'l'
   725  00FF2E  6C                 	db	108	;'l'
   726  00FF2F  73                 	db	115	;'s'
   727  00FF30  3A                 	db	58	;':'
   728  00FF31  00                 	db	0
   729  00FF32                     STR_35:
   730  00FF32  54                 	db	84	;'T'
   731  00FF33  6F                 	db	111	;'o'
   732  00FF34  74                 	db	116	;'t'
   733  00FF35  61                 	db	97	;'a'
   734  00FF36  6C                 	db	108	;'l'
   735  00FF37  20                 	db	32
   736  00FF38  74                 	db	116	;'t'
   737  00FF39  69                 	db	105	;'i'
   738  00FF3A  6D                 	db	109	;'m'
   739  00FF3B  65                 	db	101	;'e'
   740  00FF3C  3A                 	db	58	;':'
   741  00FF3D  20                 	db	32
   742  00FF3E  25                 	db	37
   743  00FF3F  64                 	db	100	;'d'
   744  00FF40  20                 	db	32
   745  00FF41  73                 	db	115	;'s'
   746  00FF42  00                 	db	0
   747  00FF43                     STR_22:
   748  00FF43  2D                 	db	45
   749  00FF44  20                 	db	32
   750  00FF45  25                 	db	37
   751  00FF46  64                 	db	100	;'d'
   752  00FF47  52                 	db	82	;'R'
   753  00FF48  20                 	db	32
   754  00FF49  25                 	db	37
   755  00FF4A  64                 	db	100	;'d'
   756  00FF4B  46                 	db	70	;'F'
   757  00FF4C  20                 	db	32
   758  00FF4D  25                 	db	37
   759  00FF4E  64                 	db	100	;'d'
   760  00FF4F  4C                 	db	76	;'L'
   761  00FF50  00                 	db	0
   762  00FF51                     STR_26:
   763  00FF51  2D                 	db	45
   764  00FF52  20                 	db	32
   765  00FF53  41                 	db	65	;'A'
   766  00FF54  6C                 	db	108	;'l'
   767  00FF55  74                 	db	116	;'t'
   768  00FF56  65                 	db	101	;'e'
   769  00FF57  72                 	db	114	;'r'
   770  00FF58  6E                 	db	110	;'n'
   771  00FF59  61                 	db	97	;'a'
   772  00FF5A  74                 	db	116	;'t'
   773  00FF5B  69                 	db	105	;'i'
   774  00FF5C  6E                 	db	110	;'n'
   775  00FF5D  67                 	db	103	;'g'
   776  00FF5E  00                 	db	0
   777  00FF5F                     STR_13:
   778  00FF5F  52                 	db	82	;'R'
   779  00FF60  65                 	db	101	;'e'
   780  00FF61  70                 	db	112	;'p'
   781  00FF62  65                 	db	101	;'e'
   782  00FF63  74                 	db	116	;'t'
   783  00FF64  69                 	db	105	;'i'
   784  00FF65  74                 	db	116	;'t'
   785  00FF66  69                 	db	105	;'i'
   786  00FF67  6F                 	db	111	;'o'
   787  00FF68  6E                 	db	110	;'n'
   788  00FF69  3A                 	db	58	;':'
   789  00FF6A  20                 	db	32
   790  00FF6B  00                 	db	0
   791  00FF6C                     STR_15:
   792  00FF6C  28                 	db	40
   793  00FF6D  32                 	db	50	;'2'
   794  00FF6E  29                 	db	41
   795  00FF6F  41                 	db	65	;'A'
   796  00FF70  66                 	db	102	;'f'
   797  00FF71  74                 	db	116	;'t'
   798  00FF72  65                 	db	101	;'e'
   799  00FF73  72                 	db	114	;'r'
   800  00FF74  6E                 	db	110	;'n'
   801  00FF75  6F                 	db	111	;'o'
   802  00FF76  6F                 	db	111	;'o'
   803  00FF77  6E                 	db	110	;'n'
   804  00FF78  00                 	db	0
   805  00FF79                     STR_24:
   806  00FF79  2D                 	db	45
   807  00FF7A  20                 	db	32
   808  00FF7B  41                 	db	65	;'A'
   809  00FF7C  66                 	db	102	;'f'
   810  00FF7D  74                 	db	116	;'t'
   811  00FF7E  65                 	db	101	;'e'
   812  00FF7F  72                 	db	114	;'r'
   813  00FF80  6E                 	db	110	;'n'
   814  00FF81  6F                 	db	111	;'o'
   815  00FF82  6F                 	db	111	;'o'
   816  00FF83  6E                 	db	110	;'n'
   817  00FF84  73                 	db	115	;'s'
   818  00FF85  00                 	db	0
   819  00FF86                     STR_18:
   820  00FF86  28                 	db	40
   821  00FF87  31                 	db	49	;'1'
   822  00FF88  29                 	db	41
   823  00FF89  20                 	db	32
   824  00FF8A  45                 	db	69	;'E'
   825  00FF8B  76                 	db	118	;'v'
   826  00FF8C  65                 	db	101	;'e'
   827  00FF8D  72                 	db	114	;'r'
   828  00FF8E  79                 	db	121	;'y'
   829  00FF8F  64                 	db	100	;'d'
   830  00FF90  61                 	db	97	;'a'
   831  00FF91  79                 	db	121	;'y'
   832  00FF92  00                 	db	0
   833  00FF93                     STR_17:
   834  00FF93  46                 	db	70	;'F'
   835  00FF94  72                 	db	114	;'r'
   836  00FF95  65                 	db	101	;'e'
   837  00FF96  71                 	db	113	;'q'
   838  00FF97  75                 	db	117	;'u'
   839  00FF98  65                 	db	101	;'e'
   840  00FF99  6E                 	db	110	;'n'
   841  00FF9A  63                 	db	99	;'c'
   842  00FF9B  79                 	db	121	;'y'
   843  00FF9C  3A                 	db	58	;':'
   844  00FF9D  20                 	db	32
   845  00FF9E  00                 	db	0
   846  00FF9F                     STR_41:
   847  00FF9F  52                 	db	82	;'R'
   848  00FFA0  65                 	db	101	;'e'
   849  00FFA1  70                 	db	112	;'p'
   850  00FFA2  65                 	db	101	;'e'
   851  00FFA3  74                 	db	116	;'t'
   852  00FFA4  69                 	db	105	;'i'
   853  00FFA5  74                 	db	116	;'t'
   854  00FFA6  69                 	db	105	;'i'
   855  00FFA7  6F                 	db	111	;'o'
   856  00FFA8  6E                 	db	110	;'n'
   857  00FFA9  3A                 	db	58	;':'
   858  00FFAA  00                 	db	0
   859  00FFAB                     STR_48:
   860  00FFAB  46                 	db	70	;'F'
   861  00FFAC  72                 	db	114	;'r'
   862  00FFAD  65                 	db	101	;'e'
   863  00FFAE  71                 	db	113	;'q'
   864  00FFAF  75                 	db	117	;'u'
   865  00FFB0  65                 	db	101	;'e'
   866  00FFB1  6E                 	db	110	;'n'
   867  00FFB2  63                 	db	99	;'c'
   868  00FFB3  79                 	db	121	;'y'
   869  00FFB4  3A                 	db	58	;':'
   870  00FFB5  00                 	db	0
   871  00FFB6                     STR_14:
   872  00FFB6  28                 	db	40
   873  00FFB7  31                 	db	49	;'1'
   874  00FFB8  29                 	db	41
   875  00FFB9  4D                 	db	77	;'M'
   876  00FFBA  6F                 	db	111	;'o'
   877  00FFBB  72                 	db	114	;'r'
   878  00FFBC  6E                 	db	110	;'n'
   879  00FFBD  69                 	db	105	;'i'
   880  00FFBE  6E                 	db	110	;'n'
   881  00FFBF  67                 	db	103	;'g'
   882  00FFC0  00                 	db	0
   883  00FFC1                     STR_23:
   884  00FFC1  2D                 	db	45
   885  00FFC2  20                 	db	32
   886  00FFC3  4D                 	db	77	;'M'
   887  00FFC4  6F                 	db	111	;'o'
   888  00FFC5  72                 	db	114	;'r'
   889  00FFC6  6E                 	db	110	;'n'
   890  00FFC7  69                 	db	105	;'i'
   891  00FFC8  6E                 	db	110	;'n'
   892  00FFC9  67                 	db	103	;'g'
   893  00FFCA  73                 	db	115	;'s'
   894  00FFCB  00                 	db	0
   895  00FFCC                     STR_27:
   896  00FFCC  2D                 	db	45
   897  00FFCD  20                 	db	32
   898  00FFCE  45                 	db	69	;'E'
   899  00FFCF  76                 	db	118	;'v'
   900  00FFD0  65                 	db	101	;'e'
   901  00FFD1  72                 	db	114	;'r'
   902  00FFD2  79                 	db	121	;'y'
   903  00FFD3  64                 	db	100	;'d'
   904  00FFD4  61                 	db	97	;'a'
   905  00FFD5  79                 	db	121	;'y'
   906  00FFD6  00                 	db	0
   907  00FFD7                     STR_53:
   908  00FFD7  52                 	db	82	;'R'
   909  00FFD8  75                 	db	117	;'u'
   910  00FFD9  6E                 	db	110	;'n'
   911  00FFDA  20                 	db	32
   912  00FFDB  25                 	db	37
   913  00FFDC  64                 	db	100	;'d'
   914  00FFDD  20                 	db	32
   915  00FFDE  00                 	db	0
   916  00FFDF                     STR_9:
   917  00FFDF  20                 	db	32
   918  00FFE0  20                 	db	32
   919  00FFE1  20                 	db	32
   920  00FFE2  46                 	db	70	;'F'
   921  00FFE3  3A                 	db	58	;':'
   922  00FFE4  20                 	db	32
   923  00FFE5  5F                 	db	95	;'_'
   924  00FFE6  00                 	db	0
   925  00FFE7                     STR_10:
   926  00FFE7  20                 	db	32
   927  00FFE8  20                 	db	32
   928  00FFE9  20                 	db	32
   929  00FFEA  4C                 	db	76	;'L'
   930  00FFEB  3A                 	db	58	;':'
   931  00FFEC  20                 	db	32
   932  00FFED  5F                 	db	95	;'_'
   933  00FFEE  00                 	db	0
   934  00FFEF                     STR_8:
   935  00FFEF  20                 	db	32
   936  00FFF0  20                 	db	32
   937  00FFF1  20                 	db	32
   938  00FFF2  52                 	db	82	;'R'
   939  00FFF3  3A                 	db	58	;':'
   940  00FFF4  20                 	db	32
   941  00FFF5  5F                 	db	95	;'_'
   942  00FFF6  00                 	db	0
   943  00FFF7                     STR_34:
   944  00FFF7  52                 	db	82	;'R'
   945  00FFF8  75                 	db	117	;'u'
   946  00FFF9  6E                 	db	110	;'n'
   947  00FFFA  20                 	db	32
   948  00FFFB  25                 	db	37
   949  00FFFC  64                 	db	100	;'d'
   950  00FFFD  00                 	db	0
   951  0000                     
   952                           ; #config settings
   953  00FFFE  00                 	db	0	; dummy byte at the end
   954  0000                     
   955                           	psect	cinit
   956  00164A                     __pcinit:
   957                           	opt stack 0
   958  00164A                     start_initialization:
   959                           	opt stack 0
   960  00164A                     __initialization:
   961                           	opt stack 0
   962                           
   963                           ; Initialize objects allocated to COMRAM (6 bytes)
   964                           ; load TBLPTR registers with __pidataCOMRAM
   965  00164A  0EA8               	movlw	low __pidataCOMRAM
   966  00164C  6EF6               	movwf	tblptrl,c
   967  00164E  0E17               	movlw	high __pidataCOMRAM
   968  001650  6EF7               	movwf	tblptrh,c
   969  001652  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   970  001654  6EF8               	movwf	tblptru,c
   971  001656  EE00  F04E         	lfsr	0,__pdataCOMRAM
   972  00165A  EE10 F006          	lfsr	1,6
   973  00165E                     copy_data0:
   974  00165E  0009               	tblrd		*+
   975  001660  CFF5 FFEE          	movff	tablat,postinc0
   976  001664  50E5               	movf	postdec1,w,c
   977  001666  50E1               	movf	fsr1l,w,c
   978  001668  E1FA               	bnz	copy_data0
   979                           
   980                           ; Clear objects allocated to BANK0 (32 bytes)
   981  00166A  EE00  F0A7         	lfsr	0,__pbssBANK0
   982  00166E  0E20               	movlw	32
   983  001670                     clear_0:
   984  001670  6AEE               	clrf	postinc0,c
   985  001672  06E8               	decf	wreg,f,c
   986  001674  E1FD               	bnz	clear_0
   987                           
   988                           ; Clear objects allocated to COMRAM (5 bytes)
   989  001676  6A58               	clrf	(__pbssCOMRAM+4)& (0+255),c
   990  001678  6A57               	clrf	(__pbssCOMRAM+3)& (0+255),c
   991  00167A  6A56               	clrf	(__pbssCOMRAM+2)& (0+255),c
   992  00167C  6A55               	clrf	(__pbssCOMRAM+1)& (0+255),c
   993  00167E  6A54               	clrf	__pbssCOMRAM& (0+255),c
   994  001680                     end_of_initialization:
   995                           	opt stack 0
   996  001680                     __end_of__initialization:
   997                           	opt stack 0
   998  001680  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   999  001682  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1000  001684  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1001  001686  6EF8               	movwf	tblptru,c
  1002  001688  0100               	movlb	0
  1003  00168A  EFCD  F008         	goto	_main	;jump to C main() function
  1004                           tblptru	equ	0xFF8
  1005                           tblptrh	equ	0xFF7
  1006                           tblptrl	equ	0xFF6
  1007                           tablat	equ	0xFF5
  1008                           postinc0	equ	0xFEE
  1009                           wreg	equ	0xFE8
  1010                           postdec1	equ	0xFE5
  1011                           fsr1l	equ	0xFE1
  1012                           
  1013                           	psect	bssCOMRAM
  1014  000054                     __pbssCOMRAM:
  1015                           	opt stack 0
  1016  000054                     _num_runs:
  1017                           	opt stack 0
  1018  000054                     	ds	2
  1019  000056                     _total_time:
  1020                           	opt stack 0
  1021  000056                     	ds	1
  1022  000057                     	ds	1
  1023  000058                     _LCDinterruptState:
  1024                           	opt stack 0
  1025  000058                     	ds	1
  1026                           tblptru	equ	0xFF8
  1027                           tblptrh	equ	0xFF7
  1028                           tblptrl	equ	0xFF6
  1029                           tablat	equ	0xFF5
  1030                           postinc0	equ	0xFEE
  1031                           wreg	equ	0xFE8
  1032                           postdec1	equ	0xFE5
  1033                           fsr1l	equ	0xFE1
  1034                           
  1035                           	psect	dataCOMRAM
  1036  00004E                     __pdataCOMRAM:
  1037                           	opt stack 0
  1038  00004E                     operation@F3027:
  1039                           	opt stack 0
  1040  00004E                     	ds	6
  1041                           tblptru	equ	0xFF8
  1042                           tblptrh	equ	0xFF7
  1043                           tblptrl	equ	0xFF6
  1044                           tablat	equ	0xFF5
  1045                           postinc0	equ	0xFEE
  1046                           wreg	equ	0xFE8
  1047                           postdec1	equ	0xFE5
  1048                           fsr1l	equ	0xFE1
  1049                           
  1050                           	psect	bssBANK0
  1051  0000A7                     __pbssBANK0:
  1052                           	opt stack 0
  1053  0000A7                     _box_fill:
  1054                           	opt stack 0
  1055  0000A7                     	ds	28
  1056  0000C3                     _begin_logging:
  1057                           	opt stack 0
  1058  0000C3                     	ds	2
  1059  0000C5                     _begin_operation:
  1060                           	opt stack 0
  1061  0000C5                     	ds	2
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           postdec1	equ	0xFE5
  1069                           fsr1l	equ	0xFE1
  1070                           
  1071                           	psect	cstackBANK0
  1072  000080                     __pcstackBANK0:
  1073                           	opt stack 0
  1074  000080                     operation@keypress_422:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x0
  1078  000080                     	ds	1
  1079  000081                     operation@start_time:
  1080                           	opt stack 0
  1081                           
  1082                           ; 7 bytes @ 0x1
  1083  000081                     	ds	7
  1084  000088                     operation@end_time:
  1085                           	opt stack 0
  1086                           
  1087                           ; 7 bytes @ 0x8
  1088  000088                     	ds	7
  1089  00008F                     operation@keypress_426:
  1090                           	opt stack 0
  1091                           
  1092                           ; 1 bytes @ 0xF
  1093  00008F                     	ds	1
  1094  000090                     operation@keypress_430:
  1095                           	opt stack 0
  1096                           
  1097                           ; 1 bytes @ 0x10
  1098  000090                     	ds	1
  1099  000091                     operation@keypress_438:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x11
  1103  000091                     	ds	1
  1104  000092                     operation@keypress_445:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x12
  1108  000092                     	ds	1
  1109  000093                     operation@keypress_450:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x13
  1113  000093                     	ds	1
  1114  000094                     operation@dir:
  1115                           	opt stack 0
  1116                           
  1117                           ; 1 bytes @ 0x14
  1118  000094                     	ds	1
  1119  000095                     operation@fill_start:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x15
  1123  000095                     	ds	2
  1124  000097                     operation@frequency:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x17
  1128  000097                     	ds	1
  1129  000098                     operation@fill_increment:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x18
  1133  000098                     	ds	2
  1134  00009A                     operation@keypress:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x1A
  1138  00009A                     	ds	1
  1139  00009B                     operation@keypress_392:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x1B
  1143  00009B                     	ds	1
  1144  00009C                     operation@keypress_405:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x1C
  1148  00009C                     	ds	1
  1149  00009D                     operation@keypress_393:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x1D
  1153  00009D                     	ds	1
  1154  00009E                     operation@keypress_400:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x1E
  1158  00009E                     	ds	1
  1159  00009F                     operation@prescription:
  1160                           	opt stack 0
  1161                           
  1162                           ; 6 bytes @ 0x1F
  1163  00009F                     	ds	6
  1164  0000A5                     operation@repetition:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x25
  1168  0000A5                     	ds	1
  1169  0000A6                     operation@i:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x26
  1173  0000A6                     	ds	1
  1174                           tblptru	equ	0xFF8
  1175                           tblptrh	equ	0xFF7
  1176                           tblptrl	equ	0xFF6
  1177                           tablat	equ	0xFF5
  1178                           postinc0	equ	0xFEE
  1179                           wreg	equ	0xFE8
  1180                           postdec1	equ	0xFE5
  1181                           fsr1l	equ	0xFE1
  1182                           
  1183                           	psect	cstackCOMRAM
  1184  000001                     __pcstackCOMRAM:
  1185                           	opt stack 0
  1186  000001                     ??_interruptHandler:
  1187  000001                     
  1188                           ; 1 bytes @ 0x0
  1189  000001                     	ds	18
  1190  000013                     interruptHandler@keypress:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x12
  1194  000013                     	ds	1
  1195  000014                     ??_isdigit:
  1196  000014                     ??_I2C_Master_Wait:
  1197  000014                     ?___wmul:
  1198                           	opt stack 0
  1199  000014                     ?___lwdiv:
  1200                           	opt stack 0
  1201  000014                     ?___lldiv:
  1202                           	opt stack 0
  1203  000014                     lcdNibble@temp:
  1204                           	opt stack 0
  1205  000014                     ___wmul@multiplier:
  1206                           	opt stack 0
  1207  000014                     ___lwdiv@dividend:
  1208                           	opt stack 0
  1209  000014                     ___lldiv@dividend:
  1210                           	opt stack 0
  1211                           
  1212                           ; 4 bytes @ 0x13
  1213  000014                     	ds	1
  1214  000015                     lcdNibble@data:
  1215                           	opt stack 0
  1216  000015                     I2C_Master_Read@ackBit:
  1217                           	opt stack 0
  1218  000015                     _isdigit$834:
  1219                           	opt stack 0
  1220  000015                     I2C_Master_Write@byteToWrite:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x14
  1224  000015                     	ds	1
  1225  000016                     lcdInst@data:
  1226                           	opt stack 0
  1227  000016                     putch@data:
  1228                           	opt stack 0
  1229  000016                     I2C_Master_Read@receivedByte:
  1230                           	opt stack 0
  1231  000016                     isdigit@c:
  1232                           	opt stack 0
  1233  000016                     ___wmul@multiplicand:
  1234                           	opt stack 0
  1235  000016                     ___lwdiv@divisor:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x15
  1239  000016                     	ds	1
  1240  000017                     ??_initLCD:
  1241  000017                     lcd_shift_cursor@direction:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x16
  1245  000017                     	ds	1
  1246  000018                     lcd_shift_cursor@numChars:
  1247                           	opt stack 0
  1248  000018                     ___lwdiv@counter:
  1249                           	opt stack 0
  1250  000018                     ___wmul@product:
  1251                           	opt stack 0
  1252  000018                     ___lldiv@divisor:
  1253                           	opt stack 0
  1254                           
  1255                           ; 4 bytes @ 0x17
  1256  000018                     	ds	1
  1257  000019                     lcd_shift_cursor@n:
  1258                           	opt stack 0
  1259  000019                     ___lwdiv@quotient:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x18
  1263  000019                     	ds	1
  1264  00001A                     lcd_set_cursor@y:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x19
  1268  00001A                     	ds	1
  1269  00001B                     ??_lcd_set_cursor:
  1270  00001B                     ?___lwmod:
  1271                           	opt stack 0
  1272  00001B                     ___lwmod@dividend:
  1273                           	opt stack 0
  1274                           
  1275                           ; 2 bytes @ 0x1A
  1276  00001B                     	ds	1
  1277  00001C                     lcd_set_cursor@x:
  1278                           	opt stack 0
  1279  00001C                     ___lldiv@quotient:
  1280                           	opt stack 0
  1281                           
  1282                           ; 4 bytes @ 0x1B
  1283  00001C                     	ds	1
  1284  00001D                     ___lwmod@divisor:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x1C
  1288  00001D                     	ds	2
  1289  00001F                     ___lwmod@counter:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x1E
  1293  00001F                     	ds	1
  1294  000020                     ?_printf:
  1295                           	opt stack 0
  1296  000020                     ___lldiv@counter:
  1297                           	opt stack 0
  1298  000020                     printf@f:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x1F
  1302  000020                     	ds	1
  1303  000021                     I2C_Master_Init@clockFreq:
  1304                           	opt stack 0
  1305                           
  1306                           ; 4 bytes @ 0x20
  1307  000021                     	ds	4
  1308  000025                     ??_I2C_Master_Init:
  1309                           
  1310                           ; 1 bytes @ 0x24
  1311  000025                     	ds	9
  1312  00002E                     ??_printf:
  1313                           
  1314                           ; 1 bytes @ 0x2D
  1315  00002E                     	ds	4
  1316  000032                     printf@idx:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x31
  1320  000032                     	ds	1
  1321  000033                     printf@ap:
  1322                           	opt stack 0
  1323                           
  1324                           ; 2 bytes @ 0x32
  1325  000033                     	ds	2
  1326  000035                     printf@prec:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x34
  1330  000035                     	ds	1
  1331  000036                     printf@val:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x35
  1335  000036                     	ds	2
  1336  000038                     printf@flag:
  1337                           	opt stack 0
  1338                           
  1339                           ; 1 bytes @ 0x37
  1340  000038                     	ds	1
  1341  000039                     printf@width:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x38
  1345  000039                     	ds	2
  1346  00003B                     printf@c:
  1347                           	opt stack 0
  1348                           
  1349                           ; 1 bytes @ 0x3A
  1350  00003B                     	ds	1
  1351  00003C                     ??_operation:
  1352                           
  1353                           ; 1 bytes @ 0x3B
  1354  00003C                     	ds	8
  1355  000044                     ??_main:
  1356                           
  1357                           ; 1 bytes @ 0x43
  1358  000044                     	ds	2
  1359  000046                     main@time:
  1360                           	opt stack 0
  1361                           
  1362                           ; 7 bytes @ 0x45
  1363  000046                     	ds	7
  1364  00004D                     main@i:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x4C
  1368  00004D                     	ds	1
  1369                           tblptru	equ	0xFF8
  1370                           tblptrh	equ	0xFF7
  1371                           tblptrl	equ	0xFF6
  1372                           tablat	equ	0xFF5
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           postdec1	equ	0xFE5
  1376                           fsr1l	equ	0xFE1
  1377                           
  1378 ;;
  1379 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1380 ;;
  1381 ;; *************** function _main *****************
  1382 ;; Defined at:
  1383 ;;		line 41 in file "main.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;  time            7   69[COMRAM] unsigned char [7]
  1388 ;;  i               1   76[COMRAM] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1400 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;Total ram usage:       10 bytes
  1403 ;; Hardware stack levels required when called:    6
  1404 ;; This function calls:
  1405 ;;		_I2C_Master_Init
  1406 ;;		_I2C_Master_Read
  1407 ;;		_I2C_Master_Start
  1408 ;;		_I2C_Master_Stop
  1409 ;;		_I2C_Master_Write
  1410 ;;		_initLCD
  1411 ;;		_lcdInst
  1412 ;;		_logging
  1413 ;;		_operation
  1414 ;;		_printf
  1415 ;; This function is called by:
  1416 ;;		Startup code after reset
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text0
  1421  00119A                     __ptext0:
  1422                           	opt stack 0
  1423  00119A                     _main:
  1424                           	opt stack 25
  1425                           
  1426                           ;main.c: 47: LATA = 0x00;
  1427                           
  1428                           ;incstack = 0
  1429  00119A  0E00               	movlw	0
  1430  00119C  6E89               	movwf	3977,c	;volatile
  1431                           
  1432                           ;main.c: 48: LATB = 0x00;
  1433  00119E  0E00               	movlw	0
  1434  0011A0  6E8A               	movwf	3978,c	;volatile
  1435                           
  1436                           ;main.c: 49: LATC = 0x00;
  1437  0011A2  0E00               	movlw	0
  1438  0011A4  6E8B               	movwf	3979,c	;volatile
  1439                           
  1440                           ;main.c: 50: LATD = 0x00;
  1441  0011A6  0E00               	movlw	0
  1442  0011A8  6E8C               	movwf	3980,c	;volatile
  1443                           
  1444                           ;main.c: 51: LATE = 0x00;
  1445  0011AA  0E00               	movlw	0
  1446  0011AC  6E8D               	movwf	3981,c	;volatile
  1447                           
  1448                           ;main.c: 55: TRISA = 0xFF;
  1449  0011AE  6892               	setf	3986,c	;volatile
  1450                           
  1451                           ;main.c: 56: TRISB = 0xFF;
  1452  0011B0  6893               	setf	3987,c	;volatile
  1453                           
  1454                           ;main.c: 57: TRISC = 0b10000000;
  1455  0011B2  0E80               	movlw	128
  1456  0011B4  6E94               	movwf	3988,c	;volatile
  1457                           
  1458                           ;main.c: 61: TRISD = 0x00;
  1459  0011B6  0E00               	movlw	0
  1460  0011B8  6E95               	movwf	3989,c	;volatile
  1461                           
  1462                           ;main.c: 62: TRISE = 0x00;
  1463  0011BA  0E00               	movlw	0
  1464  0011BC  6E96               	movwf	3990,c	;volatile
  1465                           
  1466                           ;main.c: 65: ADCON0 = 0x00;
  1467  0011BE  0E00               	movlw	0
  1468  0011C0  6EC2               	movwf	4034,c	;volatile
  1469                           
  1470                           ;main.c: 66: ADCON1 = 0b00001111;
  1471  0011C2  0E0F               	movlw	15
  1472  0011C4  6EC1               	movwf	4033,c	;volatile
  1473                           
  1474                           ;main.c: 68: INT1IE = 1;
  1475  0011C6  86F0               	bsf	intcon3,3,c	;volatile
  1476                           
  1477                           ;main.c: 69: (INTCONbits.GIE = 1);
  1478  0011C8  8EF2               	bsf	intcon,7,c	;volatile
  1479                           
  1480                           ;main.c: 74: initLCD();
  1481  0011CA  ECFF  F00A         	call	_initLCD	;wreg free
  1482                           
  1483                           ;main.c: 76: I2C_Master_Init(100000);
  1484  0011CE  0EA0               	movlw	160
  1485  0011D0  6E21               	movwf	I2C_Master_Init@clockFreq,c
  1486  0011D2  0E86               	movlw	134
  1487  0011D4  6E22               	movwf	I2C_Master_Init@clockFreq+1,c
  1488  0011D6  0E01               	movlw	1
  1489  0011D8  6E23               	movwf	I2C_Master_Init@clockFreq+2,c
  1490  0011DA  0E00               	movlw	0
  1491  0011DC  6E24               	movwf	I2C_Master_Init@clockFreq+3,c
  1492  0011DE  ECA8  F00A         	call	_I2C_Master_Init	;wreg free
  1493  0011E2                     
  1494                           ;main.c: 91: I2C_Master_Start();
  1495  0011E2  ECD0  F00B         	call	_I2C_Master_Start	;wreg free
  1496                           
  1497                           ;main.c: 92: I2C_Master_Write(0b11010000);
  1498  0011E6  0E00               	movlw	0
  1499  0011E8  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  1500  0011EA  0ED0               	movlw	208
  1501  0011EC  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  1502  0011EE  ECC7  F00B         	call	_I2C_Master_Write	;wreg free
  1503                           
  1504                           ;main.c: 93: I2C_Master_Write(0x00);
  1505  0011F2  0E00               	movlw	0
  1506  0011F4  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  1507  0011F6  0E00               	movlw	0
  1508  0011F8  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  1509  0011FA  ECC7  F00B         	call	_I2C_Master_Write	;wreg free
  1510                           
  1511                           ;main.c: 94: I2C_Master_Stop();
  1512  0011FE  ECCC  F00B         	call	_I2C_Master_Stop	;wreg free
  1513                           
  1514                           ;main.c: 97: I2C_Master_Start();
  1515  001202  ECD0  F00B         	call	_I2C_Master_Start	;wreg free
  1516                           
  1517                           ;main.c: 98: I2C_Master_Write(0b11010001);
  1518  001206  0E00               	movlw	0
  1519  001208  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  1520  00120A  0ED1               	movlw	209
  1521  00120C  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  1522  00120E  ECC7  F00B         	call	_I2C_Master_Write	;wreg free
  1523                           
  1524                           ;main.c: 99: for(i = 0; i < 6; i++){
  1525  001212  0E00               	movlw	0
  1526  001214  6E4D               	movwf	main@i,c
  1527  001216                     l4190:
  1528  001216  0E05               	movlw	5
  1529  001218  644D               	cpfsgt	main@i,c
  1530  00121A  D001               	goto	l153
  1531  00121C  D00E               	goto	u3960
  1532  00121E                     l153:
  1533                           
  1534                           ;main.c: 100: time[i] = I2C_Master_Read(0);
  1535  00121E  504D               	movf	main@i,w,c
  1536  001220  0D01               	mullw	1
  1537  001222  0E46               	movlw	low main@time
  1538  001224  24F3               	addwf	prodl,w,c
  1539  001226  6ED9               	movwf	fsr2l,c
  1540  001228  0E00               	movlw	high main@time
  1541  00122A  20F4               	addwfc	prodh,w,c
  1542  00122C  6EDA               	movwf	fsr2h,c
  1543  00122E  0E00               	movlw	0
  1544  001230  EC7B  F00B         	call	_I2C_Master_Read
  1545  001234  6EDF               	movwf	indf2,c
  1546  001236  2A4D               	incf	main@i,f,c
  1547  001238  D7EE               	goto	l4190
  1548  00123A                     u3960:
  1549                           
  1550                           ;main.c: 101: }
  1551                           ;main.c: 102: time[6] = I2C_Master_Read(1);
  1552  00123A  0E01               	movlw	1
  1553  00123C  EC7B  F00B         	call	_I2C_Master_Read
  1554  001240  6E4C               	movwf	main@time+6,c
  1555                           
  1556                           ;main.c: 103: I2C_Master_Stop();
  1557  001242  ECCC  F00B         	call	_I2C_Master_Stop	;wreg free
  1558                           
  1559                           ;main.c: 105: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1560  001246  0E0C               	movlw	12
  1561  001248  ECB4  F00B         	call	_lcdInst
  1562                           
  1563                           ;main.c: 107: if (begin_operation || begin_logging) {
  1564  00124C  0100               	movlb	0	; () banked
  1565  00124E  51C5               	movf	_begin_operation& (0+255),w,b
  1566  001250  11C6               	iorwf	(_begin_operation+1)& (0+255),w,b
  1567  001252  A4D8               	btfss	status,2,c
  1568  001254  D045               	goto	l158
  1569                           
  1570                           ; BSR set to: 0
  1571  001256  51C3               	movf	_begin_logging& (0+255),w,b
  1572  001258  11C4               	iorwf	(_begin_logging+1)& (0+255),w,b
  1573  00125A  A4D8               	btfss	status,2,c
  1574  00125C  D041               	goto	l158
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 109: }
  1578                           ;main.c: 112: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1579                           
  1580                           ; BSR set to: 0
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 108: break;
  1584  00125E  0E80               	movlw	128
  1585  001260  ECB4  F00B         	call	_lcdInst
  1586  001264  0E41               	movlw	65
  1587  001266  6E44               	movwf	??_main& (0+255),c
  1588  001268  0EEE               	movlw	238
  1589  00126A                     u4037:
  1590  00126A  2EE8               	decfsz	wreg,f,c
  1591  00126C  D7FE               	bra	u4037
  1592  00126E  2E44               	decfsz	??_main& (0+255),f,c
  1593  001270  D7FC               	bra	u4037
  1594  001272  D000               	nop2	
  1595                           
  1596                           ;main.c: 113: printf("%02x/%02x/%02x    %02x:%02x:%02x", time[5],time[4],time[6],time[2]
      +                          ,time[1],time[0]);
  1597  001274  0E33               	movlw	low STR_1
  1598  001276  6E20               	movwf	printf@f,c
  1599  001278  0EFD               	movlw	high STR_1
  1600  00127A  6E21               	movwf	printf@f+1,c
  1601  00127C  C04B  F022         	movff	main@time+5,?_printf+2
  1602  001280  6A23               	clrf	?_printf+3,c
  1603  001282  C04A  F024         	movff	main@time+4,?_printf+4
  1604  001286  6A25               	clrf	?_printf+5,c
  1605  001288  C04C  F026         	movff	main@time+6,?_printf+6
  1606  00128C  6A27               	clrf	?_printf+7,c
  1607  00128E  C048  F028         	movff	main@time+2,?_printf+8
  1608  001292  6A29               	clrf	?_printf+9,c
  1609  001294  C047  F02A         	movff	main@time+1,?_printf+10
  1610  001298  6A2B               	clrf	?_printf+11,c
  1611  00129A  C046  F02C         	movff	main@time,?_printf+12
  1612  00129E  6A2D               	clrf	?_printf+13,c
  1613  0012A0  EC47  F007         	call	_printf	;wreg free
  1614                           
  1615                           ;main.c: 114: lcdInst(0x94);;
  1616  0012A4  0E94               	movlw	148
  1617  0012A6  ECB4  F00B         	call	_lcdInst
  1618                           
  1619                           ;main.c: 115: printf("     * to BEGIN     ");
  1620  0012AA  0EAA               	movlw	low STR_2
  1621  0012AC  6E20               	movwf	printf@f,c
  1622  0012AE  0EFD               	movlw	high STR_2
  1623  0012B0  6E21               	movwf	printf@f+1,c
  1624  0012B2  EC47  F007         	call	_printf	;wreg free
  1625                           
  1626                           ;main.c: 116: lcdInst(0xD4);;
  1627  0012B6  0ED4               	movlw	212
  1628  0012B8  ECB4  F00B         	call	_lcdInst
  1629                           
  1630                           ;main.c: 117: printf("    # for LOGGING   ");
  1631  0012BC  0EE9               	movlw	low STR_3
  1632  0012BE  6E20               	movwf	printf@f,c
  1633  0012C0  0EFD               	movlw	high STR_3
  1634  0012C2  6E21               	movwf	printf@f+1,c
  1635  0012C4  EC47  F007         	call	_printf	;wreg free
  1636                           
  1637                           ;main.c: 118: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1638  0012C8  0E33               	movlw	51
  1639  0012CA  6E45               	movwf	(??_main+1)& (0+255),c
  1640  0012CC  0EBB               	movlw	187
  1641  0012CE  6E44               	movwf	??_main& (0+255),c
  1642  0012D0  0EE0               	movlw	224
  1643  0012D2                     u4047:
  1644  0012D2  2EE8               	decfsz	wreg,f,c
  1645  0012D4  D7FE               	bra	u4047
  1646  0012D6  2E44               	decfsz	??_main& (0+255),f,c
  1647  0012D8  D7FC               	bra	u4047
  1648  0012DA  2E45               	decfsz	(??_main+1)& (0+255),f,c
  1649  0012DC  D7FA               	bra	u4047
  1650  0012DE  D781               	goto	l152
  1651  0012E0                     l158:
  1652                           
  1653                           ;main.c: 119: }
  1654                           ;main.c: 121: if (begin_operation) {
  1655  0012E0  0100               	movlb	0	; () banked
  1656  0012E2  51C5               	movf	_begin_operation& (0+255),w,b
  1657  0012E4  11C6               	iorwf	(_begin_operation+1)& (0+255),w,b
  1658  0012E6  B4D8               	btfsc	status,2,c
  1659  0012E8  D008               	goto	l160
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;main.c: 122: begin_operation = 0;
  1663  0012EA  0E00               	movlw	0
  1664  0012EC  6FC6               	movwf	(_begin_operation+1)& (0+255),b
  1665  0012EE  0E00               	movlw	0
  1666  0012F0  6FC5               	movwf	_begin_operation& (0+255),b
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;main.c: 123: operation();
  1670  0012F2  EC09  F000         	call	_operation	;wreg free
  1671                           
  1672                           ;main.c: 124: }
  1673  0012F6  EF07  F000         	goto	start
  1674  0012FA                     l160:
  1675                           
  1676                           ;main.c: 125: else if (begin_logging) {
  1677  0012FA  0100               	movlb	0	; () banked
  1678  0012FC  51C3               	movf	_begin_logging& (0+255),w,b
  1679  0012FE  11C4               	iorwf	(_begin_logging+1)& (0+255),w,b
  1680  001300  B4D8               	btfsc	status,2,c
  1681  001302  EF07  F000         	goto	start
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;main.c: 126: begin_logging = 0;
  1685  001306  0E00               	movlw	0
  1686  001308  6FC4               	movwf	(_begin_logging+1)& (0+255),b
  1687  00130A  0E00               	movlw	0
  1688  00130C  6FC3               	movwf	_begin_logging& (0+255),b
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;main.c: 127: logging();
  1692  00130E  ECD7  F00B         	call	_logging	;wreg free
  1693  001312  EF07  F000         	goto	start
  1694  001316                     __end_of_main:
  1695                           	opt stack 0
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           prodh	equ	0xFF4
  1701                           prodl	equ	0xFF3
  1702                           intcon	equ	0xFF2
  1703                           intcon3	equ	0xFF0
  1704                           postinc0	equ	0xFEE
  1705                           wreg	equ	0xFE8
  1706                           postdec1	equ	0xFE5
  1707                           fsr1l	equ	0xFE1
  1708                           indf2	equ	0xFDF
  1709                           fsr2h	equ	0xFDA
  1710                           fsr2l	equ	0xFD9
  1711                           status	equ	0xFD8
  1712                           
  1713 ;; *************** function _operation *****************
  1714 ;; Defined at:
  1715 ;;		line 131 in file "main.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;		None
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  keypress        1   29[BANK0 ] unsigned char 
  1720 ;;  keypress        1   27[BANK0 ] unsigned char 
  1721 ;;  keypress        1   26[BANK0 ] unsigned char 
  1722 ;;  keypress        1   19[BANK0 ] unsigned char 
  1723 ;;  keypress        1   18[BANK0 ] unsigned char 
  1724 ;;  keypress        1   17[BANK0 ] unsigned char 
  1725 ;;  keypress        1   16[BANK0 ] unsigned char 
  1726 ;;  keypress        1   15[BANK0 ] unsigned char 
  1727 ;;  keypress        1    0[BANK0 ] unsigned char 
  1728 ;;  keypress        1   28[BANK0 ] unsigned char 
  1729 ;;  keypress        1   30[BANK0 ] unsigned char 
  1730 ;;  end_time        7    8[BANK0 ] unsigned char [7]
  1731 ;;  start_time      7    1[BANK0 ] unsigned char [7]
  1732 ;;  prescription    6   31[BANK0 ] int [3]
  1733 ;;  fill_increme    2   24[BANK0 ] int 
  1734 ;;  fill_start      2   21[BANK0 ] int 
  1735 ;;  i               1   38[BANK0 ] unsigned char 
  1736 ;;  repetition      1   37[BANK0 ] enum E3004
  1737 ;;  frequency       1   23[BANK0 ] enum E3010
  1738 ;;  dir             1   20[BANK0 ] enum E3015
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  1    wreg      void 
  1741 ;; Registers used:
  1742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;      Locals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1751 ;;      Totals:         8      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1752 ;;Total ram usage:       47 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; Hardware stack levels required when called:    5
  1755 ;; This function calls:
  1756 ;;		_I2C_Master_Read
  1757 ;;		_I2C_Master_Start
  1758 ;;		_I2C_Master_Stop
  1759 ;;		_I2C_Master_Write
  1760 ;;		___wmul
  1761 ;;		_lcdInst
  1762 ;;		_lcd_set_cursor
  1763 ;;		_printf
  1764 ;;		_putch
  1765 ;; This function is called by:
  1766 ;;		_main
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text1
  1771  000012                     __ptext1:
  1772                           	opt stack 0
  1773  000012                     _operation:
  1774                           	opt stack 25
  1775                           
  1776                           ;main.c: 133: (INTCONbits.GIE = 0);
  1777                           
  1778                           ;incstack = 0
  1779  000012  9EF2               	bcf	intcon,7,c	;volatile
  1780                           
  1781                           ;main.c: 135: int prescription[3] = {-1, -1, -1};
  1782  000014  EE20  F04E         	lfsr	2,operation@F3027
  1783  000018  EE10  F09F         	lfsr	1,operation@prescription
  1784  00001C  0E05               	movlw	5
  1785  00001E                     u3131:
  1786  00001E  CFDB FFE3          	movff	plusw2,plusw1
  1787  000022  06E8               	decf	wreg,f,c
  1788  000024  E2FC               	bc	u3131
  1789                           
  1790                           ;main.c: 136: enum rep repetition = na_rep;
  1791  000026  0E04               	movlw	4
  1792  000028  0100               	movlb	0	; () banked
  1793  00002A  6FA5               	movwf	operation@repetition& (0+255),b
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;main.c: 137: enum freq frequency = na_freq;
  1797  00002C  0E03               	movlw	3
  1798  00002E  6F97               	movwf	operation@frequency& (0+255),b
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;main.c: 138: enum orientation dir = na;
  1802  000030  0E02               	movlw	2
  1803  000032  6F94               	movwf	operation@dir& (0+255),b
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;main.c: 140: unsigned char start_time[7];
  1807                           ;main.c: 141: unsigned char end_time[7];
  1808                           ;main.c: 143: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1809  000034  0E01               	movlw	1
  1810  000036  ECB4  F00B         	call	_lcdInst
  1811  00003A  0EC3               	movlw	195
  1812  00003C  6E3C               	movwf	??_operation& (0+255),c
  1813  00003E  0ECD               	movlw	205
  1814  000040                     u4057:
  1815  000040  2EE8               	decfsz	wreg,f,c
  1816  000042  D7FE               	bra	u4057
  1817  000044  2E3C               	decfsz	??_operation& (0+255),f,c
  1818  000046  D7FC               	bra	u4057
  1819  000048  F000               	nop	
  1820                           
  1821                           ;main.c: 144: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1822  00004A  0E80               	movlw	128
  1823  00004C  ECB4  F00B         	call	_lcdInst
  1824  000050  0E41               	movlw	65
  1825  000052  6E3C               	movwf	??_operation& (0+255),c
  1826  000054  0EEE               	movlw	238
  1827  000056                     u4067:
  1828  000056  2EE8               	decfsz	wreg,f,c
  1829  000058  D7FE               	bra	u4067
  1830  00005A  2E3C               	decfsz	??_operation& (0+255),f,c
  1831  00005C  D7FC               	bra	u4067
  1832  00005E  D000               	nop2	
  1833                           
  1834                           ;main.c: 145: printf("   After entering   ");
  1835  000060  0EFE               	movlw	low STR_4
  1836  000062  6E20               	movwf	printf@f,c
  1837  000064  0EFD               	movlw	high STR_4
  1838  000066  6E21               	movwf	printf@f+1,c
  1839  000068  EC47  F007         	call	_printf	;wreg free
  1840                           
  1841                           ;main.c: 146: lcdInst(0xC0);;
  1842  00006C  0EC0               	movlw	192
  1843  00006E  ECB4  F00B         	call	_lcdInst
  1844                           
  1845                           ;main.c: 147: printf("  selection, press  ");
  1846  000072  0E28               	movlw	low STR_5
  1847  000074  6E20               	movwf	printf@f,c
  1848  000076  0EFE               	movlw	high STR_5
  1849  000078  6E21               	movwf	printf@f+1,c
  1850  00007A  EC47  F007         	call	_printf	;wreg free
  1851                           
  1852                           ;main.c: 148: lcdInst(0x94);;
  1853  00007E  0E94               	movlw	148
  1854  000080  ECB4  F00B         	call	_lcdInst
  1855                           
  1856                           ;main.c: 149: printf("    # to confirm    ");
  1857  000084  0ED4               	movlw	low STR_6
  1858  000086  6E20               	movwf	printf@f,c
  1859  000088  0EFD               	movlw	high STR_6
  1860  00008A  6E21               	movwf	printf@f+1,c
  1861  00008C  EC47  F007         	call	_printf	;wreg free
  1862                           
  1863                           ;main.c: 150: _delay((unsigned long)((1800)*(40000000/4000.0)));
  1864  000090  0E5C               	movlw	92
  1865  000092  6E3D               	movwf	(??_operation+1)& (0+255),c
  1866  000094  0E51               	movlw	81
  1867  000096  6E3C               	movwf	??_operation& (0+255),c
  1868  000098  0E60               	movlw	96
  1869  00009A                     u4077:
  1870  00009A  2EE8               	decfsz	wreg,f,c
  1871  00009C  D7FE               	bra	u4077
  1872  00009E  2E3C               	decfsz	??_operation& (0+255),f,c
  1873  0000A0  D7FC               	bra	u4077
  1874  0000A2  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  1875  0000A4  D7FA               	bra	u4077
  1876  0000A6  D000               	nop2	
  1877  0000A8                     
  1878                           ;main.c: 154: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1879  0000A8  0E01               	movlw	1
  1880  0000AA  ECB4  F00B         	call	_lcdInst
  1881  0000AE  0EC3               	movlw	195
  1882  0000B0  6E3C               	movwf	??_operation& (0+255),c
  1883  0000B2  0ECD               	movlw	205
  1884  0000B4                     u4087:
  1885  0000B4  2EE8               	decfsz	wreg,f,c
  1886  0000B6  D7FE               	bra	u4087
  1887  0000B8  2E3C               	decfsz	??_operation& (0+255),f,c
  1888  0000BA  D7FC               	bra	u4087
  1889  0000BC  F000               	nop	
  1890                           
  1891                           ;main.c: 155: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1892  0000BE  0E80               	movlw	128
  1893  0000C0  ECB4  F00B         	call	_lcdInst
  1894  0000C4  0E41               	movlw	65
  1895  0000C6  6E3C               	movwf	??_operation& (0+255),c
  1896  0000C8  0EEE               	movlw	238
  1897  0000CA                     u4097:
  1898  0000CA  2EE8               	decfsz	wreg,f,c
  1899  0000CC  D7FE               	bra	u4097
  1900  0000CE  2E3C               	decfsz	??_operation& (0+255),f,c
  1901  0000D0  D7FC               	bra	u4097
  1902  0000D2  D000               	nop2	
  1903                           
  1904                           ;main.c: 156: printf("Number of pills:");
  1905  0000D4  0E21               	movlw	low STR_7
  1906  0000D6  6E20               	movwf	printf@f,c
  1907  0000D8  0EFF               	movlw	high STR_7
  1908  0000DA  6E21               	movwf	printf@f+1,c
  1909  0000DC  EC47  F007         	call	_printf	;wreg free
  1910                           
  1911                           ;main.c: 157: lcdInst(0xC0);;
  1912  0000E0  0EC0               	movlw	192
  1913  0000E2  ECB4  F00B         	call	_lcdInst
  1914                           
  1915                           ;main.c: 158: printf("   R: _");
  1916  0000E6  0EEF               	movlw	low STR_8
  1917  0000E8  6E20               	movwf	printf@f,c
  1918  0000EA  0EFF               	movlw	high STR_8
  1919  0000EC  6E21               	movwf	printf@f+1,c
  1920  0000EE  EC47  F007         	call	_printf	;wreg free
  1921                           
  1922                           ;main.c: 159: lcdInst(0x94);;
  1923  0000F2  0E94               	movlw	148
  1924  0000F4  ECB4  F00B         	call	_lcdInst
  1925                           
  1926                           ;main.c: 160: printf("   F: _");
  1927  0000F8  0EDF               	movlw	low STR_9
  1928  0000FA  6E20               	movwf	printf@f,c
  1929  0000FC  0EFF               	movlw	high STR_9
  1930  0000FE  6E21               	movwf	printf@f+1,c
  1931  000100  EC47  F007         	call	_printf	;wreg free
  1932                           
  1933                           ;main.c: 161: lcdInst(0xD4);;
  1934  000104  0ED4               	movlw	212
  1935  000106  ECB4  F00B         	call	_lcdInst
  1936                           
  1937                           ;main.c: 162: printf("   L: _");
  1938  00010A  0EE7               	movlw	low STR_10
  1939  00010C  6E20               	movwf	printf@f,c
  1940  00010E  0EFF               	movlw	high STR_10
  1941  000110  6E21               	movwf	printf@f+1,c
  1942  000112  EC47  F007         	call	_printf	;wreg free
  1943                           
  1944                           ;main.c: 163: lcd_set_cursor(6, 1);
  1945  000116  0E01               	movlw	1
  1946  000118  6E1A               	movwf	lcd_set_cursor@y,c
  1947  00011A  0E06               	movlw	6
  1948  00011C  EC70  F00A         	call	_lcd_set_cursor
  1949                           
  1950                           ;main.c: 164: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1951  000120  0E0F               	movlw	15
  1952  000122  ECB4  F00B         	call	_lcdInst
  1953                           
  1954                           ;main.c: 166: prescription[0] = -1;
  1955  000126  0100               	movlb	0	; () banked
  1956  000128  699F               	setf	operation@prescription& (0+255),b
  1957  00012A  69A0               	setf	(operation@prescription+1)& (0+255),b
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;main.c: 167: prescription[1] = -1;
  1961  00012C  69A1               	setf	(operation@prescription+2)& (0+255),b
  1962  00012E  69A2               	setf	(operation@prescription+3)& (0+255),b
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;main.c: 168: prescription[2] = -1;
  1966  000130  69A3               	setf	(operation@prescription+4)& (0+255),b
  1967  000132  69A4               	setf	(operation@prescription+5)& (0+255),b
  1968  000134                     
  1969                           ; BSR set to: 0
  1970                           ;main.c: 172: continue;
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;main.c: 171: while (PORTBbits.RB1 == 0) {
  1974  000134  A281               	btfss	3969,1,c	;volatile
  1975  000136  D7FE               	goto	l169
  1976                           
  1977                           ;main.c: 173: }
  1978                           ;main.c: 175: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1979  000138  3881               	swapf	3969,w,c	;volatile
  1980  00013A  0B0F               	andlw	15
  1981  00013C  0B0F               	andlw	15
  1982  00013E  0100               	movlb	0	; () banked
  1983  000140  6F9A               	movwf	operation@keypress& (0+255),b
  1984  000142                     
  1985                           ; BSR set to: 0
  1986                           ;main.c: 178: continue;
  1987  000142  B281               	btfsc	3969,1,c	;volatile
  1988  000144  D7FE               	goto	l174
  1989                           
  1990                           ;main.c: 179: }
  1991                           ;main.c: 181: __nop();
  1992  000146  F000               	nop	
  1993                           
  1994                           ;main.c: 183: if (keypress == 0 || keypress == 1 || keypress == 13) {
  1995  000148  0100               	movlb	0	; () banked
  1996  00014A  519A               	movf	operation@keypress& (0+255),w,b
  1997  00014C  B4D8               	btfsc	status,2,c
  1998  00014E  D007               	goto	u3180
  1999                           
  2000                           ; BSR set to: 0
  2001  000150  059A               	decf	operation@keypress& (0+255),w,b
  2002  000152  B4D8               	btfsc	status,2,c
  2003  000154  D004               	goto	u3180
  2004                           
  2005                           ; BSR set to: 0
  2006  000156  0E0D               	movlw	13
  2007  000158  199A               	xorwf	operation@keypress& (0+255),w,b
  2008  00015A  A4D8               	btfss	status,2,c
  2009  00015C  D02D               	goto	l176
  2010  00015E                     u3180:
  2011                           
  2012                           ; BSR set to: 0
  2013                           ;main.c: 184: lcd_set_cursor(6, 1);
  2014                           
  2015                           ; BSR set to: 0
  2016  00015E  0E01               	movlw	1
  2017  000160  6E1A               	movwf	lcd_set_cursor@y,c
  2018  000162  0E06               	movlw	6
  2019  000164  EC70  F00A         	call	_lcd_set_cursor
  2020                           
  2021                           ;main.c: 185: putch(keys[keypress]);
  2022  000168  0100               	movlb	0	; () banked
  2023  00016A  519A               	movf	operation@keypress& (0+255),w,b
  2024  00016C  0D01               	mullw	1
  2025  00016E  0E03               	movlw	low _keys
  2026  000170  24F3               	addwf	prodl,w,c
  2027  000172  6EF6               	movwf	tblptrl,c
  2028  000174  0EFD               	movlw	high _keys
  2029  000176  20F4               	addwfc	prodh,w,c
  2030  000178  6EF7               	movwf	tblptrh,c
  2031  00017A                     	if	0	;There are less than 3 active tblptr bytes
  2032  00017A                     	endif
  2033  00017A  0008               	tblrd		*
  2034  00017C  50F5               	movf	tablat,w,c
  2035  00017E  ECAA  F00B         	call	_putch
  2036                           
  2037                           ;main.c: 187: switch (keypress) {
  2038  000182  D00E               	goto	l179
  2039  000184                     
  2040                           ;main.c: 189: prescription[0] = 1;
  2041  000184  0E00               	movlw	0
  2042  000186  0100               	movlb	0	; () banked
  2043  000188  6FA0               	movwf	(operation@prescription+1)& (0+255),b
  2044  00018A  0E01               	movlw	1
  2045  00018C  D007               	goto	L7
  2046  00018E                     
  2047                           ; BSR set to: 0
  2048                           ;main.c: 192: prescription[0] = 2;
  2049                           
  2050                           ; BSR set to: 0
  2051  00018E  0E00               	movlw	0
  2052  000190  6FA0               	movwf	(operation@prescription+1)& (0+255),b
  2053  000192  0E02               	movlw	2
  2054  000194  D003               	goto	L7
  2055  000196                     
  2056                           ; BSR set to: 0
  2057                           ;main.c: 195: prescription[0] = 0;
  2058                           
  2059                           ; BSR set to: 0
  2060  000196  0E00               	movlw	0
  2061  000198  6FA0               	movwf	(operation@prescription+1)& (0+255),b
  2062  00019A  0E00               	movlw	0
  2063  00019C                     L7:
  2064  00019C  6F9F               	movwf	operation@prescription& (0+255),b
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;main.c: 197: }
  2068                           
  2069                           ;main.c: 196: break;
  2070  00019E  D7CA               	goto	l169
  2071  0001A0                     l179:
  2072                           
  2073                           ; BSR set to: 0
  2074  0001A0  0100               	movlb	0	; () banked
  2075  0001A2  519A               	movf	operation@keypress& (0+255),w,b
  2076                           
  2077                           ; Switch size 1, requested type "space"
  2078                           ; Number of cases is 3, Range of values is 0 to 13
  2079                           ; switch strategies available:
  2080                           ; Name         Instructions Cycles
  2081                           ; simple_byte           10     6 (average)
  2082                           ;	Chosen strategy is simple_byte
  2083  0001A4  0A00               	xorlw	0	; case 0
  2084  0001A6  B4D8               	btfsc	status,2,c
  2085  0001A8  D7ED               	goto	l180
  2086  0001AA  0A01               	xorlw	1	; case 1
  2087  0001AC  B4D8               	btfsc	status,2,c
  2088  0001AE  D7EF               	goto	l182
  2089  0001B0  0A0C               	xorlw	12	; case 13
  2090  0001B2  B4D8               	btfsc	status,2,c
  2091  0001B4  D7F0               	goto	l183
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;main.c: 198: }
  2095  0001B6  D7BE               	goto	l169
  2096  0001B8                     l176:
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;main.c: 199: else if (keypress == 14) {
  2100                           
  2101                           ; BSR set to: 0
  2102  0001B8  0E0E               	movlw	14
  2103  0001BA  199A               	xorwf	operation@keypress& (0+255),w,b
  2104  0001BC  A4D8               	btfss	status,2,c
  2105  0001BE  D7BA               	goto	l169
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;main.c: 200: if (prescription[0] != -1) {
  2109  0001C0  299F               	incf	operation@prescription& (0+255),w,b
  2110  0001C2  E103               	bnz	u3200
  2111  0001C4  29A0               	incf	(operation@prescription+1)& (0+255),w,b
  2112  0001C6  B4D8               	btfsc	status,2,c
  2113  0001C8  D7B5               	goto	l169
  2114  0001CA                     u3200:
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;main.c: 201: lcd_set_cursor(6, 2);
  2118  0001CA  0E02               	movlw	2
  2119  0001CC  6E1A               	movwf	lcd_set_cursor@y,c
  2120  0001CE  0E06               	movlw	6
  2121  0001D0  EC70  F00A         	call	_lcd_set_cursor
  2122  0001D4                     
  2123                           ;main.c: 209: continue;
  2124                           
  2125                           ;main.c: 208: while (PORTBbits.RB1 == 0) {
  2126                           
  2127                           ;main.c: 203: }
  2128                           ;main.c: 204: }
  2129                           ;main.c: 205: }
  2130                           ;main.c: 207: while (1) {
  2131  0001D4  A281               	btfss	3969,1,c	;volatile
  2132  0001D6  D7FE               	goto	l187
  2133                           
  2134                           ;main.c: 210: }
  2135                           ;main.c: 212: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2136  0001D8  3881               	swapf	3969,w,c	;volatile
  2137  0001DA  0B0F               	andlw	15
  2138  0001DC  0B0F               	andlw	15
  2139  0001DE  0100               	movlb	0	; () banked
  2140  0001E0  6F9B               	movwf	operation@keypress_392& (0+255),b
  2141  0001E2                     
  2142                           ; BSR set to: 0
  2143                           ;main.c: 215: continue;
  2144  0001E2  B281               	btfsc	3969,1,c	;volatile
  2145  0001E4  D7FE               	goto	l194
  2146                           
  2147                           ;main.c: 216: }
  2148                           ;main.c: 218: __nop();
  2149  0001E6  F000               	nop	
  2150                           
  2151                           ;main.c: 220: if (keypress == 0 || keypress == 1 || keypress == 13) {
  2152  0001E8  0100               	movlb	0	; () banked
  2153  0001EA  519B               	movf	operation@keypress_392& (0+255),w,b
  2154  0001EC  B4D8               	btfsc	status,2,c
  2155  0001EE  D007               	goto	u3250
  2156                           
  2157                           ; BSR set to: 0
  2158  0001F0  059B               	decf	operation@keypress_392& (0+255),w,b
  2159  0001F2  B4D8               	btfsc	status,2,c
  2160  0001F4  D004               	goto	u3250
  2161                           
  2162                           ; BSR set to: 0
  2163  0001F6  0E0D               	movlw	13
  2164  0001F8  199B               	xorwf	operation@keypress_392& (0+255),w,b
  2165  0001FA  A4D8               	btfss	status,2,c
  2166  0001FC  D02D               	goto	l196
  2167  0001FE                     u3250:
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;main.c: 221: lcd_set_cursor(6, 2);
  2171                           
  2172                           ; BSR set to: 0
  2173  0001FE  0E02               	movlw	2
  2174  000200  6E1A               	movwf	lcd_set_cursor@y,c
  2175  000202  0E06               	movlw	6
  2176  000204  EC70  F00A         	call	_lcd_set_cursor
  2177                           
  2178                           ;main.c: 222: putch(keys[keypress]);
  2179  000208  0100               	movlb	0	; () banked
  2180  00020A  519B               	movf	operation@keypress_392& (0+255),w,b
  2181  00020C  0D01               	mullw	1
  2182  00020E  0E03               	movlw	low _keys
  2183  000210  24F3               	addwf	prodl,w,c
  2184  000212  6EF6               	movwf	tblptrl,c
  2185  000214  0EFD               	movlw	high _keys
  2186  000216  20F4               	addwfc	prodh,w,c
  2187  000218  6EF7               	movwf	tblptrh,c
  2188  00021A                     	if	0	;There are less than 3 active tblptr bytes
  2189  00021A                     	endif
  2190  00021A  0008               	tblrd		*
  2191  00021C  50F5               	movf	tablat,w,c
  2192  00021E  ECAA  F00B         	call	_putch
  2193                           
  2194                           ;main.c: 224: switch (keypress) {
  2195  000222  D00E               	goto	l199
  2196  000224                     
  2197                           ;main.c: 226: prescription[1] = 1;
  2198  000224  0E00               	movlw	0
  2199  000226  0100               	movlb	0	; () banked
  2200  000228  6FA2               	movwf	(operation@prescription+3)& (0+255),b
  2201  00022A  0E01               	movlw	1
  2202  00022C  D007               	goto	L9
  2203  00022E                     
  2204                           ; BSR set to: 0
  2205                           ;main.c: 229: prescription[1] = 2;
  2206                           
  2207                           ; BSR set to: 0
  2208  00022E  0E00               	movlw	0
  2209  000230  6FA2               	movwf	(operation@prescription+3)& (0+255),b
  2210  000232  0E02               	movlw	2
  2211  000234  D003               	goto	L9
  2212  000236                     
  2213                           ; BSR set to: 0
  2214                           ;main.c: 232: prescription[1] = 0;
  2215                           
  2216                           ; BSR set to: 0
  2217  000236  0E00               	movlw	0
  2218  000238  6FA2               	movwf	(operation@prescription+3)& (0+255),b
  2219  00023A  0E00               	movlw	0
  2220  00023C                     L9:
  2221  00023C  6FA1               	movwf	(operation@prescription+2)& (0+255),b
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;main.c: 234: }
  2225                           
  2226                           ;main.c: 233: break;
  2227  00023E  D7CA               	goto	l187
  2228  000240                     l199:
  2229                           
  2230                           ; BSR set to: 0
  2231  000240  0100               	movlb	0	; () banked
  2232  000242  519B               	movf	operation@keypress_392& (0+255),w,b
  2233                           
  2234                           ; Switch size 1, requested type "space"
  2235                           ; Number of cases is 3, Range of values is 0 to 13
  2236                           ; switch strategies available:
  2237                           ; Name         Instructions Cycles
  2238                           ; simple_byte           10     6 (average)
  2239                           ;	Chosen strategy is simple_byte
  2240  000244  0A00               	xorlw	0	; case 0
  2241  000246  B4D8               	btfsc	status,2,c
  2242  000248  D7ED               	goto	l200
  2243  00024A  0A01               	xorlw	1	; case 1
  2244  00024C  B4D8               	btfsc	status,2,c
  2245  00024E  D7EF               	goto	l202
  2246  000250  0A0C               	xorlw	12	; case 13
  2247  000252  B4D8               	btfsc	status,2,c
  2248  000254  D7F0               	goto	l203
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;main.c: 235: }
  2252  000256  D7BE               	goto	l187
  2253  000258                     l196:
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;main.c: 236: else if (keypress == 14) {
  2257                           
  2258                           ; BSR set to: 0
  2259  000258  0E0E               	movlw	14
  2260  00025A  199B               	xorwf	operation@keypress_392& (0+255),w,b
  2261  00025C  A4D8               	btfss	status,2,c
  2262  00025E  D7BA               	goto	l187
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;main.c: 237: if (prescription[1] != -1) {
  2266  000260  29A1               	incf	(operation@prescription+2)& (0+255),w,b
  2267  000262  E103               	bnz	u3270
  2268  000264  29A2               	incf	(operation@prescription+3)& (0+255),w,b
  2269  000266  B4D8               	btfsc	status,2,c
  2270  000268  D7B5               	goto	l187
  2271  00026A                     u3270:
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;main.c: 238: lcd_set_cursor(6, 3);
  2275  00026A  0E03               	movlw	3
  2276  00026C  6E1A               	movwf	lcd_set_cursor@y,c
  2277  00026E  0E06               	movlw	6
  2278  000270  EC70  F00A         	call	_lcd_set_cursor
  2279  000274                     
  2280                           ;main.c: 246: continue;
  2281                           
  2282                           ;main.c: 245: while (PORTBbits.RB1 == 0) {
  2283                           
  2284                           ;main.c: 240: }
  2285                           ;main.c: 241: }
  2286                           ;main.c: 242: }
  2287                           ;main.c: 244: while (1) {
  2288  000274  A281               	btfss	3969,1,c	;volatile
  2289  000276  D7FE               	goto	l207
  2290                           
  2291                           ;main.c: 247: }
  2292                           ;main.c: 249: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2293  000278  3881               	swapf	3969,w,c	;volatile
  2294  00027A  0B0F               	andlw	15
  2295  00027C  0B0F               	andlw	15
  2296  00027E  0100               	movlb	0	; () banked
  2297  000280  6F9D               	movwf	operation@keypress_393& (0+255),b
  2298  000282                     
  2299                           ; BSR set to: 0
  2300                           ;main.c: 252: continue;
  2301  000282  B281               	btfsc	3969,1,c	;volatile
  2302  000284  D7FE               	goto	l214
  2303                           
  2304                           ;main.c: 253: }
  2305                           ;main.c: 255: __nop();
  2306  000286  F000               	nop	
  2307                           
  2308                           ;main.c: 257: if (keypress == 0 || keypress == 1 || keypress == 2 || keypress == 13) {
  2309  000288  0100               	movlb	0	; () banked
  2310  00028A  519D               	movf	operation@keypress_393& (0+255),w,b
  2311  00028C  B4D8               	btfsc	status,2,c
  2312  00028E  D00B               	goto	u3330
  2313                           
  2314                           ; BSR set to: 0
  2315  000290  059D               	decf	operation@keypress_393& (0+255),w,b
  2316  000292  B4D8               	btfsc	status,2,c
  2317  000294  D008               	goto	u3330
  2318                           
  2319                           ; BSR set to: 0
  2320  000296  0E02               	movlw	2
  2321  000298  199D               	xorwf	operation@keypress_393& (0+255),w,b
  2322  00029A  B4D8               	btfsc	status,2,c
  2323  00029C  D004               	goto	u3330
  2324                           
  2325                           ; BSR set to: 0
  2326  00029E  0E0D               	movlw	13
  2327  0002A0  199D               	xorwf	operation@keypress_393& (0+255),w,b
  2328  0002A2  A4D8               	btfss	status,2,c
  2329  0002A4  D034               	goto	l216
  2330  0002A6                     u3330:
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;main.c: 258: lcd_set_cursor(6, 3);
  2334                           
  2335                           ; BSR set to: 0
  2336  0002A6  0E03               	movlw	3
  2337  0002A8  6E1A               	movwf	lcd_set_cursor@y,c
  2338  0002AA  0E06               	movlw	6
  2339  0002AC  EC70  F00A         	call	_lcd_set_cursor
  2340                           
  2341                           ;main.c: 259: putch(keys[keypress]);
  2342  0002B0  0100               	movlb	0	; () banked
  2343  0002B2  519D               	movf	operation@keypress_393& (0+255),w,b
  2344  0002B4  0D01               	mullw	1
  2345  0002B6  0E03               	movlw	low _keys
  2346  0002B8  24F3               	addwf	prodl,w,c
  2347  0002BA  6EF6               	movwf	tblptrl,c
  2348  0002BC  0EFD               	movlw	high _keys
  2349  0002BE  20F4               	addwfc	prodh,w,c
  2350  0002C0  6EF7               	movwf	tblptrh,c
  2351  0002C2                     	if	0	;There are less than 3 active tblptr bytes
  2352  0002C2                     	endif
  2353  0002C2  0008               	tblrd		*
  2354  0002C4  50F5               	movf	tablat,w,c
  2355  0002C6  ECAA  F00B         	call	_putch
  2356                           
  2357                           ;main.c: 261: switch (keypress) {
  2358  0002CA  D012               	goto	l219
  2359  0002CC                     
  2360                           ;main.c: 263: prescription[2] = 1;
  2361  0002CC  0E00               	movlw	0
  2362  0002CE  0100               	movlb	0	; () banked
  2363  0002D0  6FA4               	movwf	(operation@prescription+5)& (0+255),b
  2364  0002D2  0E01               	movlw	1
  2365  0002D4  D00B               	goto	L12
  2366  0002D6                     
  2367                           ; BSR set to: 0
  2368                           ;main.c: 266: prescription[2] = 2;
  2369                           
  2370                           ; BSR set to: 0
  2371  0002D6  0E00               	movlw	0
  2372  0002D8  6FA4               	movwf	(operation@prescription+5)& (0+255),b
  2373  0002DA  0E02               	movlw	2
  2374  0002DC  D007               	goto	L12
  2375  0002DE                     
  2376                           ; BSR set to: 0
  2377                           ;main.c: 269: prescription[2] = 3;
  2378                           
  2379                           ; BSR set to: 0
  2380  0002DE  0E00               	movlw	0
  2381  0002E0  6FA4               	movwf	(operation@prescription+5)& (0+255),b
  2382  0002E2  0E03               	movlw	3
  2383  0002E4  D003               	goto	L12
  2384  0002E6                     
  2385                           ; BSR set to: 0
  2386                           ;main.c: 272: prescription[2] = 0;
  2387                           
  2388                           ; BSR set to: 0
  2389  0002E6  0E00               	movlw	0
  2390  0002E8  6FA4               	movwf	(operation@prescription+5)& (0+255),b
  2391  0002EA  0E00               	movlw	0
  2392  0002EC                     L12:
  2393  0002EC  6FA3               	movwf	(operation@prescription+4)& (0+255),b
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;main.c: 274: }
  2397                           
  2398                           ;main.c: 273: break;
  2399  0002EE  D7C2               	goto	l207
  2400  0002F0                     l219:
  2401                           
  2402                           ; BSR set to: 0
  2403  0002F0  0100               	movlb	0	; () banked
  2404  0002F2  519D               	movf	operation@keypress_393& (0+255),w,b
  2405                           
  2406                           ; Switch size 1, requested type "space"
  2407                           ; Number of cases is 4, Range of values is 0 to 13
  2408                           ; switch strategies available:
  2409                           ; Name         Instructions Cycles
  2410                           ; simple_byte           13     7 (average)
  2411                           ;	Chosen strategy is simple_byte
  2412  0002F4  0A00               	xorlw	0	; case 0
  2413  0002F6  B4D8               	btfsc	status,2,c
  2414  0002F8  D7E9               	goto	l220
  2415  0002FA  0A01               	xorlw	1	; case 1
  2416  0002FC  B4D8               	btfsc	status,2,c
  2417  0002FE  D7EB               	goto	l222
  2418  000300  0A03               	xorlw	3	; case 2
  2419  000302  B4D8               	btfsc	status,2,c
  2420  000304  D7EC               	goto	l223
  2421  000306  0A0F               	xorlw	15	; case 13
  2422  000308  B4D8               	btfsc	status,2,c
  2423  00030A  D7ED               	goto	l224
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;main.c: 275: }
  2427  00030C  D7B3               	goto	l207
  2428  00030E                     l216:
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;main.c: 276: else if (keypress == 14) {
  2432                           
  2433                           ; BSR set to: 0
  2434  00030E  0E0E               	movlw	14
  2435  000310  199D               	xorwf	operation@keypress_393& (0+255),w,b
  2436  000312  A4D8               	btfss	status,2,c
  2437  000314  D7AF               	goto	l207
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;main.c: 277: if (prescription[2] != -1) {
  2441  000316  29A3               	incf	(operation@prescription+4)& (0+255),w,b
  2442  000318  E103               	bnz	l3718
  2443  00031A  29A4               	incf	(operation@prescription+5)& (0+255),w,b
  2444  00031C  B4D8               	btfsc	status,2,c
  2445  00031E  D7AA               	goto	l207
  2446  000320                     l3718:
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;main.c: 279: }
  2450                           ;main.c: 280: }
  2451                           ;main.c: 281: }
  2452                           ;main.c: 283: if ((prescription[0] + prescription[1] + prescription[2]) <= 4) {
  2453  000320  51A3               	movf	(operation@prescription+4)& (0+255),w,b
  2454  000322  25A1               	addwf	(operation@prescription+2)& (0+255),w,b
  2455  000324  6E3C               	movwf	??_operation& (0+255),c
  2456  000326  51A4               	movf	(operation@prescription+5)& (0+255),w,b
  2457  000328  21A2               	addwfc	(operation@prescription+3)& (0+255),w,b
  2458  00032A  6E3D               	movwf	(??_operation+1)& (0+255),c
  2459  00032C  519F               	movf	operation@prescription& (0+255),w,b
  2460  00032E  263C               	addwf	??_operation,f,c
  2461  000330  51A0               	movf	(operation@prescription+1)& (0+255),w,b
  2462  000332  223D               	addwfc	??_operation+1,f,c
  2463  000334  BE3D               	btfsc	??_operation+1,7,c
  2464  000336  D032               	goto	l231
  2465  000338  503D               	movf	??_operation+1,w,c
  2466  00033A  E104               	bnz	l3724
  2467  00033C  0E05               	movlw	5
  2468  00033E  5C3C               	subwf	??_operation,w,c
  2469  000340  A0D8               	btfss	status,0,c
  2470  000342  D02C               	goto	l231
  2471  000344                     l3724:
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;main.c: 286: else {
  2475                           ;main.c: 287: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2476  000344  0E0C               	movlw	12
  2477  000346  ECB4  F00B         	call	_lcdInst
  2478                           
  2479                           ;main.c: 288: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2480  00034A  0E01               	movlw	1
  2481  00034C  ECB4  F00B         	call	_lcdInst
  2482  000350  0EC3               	movlw	195
  2483  000352  6E3C               	movwf	??_operation& (0+255),c
  2484  000354  0ECD               	movlw	205
  2485  000356                     u4107:
  2486  000356  2EE8               	decfsz	wreg,f,c
  2487  000358  D7FE               	bra	u4107
  2488  00035A  2E3C               	decfsz	??_operation& (0+255),f,c
  2489  00035C  D7FC               	bra	u4107
  2490  00035E  F000               	nop	
  2491                           
  2492                           ;main.c: 289: lcdInst(0xC0);;
  2493  000360  0EC0               	movlw	192
  2494  000362  ECB4  F00B         	call	_lcdInst
  2495                           
  2496                           ;main.c: 290: printf("   INVALID INPUT    ");
  2497  000366  0EBF               	movlw	low STR_11
  2498  000368  6E20               	movwf	printf@f,c
  2499  00036A  0EFD               	movlw	high STR_11
  2500  00036C  6E21               	movwf	printf@f+1,c
  2501  00036E  EC47  F007         	call	_printf	;wreg free
  2502                           
  2503                           ;main.c: 291: lcdInst(0x94);;
  2504  000372  0E94               	movlw	148
  2505  000374  ECB4  F00B         	call	_lcdInst
  2506                           
  2507                           ;main.c: 292: printf("     TRY AGAIN      ");
  2508  000378  0E80               	movlw	low STR_12
  2509  00037A  6E20               	movwf	printf@f,c
  2510  00037C  0EFD               	movlw	high STR_12
  2511  00037E  6E21               	movwf	printf@f+1,c
  2512  000380  EC47  F007         	call	_printf	;wreg free
  2513                           
  2514                           ;main.c: 293: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2515  000384  0E33               	movlw	51
  2516  000386  6E3D               	movwf	(??_operation+1)& (0+255),c
  2517  000388  0EBB               	movlw	187
  2518  00038A  6E3C               	movwf	??_operation& (0+255),c
  2519  00038C  0EE0               	movlw	224
  2520  00038E                     u4117:
  2521  00038E  2EE8               	decfsz	wreg,f,c
  2522  000390  D7FE               	bra	u4117
  2523  000392  2E3C               	decfsz	??_operation& (0+255),f,c
  2524  000394  D7FC               	bra	u4117
  2525  000396  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  2526  000398  D7FA               	bra	u4117
  2527  00039A  D686               	goto	l168
  2528  00039C                     l231:
  2529                           
  2530                           ;main.c: 294: }
  2531                           ;main.c: 295: }
  2532                           ;main.c: 300: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2533  00039C  0E01               	movlw	1
  2534  00039E  ECB4  F00B         	call	_lcdInst
  2535  0003A2  0EC3               	movlw	195
  2536  0003A4  6E3C               	movwf	??_operation& (0+255),c
  2537  0003A6  0ECD               	movlw	205
  2538  0003A8                     u4127:
  2539  0003A8  2EE8               	decfsz	wreg,f,c
  2540  0003AA  D7FE               	bra	u4127
  2541  0003AC  2E3C               	decfsz	??_operation& (0+255),f,c
  2542  0003AE  D7FC               	bra	u4127
  2543  0003B0  F000               	nop	
  2544                           
  2545                           ;main.c: 301: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2546  0003B2  0E80               	movlw	128
  2547  0003B4  ECB4  F00B         	call	_lcdInst
  2548  0003B8  0E41               	movlw	65
  2549  0003BA  6E3C               	movwf	??_operation& (0+255),c
  2550  0003BC  0EEE               	movlw	238
  2551  0003BE                     u4137:
  2552  0003BE  2EE8               	decfsz	wreg,f,c
  2553  0003C0  D7FE               	bra	u4137
  2554  0003C2  2E3C               	decfsz	??_operation& (0+255),f,c
  2555  0003C4  D7FC               	bra	u4137
  2556  0003C6  D000               	nop2	
  2557                           
  2558                           ;main.c: 302: printf("Repetition: ");
  2559  0003C8  0E5F               	movlw	low STR_13
  2560  0003CA  6E20               	movwf	printf@f,c
  2561  0003CC  0EFF               	movlw	high STR_13
  2562  0003CE  6E21               	movwf	printf@f+1,c
  2563  0003D0  EC47  F007         	call	_printf	;wreg free
  2564                           
  2565                           ;main.c: 303: lcdInst(0xC0);;
  2566  0003D4  0EC0               	movlw	192
  2567  0003D6  ECB4  F00B         	call	_lcdInst
  2568                           
  2569                           ;main.c: 304: printf("(1)Morning");
  2570  0003DA  0EB6               	movlw	low STR_14
  2571  0003DC  6E20               	movwf	printf@f,c
  2572  0003DE  0EFF               	movlw	high STR_14
  2573  0003E0  6E21               	movwf	printf@f+1,c
  2574  0003E2  EC47  F007         	call	_printf	;wreg free
  2575                           
  2576                           ;main.c: 305: lcdInst(0x94);;
  2577  0003E6  0E94               	movlw	148
  2578  0003E8  ECB4  F00B         	call	_lcdInst
  2579                           
  2580                           ;main.c: 306: printf("(2)Afternoon");
  2581  0003EC  0E6C               	movlw	low STR_15
  2582  0003EE  6E20               	movwf	printf@f,c
  2583  0003F0  0EFF               	movlw	high STR_15
  2584  0003F2  6E21               	movwf	printf@f+1,c
  2585  0003F4  EC47  F007         	call	_printf	;wreg free
  2586                           
  2587                           ;main.c: 307: lcdInst(0xD4);;
  2588  0003F8  0ED4               	movlw	212
  2589  0003FA  ECB4  F00B         	call	_lcdInst
  2590                           
  2591                           ;main.c: 308: printf("(3)Both (4)Alternate");
  2592  0003FE  0E52               	movlw	low STR_16
  2593  000400  6E20               	movwf	printf@f,c
  2594  000402  0EFE               	movlw	high STR_16
  2595  000404  6E21               	movwf	printf@f+1,c
  2596  000406  EC47  F007         	call	_printf	;wreg free
  2597                           
  2598                           ;main.c: 309: lcd_set_cursor(12, 0);
  2599  00040A  0E00               	movlw	0
  2600  00040C  6E1A               	movwf	lcd_set_cursor@y,c
  2601  00040E  0E0C               	movlw	12
  2602  000410  EC70  F00A         	call	_lcd_set_cursor
  2603  000414                     
  2604                           ;main.c: 313: continue;
  2605                           
  2606                           ;main.c: 312: while (PORTBbits.RB1 == 0) {
  2607  000414  A281               	btfss	3969,1,c	;volatile
  2608  000416  D7FE               	goto	l234
  2609                           
  2610                           ;main.c: 314: }
  2611                           ;main.c: 316: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2612  000418  3881               	swapf	3969,w,c	;volatile
  2613  00041A  0B0F               	andlw	15
  2614  00041C  0B0F               	andlw	15
  2615  00041E  0100               	movlb	0	; () banked
  2616  000420  6F9E               	movwf	operation@keypress_400& (0+255),b
  2617  000422                     
  2618                           ; BSR set to: 0
  2619                           ;main.c: 319: continue;
  2620  000422  B281               	btfsc	3969,1,c	;volatile
  2621  000424  D7FE               	goto	l239
  2622                           
  2623                           ;main.c: 320: }
  2624                           ;main.c: 322: __nop();
  2625  000426  F000               	nop	
  2626                           
  2627                           ;main.c: 324: if (keypress == 0 || keypress == 1 || keypress == 2 || keypress == 4) {
  2628  000428  0100               	movlb	0	; () banked
  2629  00042A  519E               	movf	operation@keypress_400& (0+255),w,b
  2630  00042C  B4D8               	btfsc	status,2,c
  2631  00042E  D00B               	goto	u3420
  2632                           
  2633                           ; BSR set to: 0
  2634  000430  059E               	decf	operation@keypress_400& (0+255),w,b
  2635  000432  B4D8               	btfsc	status,2,c
  2636  000434  D008               	goto	u3420
  2637                           
  2638                           ; BSR set to: 0
  2639  000436  0E02               	movlw	2
  2640  000438  199E               	xorwf	operation@keypress_400& (0+255),w,b
  2641  00043A  B4D8               	btfsc	status,2,c
  2642  00043C  D004               	goto	u3420
  2643                           
  2644                           ; BSR set to: 0
  2645  00043E  0E04               	movlw	4
  2646  000440  199E               	xorwf	operation@keypress_400& (0+255),w,b
  2647  000442  A4D8               	btfss	status,2,c
  2648  000444  D02E               	goto	l241
  2649  000446                     u3420:
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;main.c: 325: lcd_set_cursor(12, 0);
  2653                           
  2654                           ; BSR set to: 0
  2655  000446  0E00               	movlw	0
  2656  000448  6E1A               	movwf	lcd_set_cursor@y,c
  2657  00044A  0E0C               	movlw	12
  2658  00044C  EC70  F00A         	call	_lcd_set_cursor
  2659                           
  2660                           ;main.c: 326: putch(keys[keypress]);
  2661  000450  0100               	movlb	0	; () banked
  2662  000452  519E               	movf	operation@keypress_400& (0+255),w,b
  2663  000454  0D01               	mullw	1
  2664  000456  0E03               	movlw	low _keys
  2665  000458  24F3               	addwf	prodl,w,c
  2666  00045A  6EF6               	movwf	tblptrl,c
  2667  00045C  0EFD               	movlw	high _keys
  2668  00045E  20F4               	addwfc	prodh,w,c
  2669  000460  6EF7               	movwf	tblptrh,c
  2670  000462                     	if	0	;There are less than 3 active tblptr bytes
  2671  000462                     	endif
  2672  000462  0008               	tblrd		*
  2673  000464  50F5               	movf	tablat,w,c
  2674  000466  ECAA  F00B         	call	_putch
  2675                           
  2676                           ;main.c: 328: switch(keypress) {
  2677  00046A  D00C               	goto	l244
  2678  00046C                     
  2679                           ;main.c: 330: repetition = morning;
  2680  00046C  0E00               	movlw	0
  2681  00046E  0100               	movlb	0	; () banked
  2682  000470  D007               	goto	L16
  2683  000472                     
  2684                           ; BSR set to: 0
  2685                           ;main.c: 333: repetition = afternoon;
  2686                           
  2687                           ; BSR set to: 0
  2688  000472  0E01               	movlw	1
  2689  000474  D005               	goto	L16
  2690  000476                     
  2691                           ; BSR set to: 0
  2692                           ;main.c: 336: repetition = both;
  2693                           
  2694                           ; BSR set to: 0
  2695  000476  0E03               	movlw	3
  2696  000478  D003               	goto	L16
  2697  00047A                     
  2698                           ; BSR set to: 0
  2699                           ;main.c: 339: repetition = alt;
  2700                           
  2701                           ; BSR set to: 0
  2702  00047A  0E02               	movlw	2
  2703  00047C  D001               	goto	L16
  2704  00047E                     
  2705                           ; BSR set to: 0
  2706                           ;main.c: 342: repetition = na_rep;
  2707                           
  2708                           ; BSR set to: 0
  2709  00047E  0E04               	movlw	4
  2710  000480                     L16:
  2711  000480  6FA5               	movwf	operation@repetition& (0+255),b
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;main.c: 344: }
  2715                           
  2716                           ;main.c: 343: break;
  2717  000482  D7C8               	goto	l234
  2718  000484                     l244:
  2719                           
  2720                           ; BSR set to: 0
  2721  000484  0100               	movlb	0	; () banked
  2722  000486  519E               	movf	operation@keypress_400& (0+255),w,b
  2723                           
  2724                           ; Switch size 1, requested type "space"
  2725                           ; Number of cases is 4, Range of values is 0 to 4
  2726                           ; switch strategies available:
  2727                           ; Name         Instructions Cycles
  2728                           ; simple_byte           13     7 (average)
  2729                           ;	Chosen strategy is simple_byte
  2730  000488  0A00               	xorlw	0	; case 0
  2731  00048A  B4D8               	btfsc	status,2,c
  2732  00048C  D7EF               	goto	l245
  2733  00048E  0A01               	xorlw	1	; case 1
  2734  000490  B4D8               	btfsc	status,2,c
  2735  000492  D7EF               	goto	l247
  2736  000494  0A03               	xorlw	3	; case 2
  2737  000496  B4D8               	btfsc	status,2,c
  2738  000498  D7EE               	goto	l248
  2739  00049A  0A06               	xorlw	6	; case 4
  2740  00049C  B4D8               	btfsc	status,2,c
  2741  00049E  D7ED               	goto	l249
  2742  0004A0  D7EE               	goto	l250
  2743  0004A2                     l241:
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;main.c: 346: else if (keypress == 14) {
  2747                           
  2748                           ; BSR set to: 0
  2749  0004A2  0E0E               	movlw	14
  2750  0004A4  199E               	xorwf	operation@keypress_400& (0+255),w,b
  2751  0004A6  A4D8               	btfss	status,2,c
  2752  0004A8  D7B5               	goto	l234
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;main.c: 347: if (repetition != na_rep) {
  2756  0004AA  0E04               	movlw	4
  2757  0004AC  19A5               	xorwf	operation@repetition& (0+255),w,b
  2758  0004AE  B4D8               	btfsc	status,2,c
  2759  0004B0  D7B1               	goto	l234
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;main.c: 349: }
  2763                           ;main.c: 350: }
  2764                           ;main.c: 351: }
  2765                           ;main.c: 357: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2766                           
  2767                           ; BSR set to: 0
  2768                           
  2769                           ; BSR set to: 0
  2770                           
  2771                           ; BSR set to: 0
  2772                           
  2773                           ; BSR set to: 0
  2774                           
  2775                           ; BSR set to: 0
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;main.c: 348: break;
  2779  0004B2  0E01               	movlw	1
  2780  0004B4  ECB4  F00B         	call	_lcdInst
  2781  0004B8  0EC3               	movlw	195
  2782  0004BA  6E3C               	movwf	??_operation& (0+255),c
  2783  0004BC  0ECD               	movlw	205
  2784  0004BE                     u4147:
  2785  0004BE  2EE8               	decfsz	wreg,f,c
  2786  0004C0  D7FE               	bra	u4147
  2787  0004C2  2E3C               	decfsz	??_operation& (0+255),f,c
  2788  0004C4  D7FC               	bra	u4147
  2789  0004C6  F000               	nop	
  2790                           
  2791                           ;main.c: 358: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2792  0004C8  0E80               	movlw	128
  2793  0004CA  ECB4  F00B         	call	_lcdInst
  2794  0004CE  0E41               	movlw	65
  2795  0004D0  6E3C               	movwf	??_operation& (0+255),c
  2796  0004D2  0EEE               	movlw	238
  2797  0004D4                     u4157:
  2798  0004D4  2EE8               	decfsz	wreg,f,c
  2799  0004D6  D7FE               	bra	u4157
  2800  0004D8  2E3C               	decfsz	??_operation& (0+255),f,c
  2801  0004DA  D7FC               	bra	u4157
  2802  0004DC  D000               	nop2	
  2803                           
  2804                           ;main.c: 359: printf("Frequency: ");
  2805  0004DE  0E93               	movlw	low STR_17
  2806  0004E0  6E20               	movwf	printf@f,c
  2807  0004E2  0EFF               	movlw	high STR_17
  2808  0004E4  6E21               	movwf	printf@f+1,c
  2809  0004E6  EC47  F007         	call	_printf	;wreg free
  2810                           
  2811                           ;main.c: 360: lcdInst(0xC0);;
  2812  0004EA  0EC0               	movlw	192
  2813  0004EC  ECB4  F00B         	call	_lcdInst
  2814                           
  2815                           ;main.c: 361: printf("(1) Everyday");
  2816  0004F0  0E86               	movlw	low STR_18
  2817  0004F2  6E20               	movwf	printf@f,c
  2818  0004F4  0EFF               	movlw	high STR_18
  2819  0004F6  6E21               	movwf	printf@f+1,c
  2820  0004F8  EC47  F007         	call	_printf	;wreg free
  2821                           
  2822                           ;main.c: 362: lcdInst(0x94);;
  2823  0004FC  0E94               	movlw	148
  2824  0004FE  ECB4  F00B         	call	_lcdInst
  2825                           
  2826                           ;main.c: 363: printf("(2) Alternate (Sun)");
  2827  000502  0E7B               	movlw	low STR_19
  2828  000504  6E20               	movwf	printf@f,c
  2829  000506  0EFE               	movlw	high STR_19
  2830  000508  6E21               	movwf	printf@f+1,c
  2831  00050A  EC47  F007         	call	_printf	;wreg free
  2832                           
  2833                           ;main.c: 364: lcdInst(0xD4);;
  2834  00050E  0ED4               	movlw	212
  2835  000510  ECB4  F00B         	call	_lcdInst
  2836                           
  2837                           ;main.c: 365: printf("(3) Alternate (Mon)");
  2838  000514  0E67               	movlw	low STR_20
  2839  000516  6E20               	movwf	printf@f,c
  2840  000518  0EFE               	movlw	high STR_20
  2841  00051A  6E21               	movwf	printf@f+1,c
  2842  00051C  EC47  F007         	call	_printf	;wreg free
  2843                           
  2844                           ;main.c: 366: lcd_set_cursor(11, 0);
  2845  000520  0E00               	movlw	0
  2846  000522  6E1A               	movwf	lcd_set_cursor@y,c
  2847  000524  0E0B               	movlw	11
  2848  000526  EC70  F00A         	call	_lcd_set_cursor
  2849  00052A                     
  2850                           ;main.c: 370: continue;
  2851                           
  2852                           ;main.c: 369: while (PORTBbits.RB1 == 0) {
  2853  00052A  A281               	btfss	3969,1,c	;volatile
  2854  00052C  D7FE               	goto	l256
  2855                           
  2856                           ;main.c: 371: }
  2857                           ;main.c: 373: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2858  00052E  3881               	swapf	3969,w,c	;volatile
  2859  000530  0B0F               	andlw	15
  2860  000532  0B0F               	andlw	15
  2861  000534  0100               	movlb	0	; () banked
  2862  000536  6F9C               	movwf	operation@keypress_405& (0+255),b
  2863  000538                     
  2864                           ; BSR set to: 0
  2865                           ;main.c: 376: continue;
  2866  000538  B281               	btfsc	3969,1,c	;volatile
  2867  00053A  D7FE               	goto	l261
  2868                           
  2869                           ;main.c: 377: }
  2870                           ;main.c: 379: __nop();
  2871  00053C  F000               	nop	
  2872                           
  2873                           ;main.c: 381: if (keypress == 0 || keypress == 1 || keypress == 2) {
  2874  00053E  0100               	movlb	0	; () banked
  2875  000540  519C               	movf	operation@keypress_405& (0+255),w,b
  2876  000542  B4D8               	btfsc	status,2,c
  2877  000544  D007               	goto	u3490
  2878                           
  2879                           ; BSR set to: 0
  2880  000546  059C               	decf	operation@keypress_405& (0+255),w,b
  2881  000548  B4D8               	btfsc	status,2,c
  2882  00054A  D004               	goto	u3490
  2883                           
  2884                           ; BSR set to: 0
  2885  00054C  0E02               	movlw	2
  2886  00054E  199C               	xorwf	operation@keypress_405& (0+255),w,b
  2887  000550  A4D8               	btfss	status,2,c
  2888  000552  D029               	goto	l263
  2889  000554                     u3490:
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;main.c: 382: lcd_set_cursor(11, 0);
  2893                           
  2894                           ; BSR set to: 0
  2895  000554  0E00               	movlw	0
  2896  000556  6E1A               	movwf	lcd_set_cursor@y,c
  2897  000558  0E0B               	movlw	11
  2898  00055A  EC70  F00A         	call	_lcd_set_cursor
  2899                           
  2900                           ;main.c: 383: putch(keys[keypress]);
  2901  00055E  0100               	movlb	0	; () banked
  2902  000560  519C               	movf	operation@keypress_405& (0+255),w,b
  2903  000562  0D01               	mullw	1
  2904  000564  0E03               	movlw	low _keys
  2905  000566  24F3               	addwf	prodl,w,c
  2906  000568  6EF6               	movwf	tblptrl,c
  2907  00056A  0EFD               	movlw	high _keys
  2908  00056C  20F4               	addwfc	prodh,w,c
  2909  00056E  6EF7               	movwf	tblptrh,c
  2910  000570                     	if	0	;There are less than 3 active tblptr bytes
  2911  000570                     	endif
  2912  000570  0008               	tblrd		*
  2913  000572  50F5               	movf	tablat,w,c
  2914  000574  ECAA  F00B         	call	_putch
  2915                           
  2916                           ;main.c: 385: switch(keypress) {
  2917  000578  D00A               	goto	l266
  2918  00057A                     
  2919                           ;main.c: 387: frequency = every;
  2920  00057A  0E00               	movlw	0
  2921  00057C  0100               	movlb	0	; () banked
  2922  00057E  D005               	goto	L19
  2923  000580                     
  2924                           ; BSR set to: 0
  2925                           ;main.c: 390: frequency = alt_sun;
  2926                           
  2927                           ; BSR set to: 0
  2928  000580  0E01               	movlw	1
  2929  000582  D003               	goto	L19
  2930  000584                     
  2931                           ; BSR set to: 0
  2932                           ;main.c: 393: frequency = alt_mon;
  2933                           
  2934                           ; BSR set to: 0
  2935  000584  0E02               	movlw	2
  2936  000586  D001               	goto	L19
  2937  000588                     
  2938                           ; BSR set to: 0
  2939                           ;main.c: 396: frequency = na_freq;
  2940                           
  2941                           ; BSR set to: 0
  2942  000588  0E03               	movlw	3
  2943  00058A                     L19:
  2944  00058A  6F97               	movwf	operation@frequency& (0+255),b
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;main.c: 398: }
  2948                           
  2949                           ;main.c: 397: break;
  2950  00058C  D7CE               	goto	l256
  2951  00058E                     l266:
  2952                           
  2953                           ; BSR set to: 0
  2954  00058E  0100               	movlb	0	; () banked
  2955  000590  519C               	movf	operation@keypress_405& (0+255),w,b
  2956                           
  2957                           ; Switch size 1, requested type "space"
  2958                           ; Number of cases is 3, Range of values is 0 to 2
  2959                           ; switch strategies available:
  2960                           ; Name         Instructions Cycles
  2961                           ; simple_byte           10     6 (average)
  2962                           ;	Chosen strategy is simple_byte
  2963  000592  0A00               	xorlw	0	; case 0
  2964  000594  B4D8               	btfsc	status,2,c
  2965  000596  D7F1               	goto	l267
  2966  000598  0A01               	xorlw	1	; case 1
  2967  00059A  B4D8               	btfsc	status,2,c
  2968  00059C  D7F1               	goto	l269
  2969  00059E  0A03               	xorlw	3	; case 2
  2970  0005A0  B4D8               	btfsc	status,2,c
  2971  0005A2  D7F0               	goto	l270
  2972  0005A4  D7F1               	goto	l271
  2973  0005A6                     l263:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 400: else if (keypress == 14) {
  2977                           
  2978                           ; BSR set to: 0
  2979  0005A6  0E0E               	movlw	14
  2980  0005A8  199C               	xorwf	operation@keypress_405& (0+255),w,b
  2981  0005AA  A4D8               	btfss	status,2,c
  2982  0005AC  D7BE               	goto	l256
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;main.c: 401: if (repetition != na_freq) {
  2986  0005AE  0E03               	movlw	3
  2987  0005B0  19A5               	xorwf	operation@repetition& (0+255),w,b
  2988  0005B2  B4D8               	btfsc	status,2,c
  2989  0005B4  D7BA               	goto	l256
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;main.c: 403: }
  2993                           ;main.c: 404: }
  2994                           ;main.c: 405: }
  2995                           ;main.c: 411: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2996                           
  2997                           ; BSR set to: 0
  2998                           
  2999                           ; BSR set to: 0
  3000                           
  3001                           ; BSR set to: 0
  3002                           
  3003                           ; BSR set to: 0
  3004                           
  3005                           ; BSR set to: 0
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;main.c: 402: break;
  3009  0005B6  0E0C               	movlw	12
  3010  0005B8  ECB4  F00B         	call	_lcdInst
  3011                           
  3012                           ;main.c: 412: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3013  0005BC  0E01               	movlw	1
  3014  0005BE  ECB4  F00B         	call	_lcdInst
  3015  0005C2  0EC3               	movlw	195
  3016  0005C4  6E3C               	movwf	??_operation& (0+255),c
  3017  0005C6  0ECD               	movlw	205
  3018  0005C8                     u4167:
  3019  0005C8  2EE8               	decfsz	wreg,f,c
  3020  0005CA  D7FE               	bra	u4167
  3021  0005CC  2E3C               	decfsz	??_operation& (0+255),f,c
  3022  0005CE  D7FC               	bra	u4167
  3023  0005D0  F000               	nop	
  3024                           
  3025                           ;main.c: 413: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3026  0005D2  0E80               	movlw	128
  3027  0005D4  ECB4  F00B         	call	_lcdInst
  3028  0005D8  0E41               	movlw	65
  3029  0005DA  6E3C               	movwf	??_operation& (0+255),c
  3030  0005DC  0EEE               	movlw	238
  3031  0005DE                     u4177:
  3032  0005DE  2EE8               	decfsz	wreg,f,c
  3033  0005E0  D7FE               	bra	u4177
  3034  0005E2  2E3C               	decfsz	??_operation& (0+255),f,c
  3035  0005E4  D7FC               	bra	u4177
  3036  0005E6  D000               	nop2	
  3037                           
  3038                           ;main.c: 414: printf("Prescrip. details:");
  3039  0005E8  0EB6               	movlw	low STR_21
  3040  0005EA  6E20               	movwf	printf@f,c
  3041  0005EC  0EFE               	movlw	high STR_21
  3042  0005EE  6E21               	movwf	printf@f+1,c
  3043  0005F0  EC47  F007         	call	_printf	;wreg free
  3044                           
  3045                           ;main.c: 415: lcdInst(0xC0);;
  3046  0005F4  0EC0               	movlw	192
  3047  0005F6  ECB4  F00B         	call	_lcdInst
  3048                           
  3049                           ;main.c: 416: printf("- %dR %dF %dL", prescription[0], prescription[1], prescription[2])
      +                          ;;
  3050  0005FA  0E43               	movlw	low STR_22
  3051  0005FC  6E20               	movwf	printf@f,c
  3052  0005FE  0EFF               	movlw	high STR_22
  3053  000600  6E21               	movwf	printf@f+1,c
  3054  000602  C09F  F022         	movff	operation@prescription,?_printf+2
  3055  000606  C0A0  F023         	movff	operation@prescription+1,?_printf+3
  3056  00060A  C0A1  F024         	movff	operation@prescription+2,?_printf+4
  3057  00060E  C0A2  F025         	movff	operation@prescription+3,?_printf+5
  3058  000612  C0A3  F026         	movff	operation@prescription+4,?_printf+6
  3059  000616  C0A4  F027         	movff	operation@prescription+5,?_printf+7
  3060  00061A  EC47  F007         	call	_printf	;wreg free
  3061                           
  3062                           ;main.c: 417: lcdInst(0x94);;
  3063  00061E  0E94               	movlw	148
  3064  000620  ECB4  F00B         	call	_lcdInst
  3065                           
  3066                           ;main.c: 418: switch (repetition) {
  3067  000624  D01C               	goto	l277
  3068  000626                     
  3069                           ;main.c: 420: printf("- Mornings");
  3070  000626  0EC1               	movlw	low STR_23
  3071  000628  6E20               	movwf	printf@f,c
  3072  00062A  0EFF               	movlw	high STR_23
  3073  00062C  6E21               	movwf	printf@f+1,c
  3074  00062E  EC47  F007         	call	_printf	;wreg free
  3075                           
  3076                           ;main.c: 421: break;
  3077  000632  D023               	goto	l279
  3078  000634                     
  3079                           ;main.c: 423: printf("- Afternoons");
  3080  000634  0E79               	movlw	low STR_24
  3081  000636  6E20               	movwf	printf@f,c
  3082  000638  0EFF               	movlw	high STR_24
  3083  00063A  6E21               	movwf	printf@f+1,c
  3084  00063C  EC47  F007         	call	_printf	;wreg free
  3085                           
  3086                           ;main.c: 424: break;
  3087  000640  D01C               	goto	l279
  3088  000642                     
  3089                           ;main.c: 426: printf("- Morn. & Afternoon");
  3090  000642  0E8F               	movlw	low STR_25
  3091  000644  6E20               	movwf	printf@f,c
  3092  000646  0EFE               	movlw	high STR_25
  3093  000648  6E21               	movwf	printf@f+1,c
  3094  00064A  EC47  F007         	call	_printf	;wreg free
  3095                           
  3096                           ;main.c: 427: break;
  3097  00064E  D015               	goto	l279
  3098  000650                     
  3099                           ;main.c: 429: printf("- Alternating");
  3100  000650  0E51               	movlw	low STR_26
  3101  000652  6E20               	movwf	printf@f,c
  3102  000654  0EFF               	movlw	high STR_26
  3103  000656  6E21               	movwf	printf@f+1,c
  3104  000658  EC47  F007         	call	_printf	;wreg free
  3105                           
  3106                           ;main.c: 431: }
  3107                           
  3108                           ;main.c: 430: break;
  3109  00065C  D00E               	goto	l279
  3110  00065E                     l277:
  3111  00065E  0100               	movlb	0	; () banked
  3112  000660  51A5               	movf	operation@repetition& (0+255),w,b
  3113                           
  3114                           ; Switch size 1, requested type "space"
  3115                           ; Number of cases is 4, Range of values is 0 to 3
  3116                           ; switch strategies available:
  3117                           ; Name         Instructions Cycles
  3118                           ; simple_byte           13     7 (average)
  3119                           ;	Chosen strategy is simple_byte
  3120  000662  0A00               	xorlw	0	; case 0
  3121  000664  B4D8               	btfsc	status,2,c
  3122  000666  D7DF               	goto	l278
  3123  000668  0A01               	xorlw	1	; case 1
  3124  00066A  B4D8               	btfsc	status,2,c
  3125  00066C  D7E3               	goto	l280
  3126  00066E  0A03               	xorlw	3	; case 2
  3127  000670  B4D8               	btfsc	status,2,c
  3128  000672  D7EE               	goto	l282
  3129  000674  0A01               	xorlw	1	; case 3
  3130  000676  B4D8               	btfsc	status,2,c
  3131  000678  D7E4               	goto	l281
  3132  00067A                     l279:
  3133                           
  3134                           ;main.c: 433: lcdInst(0xD4);;
  3135                           
  3136                           ; BSR set to: 0
  3137  00067A  0ED4               	movlw	212
  3138  00067C  ECB4  F00B         	call	_lcdInst
  3139                           
  3140                           ;main.c: 434: switch (frequency) {
  3141  000680  D015               	goto	l283
  3142  000682                     
  3143                           ;main.c: 436: printf("- Everyday");
  3144  000682  0ECC               	movlw	low STR_27
  3145  000684  6E20               	movwf	printf@f,c
  3146  000686  0EFF               	movlw	high STR_27
  3147  000688  6E21               	movwf	printf@f+1,c
  3148  00068A  EC47  F007         	call	_printf	;wreg free
  3149                           
  3150                           ;main.c: 437: break;
  3151  00068E  D019               	goto	l285
  3152  000690                     
  3153                           ;main.c: 439: printf("- Alternate (Sun)");
  3154  000690  0EDB               	movlw	low STR_28
  3155  000692  6E20               	movwf	printf@f,c
  3156  000694  0EFE               	movlw	high STR_28
  3157  000696  6E21               	movwf	printf@f+1,c
  3158  000698  EC47  F007         	call	_printf	;wreg free
  3159                           
  3160                           ;main.c: 440: break;
  3161  00069C  D012               	goto	l285
  3162  00069E                     
  3163                           ;main.c: 442: printf("- Alternate (Mon)");
  3164  00069E  0EC9               	movlw	low STR_29
  3165  0006A0  6E20               	movwf	printf@f,c
  3166  0006A2  0EFE               	movlw	high STR_29
  3167  0006A4  6E21               	movwf	printf@f+1,c
  3168  0006A6  EC47  F007         	call	_printf	;wreg free
  3169                           
  3170                           ;main.c: 444: }
  3171                           
  3172                           ;main.c: 443: break;
  3173  0006AA  D00B               	goto	l285
  3174  0006AC                     l283:
  3175  0006AC  0100               	movlb	0	; () banked
  3176  0006AE  5197               	movf	operation@frequency& (0+255),w,b
  3177                           
  3178                           ; Switch size 1, requested type "space"
  3179                           ; Number of cases is 3, Range of values is 0 to 2
  3180                           ; switch strategies available:
  3181                           ; Name         Instructions Cycles
  3182                           ; simple_byte           10     6 (average)
  3183                           ;	Chosen strategy is simple_byte
  3184  0006B0  0A00               	xorlw	0	; case 0
  3185  0006B2  B4D8               	btfsc	status,2,c
  3186  0006B4  D7E6               	goto	l284
  3187  0006B6  0A01               	xorlw	1	; case 1
  3188  0006B8  B4D8               	btfsc	status,2,c
  3189  0006BA  D7EA               	goto	l286
  3190  0006BC  0A03               	xorlw	3	; case 2
  3191  0006BE  B4D8               	btfsc	status,2,c
  3192  0006C0  D7EE               	goto	l287
  3193  0006C2                     l285:
  3194                           
  3195                           ;main.c: 445: _delay((unsigned long)((3000)*(40000000/4000.0)));
  3196                           
  3197                           ; BSR set to: 0
  3198  0006C2  0E99               	movlw	153
  3199  0006C4  6E3D               	movwf	(??_operation+1)& (0+255),c
  3200  0006C6  0E31               	movlw	49
  3201  0006C8  6E3C               	movwf	??_operation& (0+255),c
  3202  0006CA  0EA2               	movlw	162
  3203  0006CC                     u4187:
  3204  0006CC  2EE8               	decfsz	wreg,f,c
  3205  0006CE  D7FE               	bra	u4187
  3206  0006D0  2E3C               	decfsz	??_operation& (0+255),f,c
  3207  0006D2  D7FC               	bra	u4187
  3208  0006D4  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  3209  0006D6  D7FA               	bra	u4187
  3210  0006D8  D000               	nop2	
  3211                           
  3212                           ;main.c: 447: unsigned char i;
  3213                           ;main.c: 450: I2C_Master_Start();
  3214  0006DA  ECD0  F00B         	call	_I2C_Master_Start	;wreg free
  3215                           
  3216                           ;main.c: 451: I2C_Master_Write(0b11010001);
  3217  0006DE  0E00               	movlw	0
  3218  0006E0  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  3219  0006E2  0ED1               	movlw	209
  3220  0006E4  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  3221  0006E6  ECC7  F00B         	call	_I2C_Master_Write	;wreg free
  3222                           
  3223                           ;main.c: 452: for(i = 0; i < 6; i++){
  3224  0006EA  0E00               	movlw	0
  3225  0006EC  0100               	movlb	0	; () banked
  3226  0006EE  6FA6               	movwf	operation@i& (0+255),b
  3227  0006F0                     l3892:
  3228                           
  3229                           ; BSR set to: 0
  3230  0006F0  0E05               	movlw	5
  3231  0006F2  65A6               	cpfsgt	operation@i& (0+255),b
  3232  0006F4  D001               	goto	l288
  3233  0006F6  D00F               	goto	u3530
  3234  0006F8                     l288:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 453: start_time[i] = I2C_Master_Read(0);
  3238                           
  3239                           ; BSR set to: 0
  3240  0006F8  51A6               	movf	operation@i& (0+255),w,b
  3241  0006FA  0D01               	mullw	1
  3242  0006FC  0E81               	movlw	low operation@start_time
  3243  0006FE  24F3               	addwf	prodl,w,c
  3244  000700  6ED9               	movwf	fsr2l,c
  3245  000702  0E00               	movlw	high operation@start_time
  3246  000704  20F4               	addwfc	prodh,w,c
  3247  000706  6EDA               	movwf	fsr2h,c
  3248  000708  0E00               	movlw	0
  3249  00070A  EC7B  F00B         	call	_I2C_Master_Read
  3250  00070E  6EDF               	movwf	indf2,c
  3251  000710  0100               	movlb	0	; () banked
  3252  000712  2BA6               	incf	operation@i& (0+255),f,b
  3253  000714  D7ED               	goto	l3892
  3254  000716                     u3530:
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;main.c: 454: }
  3258                           ;main.c: 455: start_time[6] = I2C_Master_Read(1);
  3259                           
  3260                           ; BSR set to: 0
  3261  000716  0E01               	movlw	1
  3262  000718  EC7B  F00B         	call	_I2C_Master_Read
  3263  00071C  0100               	movlb	0	; () banked
  3264  00071E  6F87               	movwf	(operation@start_time+6)& (0+255),b
  3265                           
  3266                           ;main.c: 456: I2C_Master_Stop();
  3267  000720  ECCC  F00B         	call	_I2C_Master_Stop	;wreg free
  3268                           
  3269                           ;main.c: 458: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3270  000724  0E01               	movlw	1
  3271  000726  ECB4  F00B         	call	_lcdInst
  3272  00072A  0EC3               	movlw	195
  3273  00072C  6E3C               	movwf	??_operation& (0+255),c
  3274  00072E  0ECD               	movlw	205
  3275  000730                     u4197:
  3276  000730  2EE8               	decfsz	wreg,f,c
  3277  000732  D7FE               	bra	u4197
  3278  000734  2E3C               	decfsz	??_operation& (0+255),f,c
  3279  000736  D7FC               	bra	u4197
  3280  000738  F000               	nop	
  3281                           
  3282                           ;main.c: 459: lcdInst(0xC0);;
  3283  00073A  0EC0               	movlw	192
  3284  00073C  ECB4  F00B         	call	_lcdInst
  3285                           
  3286                           ;main.c: 460: printf("     DISPENSING     ");
  3287  000740  0E95               	movlw	low STR_30
  3288  000742  6E20               	movwf	printf@f,c
  3289  000744  0EFD               	movlw	high STR_30
  3290  000746  6E21               	movwf	printf@f+1,c
  3291  000748  EC47  F007         	call	_printf	;wreg free
  3292                           
  3293                           ;main.c: 461: lcdInst(0x94);;
  3294  00074C  0E94               	movlw	148
  3295  00074E  ECB4  F00B         	call	_lcdInst
  3296                           
  3297                           ;main.c: 462: printf("      PILLS...      ");
  3298  000752  0E6B               	movlw	low STR_31
  3299  000754  6E20               	movwf	printf@f,c
  3300  000756  0EFD               	movlw	high STR_31
  3301  000758  6E21               	movwf	printf@f+1,c
  3302  00075A  EC47  F007         	call	_printf	;wreg free
  3303                           
  3304                           ;main.c: 463: _delay((unsigned long)((3600)*(40000000/4000.0)));
  3305  00075E  0EB7               	movlw	183
  3306  000760  6E3D               	movwf	(??_operation+1)& (0+255),c
  3307  000762  0EA1               	movlw	161
  3308  000764  6E3C               	movwf	??_operation& (0+255),c
  3309  000766  0EC4               	movlw	196
  3310  000768                     u4207:
  3311  000768  2EE8               	decfsz	wreg,f,c
  3312  00076A  D7FE               	bra	u4207
  3313  00076C  2E3C               	decfsz	??_operation& (0+255),f,c
  3314  00076E  D7FC               	bra	u4207
  3315  000770  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  3316  000772  D7FA               	bra	u4207
  3317                           
  3318                           ;main.c: 473: dir = sat;
  3319  000774  0E00               	movlw	0
  3320  000776  0100               	movlb	0	; () banked
  3321  000778  6F94               	movwf	operation@dir& (0+255),b
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 475: int fill_start = 0;
  3325  00077A  0E00               	movlw	0
  3326  00077C  6F96               	movwf	(operation@fill_start+1)& (0+255),b
  3327  00077E  0E00               	movlw	0
  3328  000780  6F95               	movwf	operation@fill_start& (0+255),b
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;main.c: 476: int fill_increment = 0;
  3332  000782  0E00               	movlw	0
  3333  000784  6F99               	movwf	(operation@fill_increment+1)& (0+255),b
  3334  000786  0E00               	movlw	0
  3335  000788  6F98               	movwf	operation@fill_increment& (0+255),b
  3336                           
  3337                           ;main.c: 478: switch(frequency) {
  3338  00078A  D016               	goto	l290
  3339  00078C                     
  3340                           ; BSR set to: 0
  3341                           ;main.c: 480: fill_start = 0;
  3342                           
  3343                           ; BSR set to: 0
  3344  00078C  0E00               	movlw	0
  3345  00078E  6F96               	movwf	(operation@fill_start+1)& (0+255),b
  3346  000790  0E00               	movlw	0
  3347  000792  6F95               	movwf	operation@fill_start& (0+255),b
  3348                           
  3349                           ;main.c: 481: fill_increment = 1;
  3350  000794  0E00               	movlw	0
  3351  000796  6F99               	movwf	(operation@fill_increment+1)& (0+255),b
  3352  000798  0E01               	movlw	1
  3353  00079A  D004               	goto	L1
  3354  00079C                     
  3355                           ; BSR set to: 0
  3356                           ;main.c: 484: fill_start = 0;
  3357                           
  3358                           ; BSR set to: 0
  3359  00079C  0E00               	movlw	0
  3360  00079E  6F96               	movwf	(operation@fill_start+1)& (0+255),b
  3361  0007A0  0E00               	movlw	0
  3362  0007A2  D005               	goto	L2
  3363  0007A4                     L1:
  3364  0007A4  6F98               	movwf	operation@fill_increment& (0+255),b
  3365                           
  3366                           ;main.c: 486: break;
  3367  0007A6  D012               	goto	l292
  3368  0007A8                     
  3369                           ; BSR set to: 0
  3370                           ;main.c: 488: fill_start = 1;
  3371                           
  3372                           ; BSR set to: 0
  3373  0007A8  0E00               	movlw	0
  3374  0007AA  6F96               	movwf	(operation@fill_start+1)& (0+255),b
  3375  0007AC  0E01               	movlw	1
  3376  0007AE                     L2:
  3377  0007AE  6F95               	movwf	operation@fill_start& (0+255),b
  3378                           
  3379                           ;main.c: 489: fill_increment = 2;
  3380  0007B0  0E00               	movlw	0
  3381  0007B2  6F99               	movwf	(operation@fill_increment+1)& (0+255),b
  3382  0007B4  0E02               	movlw	2
  3383  0007B6  D7F6               	goto	L1
  3384  0007B8                     l290:
  3385                           
  3386                           ; BSR set to: 0
  3387                           
  3388                           ; BSR set to: 0
  3389  0007B8  5197               	movf	operation@frequency& (0+255),w,b
  3390                           
  3391                           ; Switch size 1, requested type "space"
  3392                           ; Number of cases is 3, Range of values is 0 to 2
  3393                           ; switch strategies available:
  3394                           ; Name         Instructions Cycles
  3395                           ; simple_byte           10     6 (average)
  3396                           ;	Chosen strategy is simple_byte
  3397  0007BA  0A00               	xorlw	0	; case 0
  3398  0007BC  B4D8               	btfsc	status,2,c
  3399  0007BE  D7E6               	goto	l291
  3400  0007C0  0A01               	xorlw	1	; case 1
  3401  0007C2  B4D8               	btfsc	status,2,c
  3402  0007C4  D7EB               	goto	l293
  3403  0007C6  0A03               	xorlw	3	; case 2
  3404  0007C8  B4D8               	btfsc	status,2,c
  3405  0007CA  D7EE               	goto	l294
  3406  0007CC                     l292:
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;main.c: 493: for (i = fill_start; i < 7; i += fill_increment) {
  3410  0007CC  C095  F0A6         	movff	operation@fill_start,operation@i
  3411  0007D0                     l3932:
  3412                           
  3413                           ; BSR set to: 0
  3414  0007D0  0E06               	movlw	6
  3415  0007D2  65A6               	cpfsgt	operation@i& (0+255),b
  3416  0007D4  D001               	goto	l295
  3417  0007D6  D133               	goto	u3730
  3418  0007D8                     l295:
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;main.c: 494: if (dir == sat) {
  3422                           
  3423                           ; BSR set to: 0
  3424  0007D8  5194               	movf	operation@dir& (0+255),w,b
  3425  0007DA  A4D8               	btfss	status,2,c
  3426  0007DC  D09C               	goto	l297
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;main.c: 495: if (repetition == afternoon) {
  3430  0007DE  05A5               	decf	operation@repetition& (0+255),w,b
  3431  0007E0  A4D8               	btfss	status,2,c
  3432  0007E2  D00A               	goto	l298
  3433  0007E4                     u3560:
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;main.c: 496: box_fill[i][0] = 0;
  3437  0007E4  51A6               	movf	operation@i& (0+255),w,b
  3438  0007E6  0D04               	mullw	4
  3439  0007E8  0EA7               	movlw	low _box_fill
  3440  0007EA  24F3               	addwf	prodl,w,c
  3441  0007EC  6ED9               	movwf	fsr2l,c
  3442  0007EE  0E00               	movlw	high _box_fill
  3443  0007F0  20F4               	addwfc	prodh,w,c
  3444  0007F2  6EDA               	movwf	fsr2h,c
  3445  0007F4  0E00               	movlw	0
  3446  0007F6  D0A7               	goto	L22
  3447  0007F8                     l298:
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;main.c: 499: else if (repetition == morning) {
  3451                           
  3452                           ; BSR set to: 0
  3453  0007F8  51A5               	movf	operation@repetition& (0+255),w,b
  3454  0007FA  A4D8               	btfss	status,2,c
  3455  0007FC  D01A               	goto	l300
  3456  0007FE                     u3570:
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;main.c: 500: box_fill[i][0] = 1;
  3460  0007FE  51A6               	movf	operation@i& (0+255),w,b
  3461  000800  0D04               	mullw	4
  3462  000802  0EA7               	movlw	low _box_fill
  3463  000804  24F3               	addwf	prodl,w,c
  3464  000806  6ED9               	movwf	fsr2l,c
  3465  000808  0E00               	movlw	high _box_fill
  3466  00080A  20F4               	addwfc	prodh,w,c
  3467  00080C  6EDA               	movwf	fsr2h,c
  3468  00080E  0E01               	movlw	1
  3469  000810  6EDE               	movwf	postinc2,c
  3470  000812  0E00               	movlw	0
  3471  000814  6EDD               	movwf	postdec2,c
  3472                           
  3473                           ;main.c: 501: box_fill[i][1] = 0;
  3474  000816  51A6               	movf	operation@i& (0+255),w,b
  3475  000818  0D04               	mullw	4
  3476  00081A  0E02               	movlw	2
  3477  00081C  26F3               	addwf	prodl,f,c
  3478  00081E  0E00               	movlw	0
  3479  000820  22F4               	addwfc	prodh,f,c
  3480  000822  0EA7               	movlw	low _box_fill
  3481  000824  24F3               	addwf	prodl,w,c
  3482  000826  6ED9               	movwf	fsr2l,c
  3483  000828  0E00               	movlw	high _box_fill
  3484  00082A  20F4               	addwfc	prodh,w,c
  3485  00082C  6EDA               	movwf	fsr2h,c
  3486  00082E  0E00               	movlw	0
  3487  000830  D019               	goto	L5
  3488  000832                     l300:
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;main.c: 503: else if (repetition == both) {
  3492                           
  3493                           ; BSR set to: 0
  3494  000832  0E03               	movlw	3
  3495  000834  19A5               	xorwf	operation@repetition& (0+255),w,b
  3496  000836  A4D8               	btfss	status,2,c
  3497  000838  D00A               	goto	l302
  3498  00083A                     u3580:
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;main.c: 504: box_fill[i][0] = 1;
  3502  00083A  51A6               	movf	operation@i& (0+255),w,b
  3503  00083C  0D04               	mullw	4
  3504  00083E  0EA7               	movlw	low _box_fill
  3505  000840  24F3               	addwf	prodl,w,c
  3506  000842  6ED9               	movwf	fsr2l,c
  3507  000844  0E00               	movlw	high _box_fill
  3508  000846  20F4               	addwfc	prodh,w,c
  3509  000848  6EDA               	movwf	fsr2h,c
  3510  00084A  0E01               	movlw	1
  3511  00084C  D07C               	goto	L22
  3512  00084E                     l302:
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;main.c: 507: else {
  3516                           ;main.c: 508: if (i == fill_start) {
  3517                           
  3518                           ; BSR set to: 0
  3519  00084E  51A6               	movf	operation@i& (0+255),w,b
  3520  000850  6E3C               	movwf	??_operation& (0+255),c
  3521  000852  6A3D               	clrf	(??_operation+1)& (0+255),c
  3522  000854  5195               	movf	operation@fill_start& (0+255),w,b
  3523  000856  183C               	xorwf	??_operation,w,c
  3524  000858  E109               	bnz	l3954
  3525  00085A  5196               	movf	(operation@fill_start+1)& (0+255),w,b
  3526  00085C  183D               	xorwf	??_operation+1,w,c
  3527  00085E  A4D8               	btfss	status,2,c
  3528  000860  D005               	goto	l304
  3529  000862  D7CD               	goto	u3570
  3530  000864                     L5:
  3531  000864  6EDE               	movwf	postinc2,c
  3532  000866  0E00               	movlw	0
  3533  000868  6EDD               	movwf	postdec2,c
  3534                           
  3535                           ;main.c: 511: }
  3536  00086A  D0E6               	goto	l315
  3537  00086C                     l304:
  3538  00086C                     l3954:
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;main.c: 512: else {
  3542                           ;main.c: 513: box_fill[i][0] = !box_fill[i - fill_increment][0];
  3543  00086C  C098  F03C         	movff	operation@fill_increment,??_operation
  3544  000870  C099  F03D         	movff	operation@fill_increment+1,??_operation+1
  3545  000874  1E3C               	comf	??_operation,f,c
  3546  000876  1E3D               	comf	??_operation+1,f,c
  3547  000878  4A3C               	infsnz	??_operation,f,c
  3548  00087A  2A3D               	incf	??_operation+1,f,c
  3549  00087C  51A6               	movf	operation@i& (0+255),w,b
  3550  00087E  6E3E               	movwf	(??_operation+2)& (0+255),c
  3551  000880  6A3F               	clrf	(??_operation+3)& (0+255),c
  3552  000882  503C               	movf	??_operation,w,c
  3553  000884  263E               	addwf	??_operation+2,f,c
  3554  000886  503D               	movf	??_operation+1,w,c
  3555  000888  223F               	addwfc	??_operation+3,f,c
  3556  00088A  90D8               	bcf	status,0,c
  3557  00088C  363E               	rlcf	??_operation+2,f,c
  3558  00088E  363F               	rlcf	??_operation+3,f,c
  3559  000890  90D8               	bcf	status,0,c
  3560  000892  363E               	rlcf	??_operation+2,f,c
  3561  000894  363F               	rlcf	??_operation+3,f,c
  3562  000896  0EA7               	movlw	low _box_fill
  3563  000898  243E               	addwf	??_operation+2,w,c
  3564  00089A  6ED9               	movwf	fsr2l,c
  3565  00089C  0E00               	movlw	high _box_fill
  3566  00089E  203F               	addwfc	??_operation+3,w,c
  3567  0008A0  6EDA               	movwf	fsr2h,c
  3568  0008A2  50DE               	movf	postinc2,w,c
  3569  0008A4  10DE               	iorwf	postinc2,w,c
  3570  0008A6  A4D8               	btfss	status,2,c
  3571  0008A8  D002               	goto	u3600
  3572  0008AA  0E01               	movlw	1
  3573  0008AC  D001               	goto	u3610
  3574  0008AE                     u3600:
  3575  0008AE  0E00               	movlw	0
  3576  0008B0                     u3610:
  3577  0008B0  6E42               	movwf	(??_operation+6)& (0+255),c
  3578  0008B2  6A43               	clrf	(??_operation+7)& (0+255),c
  3579  0008B4  51A6               	movf	operation@i& (0+255),w,b
  3580  0008B6  0D04               	mullw	4
  3581  0008B8  0EA7               	movlw	low _box_fill
  3582  0008BA  24F3               	addwf	prodl,w,c
  3583  0008BC  6ED9               	movwf	fsr2l,c
  3584  0008BE  0E00               	movlw	high _box_fill
  3585  0008C0  20F4               	addwfc	prodh,w,c
  3586  0008C2  6EDA               	movwf	fsr2h,c
  3587  0008C4  C042  FFDE         	movff	??_operation+6,postinc2
  3588  0008C8  C043  FFDD         	movff	??_operation+7,postdec2
  3589                           
  3590                           ;main.c: 514: box_fill[i][1] = !box_fill[i - fill_increment][1];
  3591  0008CC  C098  F03C         	movff	operation@fill_increment,??_operation
  3592  0008D0  C099  F03D         	movff	operation@fill_increment+1,??_operation+1
  3593  0008D4  1E3C               	comf	??_operation,f,c
  3594  0008D6  1E3D               	comf	??_operation+1,f,c
  3595  0008D8  4A3C               	infsnz	??_operation,f,c
  3596  0008DA  2A3D               	incf	??_operation+1,f,c
  3597  0008DC  51A6               	movf	operation@i& (0+255),w,b
  3598  0008DE  6E3E               	movwf	(??_operation+2)& (0+255),c
  3599  0008E0  6A3F               	clrf	(??_operation+3)& (0+255),c
  3600  0008E2  503C               	movf	??_operation,w,c
  3601  0008E4  263E               	addwf	??_operation+2,f,c
  3602  0008E6  503D               	movf	??_operation+1,w,c
  3603  0008E8  223F               	addwfc	??_operation+3,f,c
  3604  0008EA  90D8               	bcf	status,0,c
  3605  0008EC  363E               	rlcf	??_operation+2,f,c
  3606  0008EE  363F               	rlcf	??_operation+3,f,c
  3607  0008F0  90D8               	bcf	status,0,c
  3608  0008F2  363E               	rlcf	??_operation+2,f,c
  3609  0008F4  363F               	rlcf	??_operation+3,f,c
  3610  0008F6  0E02               	movlw	2
  3611  0008F8  263E               	addwf	??_operation+2,f,c
  3612  0008FA  0E00               	movlw	0
  3613  0008FC  223F               	addwfc	??_operation+3,f,c
  3614  0008FE  0EA7               	movlw	low _box_fill
  3615  000900  243E               	addwf	??_operation+2,w,c
  3616  000902  6ED9               	movwf	fsr2l,c
  3617  000904  0E00               	movlw	high _box_fill
  3618  000906  203F               	addwfc	??_operation+3,w,c
  3619  000908  6EDA               	movwf	fsr2h,c
  3620  00090A  50DE               	movf	postinc2,w,c
  3621  00090C  10DE               	iorwf	postinc2,w,c
  3622  00090E  A4D8               	btfss	status,2,c
  3623  000910  D080               	goto	u3710
  3624  000912  0E01               	movlw	1
  3625  000914  D07F               	goto	u3720
  3626  000916                     l297:
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;main.c: 518: else if (dir == sun) {
  3630                           
  3631                           ; BSR set to: 0
  3632  000916  0594               	decf	operation@dir& (0+255),w,b
  3633  000918  A4D8               	btfss	status,2,c
  3634  00091A  D08E               	goto	l315
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;main.c: 519: if (repetition == afternoon) {
  3638  00091C  05A5               	decf	operation@repetition& (0+255),w,b
  3639  00091E  B4D8               	btfsc	status,2,c
  3640  000920  D76E               	goto	u3570
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;main.c: 523: else if (repetition == morning) {
  3644                           
  3645                           ; BSR set to: 0
  3646                           
  3647                           ;main.c: 522: }
  3648                           
  3649                           ;main.c: 521: box_fill[i][1] = 0;
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;main.c: 520: box_fill[i][0] = 1;
  3653  000922  51A5               	movf	operation@repetition& (0+255),w,b
  3654  000924  B4D8               	btfsc	status,2,c
  3655  000926  D75E               	goto	u3560
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;main.c: 527: else if (repetition == both) {
  3659                           
  3660                           ; BSR set to: 0
  3661                           
  3662                           ;main.c: 526: }
  3663                           
  3664                           ;main.c: 525: box_fill[i][1] = 1;
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;main.c: 524: box_fill[i][0] = 0;
  3668  000928  0E03               	movlw	3
  3669  00092A  19A5               	xorwf	operation@repetition& (0+255),w,b
  3670  00092C  B4D8               	btfsc	status,2,c
  3671  00092E  D785               	goto	u3580
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;main.c: 531: else {
  3675                           ;main.c: 532: if (i == fill_start) {
  3676                           
  3677                           ; BSR set to: 0
  3678                           
  3679                           ;main.c: 530: }
  3680                           
  3681                           ;main.c: 529: box_fill[i][1] = 1;
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;main.c: 528: box_fill[i][0] = 1;
  3685  000930  51A6               	movf	operation@i& (0+255),w,b
  3686  000932  6E3C               	movwf	??_operation& (0+255),c
  3687  000934  6A3D               	clrf	(??_operation+1)& (0+255),c
  3688  000936  5195               	movf	operation@fill_start& (0+255),w,b
  3689  000938  183C               	xorwf	??_operation,w,c
  3690  00093A  E116               	bnz	l3974
  3691  00093C  5196               	movf	(operation@fill_start+1)& (0+255),w,b
  3692  00093E  183D               	xorwf	??_operation+1,w,c
  3693  000940  A4D8               	btfss	status,2,c
  3694  000942  D012               	goto	l314
  3695  000944  D74F               	goto	u3560
  3696  000946                     L22:
  3697  000946  6EDE               	movwf	postinc2,c
  3698  000948  0E00               	movlw	0
  3699  00094A  6EDD               	movwf	postdec2,c
  3700                           
  3701                           ;main.c: 534: box_fill[i][1] = 1;
  3702  00094C  51A6               	movf	operation@i& (0+255),w,b
  3703  00094E  0D04               	mullw	4
  3704  000950  0E02               	movlw	2
  3705  000952  26F3               	addwf	prodl,f,c
  3706  000954  0E00               	movlw	0
  3707  000956  22F4               	addwfc	prodh,f,c
  3708  000958  0EA7               	movlw	low _box_fill
  3709  00095A  24F3               	addwf	prodl,w,c
  3710  00095C  6ED9               	movwf	fsr2l,c
  3711  00095E  0E00               	movlw	high _box_fill
  3712  000960  20F4               	addwfc	prodh,w,c
  3713  000962  6EDA               	movwf	fsr2h,c
  3714  000964  0E01               	movlw	1
  3715  000966  D77E               	goto	L5
  3716  000968                     l314:
  3717  000968                     l3974:
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;main.c: 536: else {
  3721                           ;main.c: 537: box_fill[i][0] = !box_fill[i - fill_increment][0];
  3722  000968  C098  F03C         	movff	operation@fill_increment,??_operation
  3723  00096C  C099  F03D         	movff	operation@fill_increment+1,??_operation+1
  3724  000970  1E3C               	comf	??_operation,f,c
  3725  000972  1E3D               	comf	??_operation+1,f,c
  3726  000974  4A3C               	infsnz	??_operation,f,c
  3727  000976  2A3D               	incf	??_operation+1,f,c
  3728  000978  51A6               	movf	operation@i& (0+255),w,b
  3729  00097A  6E3E               	movwf	(??_operation+2)& (0+255),c
  3730  00097C  6A3F               	clrf	(??_operation+3)& (0+255),c
  3731  00097E  503C               	movf	??_operation,w,c
  3732  000980  263E               	addwf	??_operation+2,f,c
  3733  000982  503D               	movf	??_operation+1,w,c
  3734  000984  223F               	addwfc	??_operation+3,f,c
  3735  000986  90D8               	bcf	status,0,c
  3736  000988  363E               	rlcf	??_operation+2,f,c
  3737  00098A  363F               	rlcf	??_operation+3,f,c
  3738  00098C  90D8               	bcf	status,0,c
  3739  00098E  363E               	rlcf	??_operation+2,f,c
  3740  000990  363F               	rlcf	??_operation+3,f,c
  3741  000992  0EA7               	movlw	low _box_fill
  3742  000994  243E               	addwf	??_operation+2,w,c
  3743  000996  6ED9               	movwf	fsr2l,c
  3744  000998  0E00               	movlw	high _box_fill
  3745  00099A  203F               	addwfc	??_operation+3,w,c
  3746  00099C  6EDA               	movwf	fsr2h,c
  3747  00099E  50DE               	movf	postinc2,w,c
  3748  0009A0  10DE               	iorwf	postinc2,w,c
  3749  0009A2  A4D8               	btfss	status,2,c
  3750  0009A4  D002               	goto	u3690
  3751  0009A6  0E01               	movlw	1
  3752  0009A8  D001               	goto	u3700
  3753  0009AA                     u3690:
  3754  0009AA  0E00               	movlw	0
  3755  0009AC                     u3700:
  3756  0009AC  6E42               	movwf	(??_operation+6)& (0+255),c
  3757  0009AE  6A43               	clrf	(??_operation+7)& (0+255),c
  3758  0009B0  51A6               	movf	operation@i& (0+255),w,b
  3759  0009B2  0D04               	mullw	4
  3760  0009B4  0EA7               	movlw	low _box_fill
  3761  0009B6  24F3               	addwf	prodl,w,c
  3762  0009B8  6ED9               	movwf	fsr2l,c
  3763  0009BA  0E00               	movlw	high _box_fill
  3764  0009BC  20F4               	addwfc	prodh,w,c
  3765  0009BE  6EDA               	movwf	fsr2h,c
  3766  0009C0  C042  FFDE         	movff	??_operation+6,postinc2
  3767  0009C4  C043  FFDD         	movff	??_operation+7,postdec2
  3768                           
  3769                           ;main.c: 538: box_fill[i][1] = !box_fill[i - fill_increment][1];
  3770  0009C8  C098  F03C         	movff	operation@fill_increment,??_operation
  3771  0009CC  C099  F03D         	movff	operation@fill_increment+1,??_operation+1
  3772  0009D0  1E3C               	comf	??_operation,f,c
  3773  0009D2  1E3D               	comf	??_operation+1,f,c
  3774  0009D4  4A3C               	infsnz	??_operation,f,c
  3775  0009D6  2A3D               	incf	??_operation+1,f,c
  3776  0009D8  51A6               	movf	operation@i& (0+255),w,b
  3777  0009DA  6E3E               	movwf	(??_operation+2)& (0+255),c
  3778  0009DC  6A3F               	clrf	(??_operation+3)& (0+255),c
  3779  0009DE  503C               	movf	??_operation,w,c
  3780  0009E0  263E               	addwf	??_operation+2,f,c
  3781  0009E2  503D               	movf	??_operation+1,w,c
  3782  0009E4  223F               	addwfc	??_operation+3,f,c
  3783  0009E6  90D8               	bcf	status,0,c
  3784  0009E8  363E               	rlcf	??_operation+2,f,c
  3785  0009EA  363F               	rlcf	??_operation+3,f,c
  3786  0009EC  90D8               	bcf	status,0,c
  3787  0009EE  363E               	rlcf	??_operation+2,f,c
  3788  0009F0  363F               	rlcf	??_operation+3,f,c
  3789  0009F2  0E02               	movlw	2
  3790  0009F4  263E               	addwf	??_operation+2,f,c
  3791  0009F6  0E00               	movlw	0
  3792  0009F8  223F               	addwfc	??_operation+3,f,c
  3793  0009FA  0EA7               	movlw	low _box_fill
  3794  0009FC  243E               	addwf	??_operation+2,w,c
  3795  0009FE  6ED9               	movwf	fsr2l,c
  3796  000A00  0E00               	movlw	high _box_fill
  3797  000A02  203F               	addwfc	??_operation+3,w,c
  3798  000A04  6EDA               	movwf	fsr2h,c
  3799  000A06  50DE               	movf	postinc2,w,c
  3800  000A08  10DE               	iorwf	postinc2,w,c
  3801  000A0A  A4D8               	btfss	status,2,c
  3802  000A0C  D002               	goto	u3710
  3803  000A0E  0E01               	movlw	1
  3804  000A10  D001               	goto	u3720
  3805  000A12                     u3710:
  3806  000A12  0E00               	movlw	0
  3807  000A14                     u3720:
  3808  000A14  6E42               	movwf	(??_operation+6)& (0+255),c
  3809  000A16  6A43               	clrf	(??_operation+7)& (0+255),c
  3810  000A18  51A6               	movf	operation@i& (0+255),w,b
  3811  000A1A  0D04               	mullw	4
  3812  000A1C  0E02               	movlw	2
  3813  000A1E  26F3               	addwf	prodl,f,c
  3814  000A20  0E00               	movlw	0
  3815  000A22  22F4               	addwfc	prodh,f,c
  3816  000A24  0EA7               	movlw	low _box_fill
  3817  000A26  24F3               	addwf	prodl,w,c
  3818  000A28  6ED9               	movwf	fsr2l,c
  3819  000A2A  0E00               	movlw	high _box_fill
  3820  000A2C  20F4               	addwfc	prodh,w,c
  3821  000A2E  6EDA               	movwf	fsr2h,c
  3822  000A30  C042  FFDE         	movff	??_operation+6,postinc2
  3823  000A34  C043  FFDD         	movff	??_operation+7,postdec2
  3824  000A38                     l315:
  3825                           
  3826                           ; BSR set to: 0
  3827                           
  3828                           ; BSR set to: 0
  3829                           
  3830                           ; BSR set to: 0
  3831                           
  3832                           ; BSR set to: 0
  3833                           
  3834                           ; BSR set to: 0
  3835                           
  3836                           ; BSR set to: 0
  3837                           
  3838                           ; BSR set to: 0
  3839  000A38  5198               	movf	operation@fill_increment& (0+255),w,b
  3840  000A3A  27A6               	addwf	operation@i& (0+255),f,b
  3841  000A3C  D6C9               	goto	l3932
  3842  000A3E                     u3730:
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;main.c: 539: }
  3846                           ;main.c: 540: }
  3847                           ;main.c: 541: }
  3848                           ;main.c: 542: }
  3849                           ;main.c: 597: I2C_Master_Start();
  3850                           
  3851                           ; BSR set to: 0
  3852  000A3E  ECD0  F00B         	call	_I2C_Master_Start	;wreg free
  3853                           
  3854                           ;main.c: 598: I2C_Master_Write(0b11010001);
  3855  000A42  0E00               	movlw	0
  3856  000A44  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  3857  000A46  0ED1               	movlw	209
  3858  000A48  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  3859  000A4A  ECC7  F00B         	call	_I2C_Master_Write	;wreg free
  3860                           
  3861                           ;main.c: 599: for(i = 0; i < 6; i++){
  3862  000A4E  0E00               	movlw	0
  3863  000A50  0100               	movlb	0	; () banked
  3864  000A52  6FA6               	movwf	operation@i& (0+255),b
  3865  000A54                     l3984:
  3866                           
  3867                           ; BSR set to: 0
  3868  000A54  0E05               	movlw	5
  3869  000A56  65A6               	cpfsgt	operation@i& (0+255),b
  3870  000A58  D001               	goto	l316
  3871  000A5A  D00F               	goto	u3750
  3872  000A5C                     l316:
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;main.c: 600: end_time[i] = I2C_Master_Read(0);
  3876                           
  3877                           ; BSR set to: 0
  3878  000A5C  51A6               	movf	operation@i& (0+255),w,b
  3879  000A5E  0D01               	mullw	1
  3880  000A60  0E88               	movlw	low operation@end_time
  3881  000A62  24F3               	addwf	prodl,w,c
  3882  000A64  6ED9               	movwf	fsr2l,c
  3883  000A66  0E00               	movlw	high operation@end_time
  3884  000A68  20F4               	addwfc	prodh,w,c
  3885  000A6A  6EDA               	movwf	fsr2h,c
  3886  000A6C  0E00               	movlw	0
  3887  000A6E  EC7B  F00B         	call	_I2C_Master_Read
  3888  000A72  6EDF               	movwf	indf2,c
  3889  000A74  0100               	movlb	0	; () banked
  3890  000A76  2BA6               	incf	operation@i& (0+255),f,b
  3891  000A78  D7ED               	goto	l3984
  3892  000A7A                     u3750:
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;main.c: 601: }
  3896                           ;main.c: 602: end_time[6] = I2C_Master_Read(1);
  3897                           
  3898                           ; BSR set to: 0
  3899  000A7A  0E01               	movlw	1
  3900  000A7C  EC7B  F00B         	call	_I2C_Master_Read
  3901  000A80  0100               	movlb	0	; () banked
  3902  000A82  6F8E               	movwf	(operation@end_time+6)& (0+255),b
  3903                           
  3904                           ;main.c: 603: I2C_Master_Stop();
  3905  000A84  ECCC  F00B         	call	_I2C_Master_Stop	;wreg free
  3906                           
  3907                           ;main.c: 605: total_time = (3600 * end_time[2]) + (60 * end_time[1]) + end_time[0] - (36
      +                          00 * start_time[2]) - (60 * start_time[1]) - start_time[0];
  3908  000A88  0100               	movlb	0	; () banked
  3909  000A8A  5181               	movf	operation@start_time& (0+255),w,b
  3910  000A8C  0800               	sublw	0
  3911  000A8E  6E3C               	movwf	??_operation& (0+255),c
  3912  000A90  5182               	movf	(operation@start_time+1)& (0+255),w,b
  3913  000A92  0D3C               	mullw	60
  3914  000A94  50F3               	movf	prodl,w,c
  3915  000A96  0800               	sublw	0
  3916  000A98  6E3D               	movwf	(??_operation+1)& (0+255),c
  3917  000A9A  C083  F014         	movff	operation@start_time+2,___wmul@multiplier
  3918  000A9E  6A15               	clrf	___wmul@multiplier+1,c
  3919  000AA0  0E0E               	movlw	14
  3920  000AA2  6E17               	movwf	___wmul@multiplicand+1,c
  3921  000AA4  0E10               	movlw	16
  3922  000AA6  6E16               	movwf	___wmul@multiplicand,c
  3923  000AA8  EC68  F00B         	call	___wmul	;wreg free
  3924  000AAC  5014               	movf	?___wmul,w,c
  3925  000AAE  0800               	sublw	0
  3926  000AB0  6E3E               	movwf	(??_operation+2)& (0+255),c
  3927  000AB2  0100               	movlb	0	; () banked
  3928  000AB4  5189               	movf	(operation@end_time+1)& (0+255),w,b
  3929  000AB6  0D3C               	mullw	60
  3930  000AB8  CFF3 F03F          	movff	prodl,??_operation+3
  3931  000ABC  518A               	movf	(operation@end_time+2)& (0+255),w,b
  3932  000ABE  0D10               	mullw	16
  3933  000AC0  50F3               	movf	prodl,w,c
  3934  000AC2  243F               	addwf	??_operation+3,w,c
  3935  000AC4  243E               	addwf	??_operation+2,w,c
  3936  000AC6  243D               	addwf	??_operation+1,w,c
  3937  000AC8  243C               	addwf	??_operation,w,c
  3938  000ACA  2588               	addwf	operation@end_time& (0+255),w,b
  3939  000ACC  6E56               	movwf	_total_time,c
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;main.c: 608: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3943  000ACE  0E01               	movlw	1
  3944  000AD0  ECB4  F00B         	call	_lcdInst
  3945  000AD4  0EC3               	movlw	195
  3946  000AD6  6E3C               	movwf	??_operation& (0+255),c
  3947  000AD8  0ECD               	movlw	205
  3948  000ADA                     u4217:
  3949  000ADA  2EE8               	decfsz	wreg,f,c
  3950  000ADC  D7FE               	bra	u4217
  3951  000ADE  2E3C               	decfsz	??_operation& (0+255),f,c
  3952  000AE0  D7FC               	bra	u4217
  3953  000AE2  F000               	nop	
  3954                           
  3955                           ;main.c: 609: printf(" OPERATION COMPLETE ");
  3956  000AE4  0E3D               	movlw	low STR_32
  3957  000AE6  6E20               	movwf	printf@f,c
  3958  000AE8  0EFE               	movlw	high STR_32
  3959  000AEA  6E21               	movwf	printf@f+1,c
  3960  000AEC  EC47  F007         	call	_printf	;wreg free
  3961                           
  3962                           ;main.c: 610: lcdInst(0x94);;
  3963  000AF0  0E94               	movlw	148
  3964  000AF2  ECB4  F00B         	call	_lcdInst
  3965                           
  3966                           ;main.c: 611: printf("  PRESS ANY KEY...  ");
  3967  000AF6  0E13               	movlw	low STR_33
  3968  000AF8  6E20               	movwf	printf@f,c
  3969  000AFA  0EFE               	movlw	high STR_33
  3970  000AFC  6E21               	movwf	printf@f+1,c
  3971  000AFE  EC47  F007         	call	_printf	;wreg free
  3972  000B02                     
  3973                           ;main.c: 615: continue;
  3974                           
  3975                           ;main.c: 614: while (PORTBbits.RB1 == 0) {
  3976  000B02  A281               	btfss	3969,1,c	;volatile
  3977  000B04  D7FE               	goto	l318
  3978                           
  3979                           ;main.c: 616: }
  3980                           ;main.c: 618: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3981  000B06  3881               	swapf	3969,w,c	;volatile
  3982  000B08  0B0F               	andlw	15
  3983  000B0A  0B0F               	andlw	15
  3984  000B0C  0100               	movlb	0	; () banked
  3985  000B0E  6F80               	movwf	operation@keypress_422& (0+255),b
  3986  000B10                     
  3987                           ; BSR set to: 0
  3988                           ;main.c: 621: continue;
  3989  000B10  B281               	btfsc	3969,1,c	;volatile
  3990  000B12  D7FE               	goto	l323
  3991                           
  3992                           ;main.c: 622: }
  3993                           ;main.c: 624: __nop();
  3994  000B14  F000               	nop	
  3995                           
  3996                           ;main.c: 627: }
  3997                           ;main.c: 629: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3998                           
  3999                           ;main.c: 626: break;
  4000  000B16  0E01               	movlw	1
  4001  000B18  ECB4  F00B         	call	_lcdInst
  4002  000B1C  0EC3               	movlw	195
  4003  000B1E  6E3C               	movwf	??_operation& (0+255),c
  4004  000B20  0ECD               	movlw	205
  4005  000B22                     u4227:
  4006  000B22  2EE8               	decfsz	wreg,f,c
  4007  000B24  D7FE               	bra	u4227
  4008  000B26  2E3C               	decfsz	??_operation& (0+255),f,c
  4009  000B28  D7FC               	bra	u4227
  4010  000B2A  F000               	nop	
  4011                           
  4012                           ;main.c: 630: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4013  000B2C  0E80               	movlw	128
  4014  000B2E  ECB4  F00B         	call	_lcdInst
  4015  000B32  0E41               	movlw	65
  4016  000B34  6E3C               	movwf	??_operation& (0+255),c
  4017  000B36  0EEE               	movlw	238
  4018  000B38                     u4237:
  4019  000B38  2EE8               	decfsz	wreg,f,c
  4020  000B3A  D7FE               	bra	u4237
  4021  000B3C  2E3C               	decfsz	??_operation& (0+255),f,c
  4022  000B3E  D7FC               	bra	u4237
  4023  000B40  D000               	nop2	
  4024                           
  4025                           ;main.c: 631: printf("Run %d", num_runs);
  4026  000B42  0EF7               	movlw	low STR_34
  4027  000B44  6E20               	movwf	printf@f,c
  4028  000B46  0EFF               	movlw	high STR_34
  4029  000B48  6E21               	movwf	printf@f+1,c
  4030  000B4A  C054  F022         	movff	_num_runs,?_printf+2
  4031  000B4E  C055  F023         	movff	_num_runs+1,?_printf+3
  4032  000B52  EC47  F007         	call	_printf	;wreg free
  4033                           
  4034                           ;main.c: 632: lcdInst(0xC0);;
  4035  000B56  0EC0               	movlw	192
  4036  000B58  ECB4  F00B         	call	_lcdInst
  4037                           
  4038                           ;main.c: 633: printf("Total time: %d s", total_time);
  4039  000B5C  0E32               	movlw	low STR_35
  4040  000B5E  6E20               	movwf	printf@f,c
  4041  000B60  0EFF               	movlw	high STR_35
  4042  000B62  6E21               	movwf	printf@f+1,c
  4043  000B64  C056  F022         	movff	_total_time,?_printf+2
  4044  000B68  6A23               	clrf	?_printf+3,c
  4045  000B6A  EC47  F007         	call	_printf	;wreg free
  4046                           
  4047                           ;main.c: 634: lcdInst(0xD4);;
  4048  000B6E  0ED4               	movlw	212
  4049  000B70  ECB4  F00B         	call	_lcdInst
  4050                           
  4051                           ;main.c: 635: printf("(# to continue...)");
  4052  000B74  0EA3               	movlw	low STR_36
  4053  000B76  6E20               	movwf	printf@f,c
  4054  000B78  0EFE               	movlw	high STR_36
  4055  000B7A  6E21               	movwf	printf@f+1,c
  4056  000B7C  EC47  F007         	call	_printf	;wreg free
  4057  000B80                     
  4058                           ;main.c: 639: continue;
  4059                           
  4060                           ;main.c: 638: while (PORTBbits.RB1 == 0) {
  4061  000B80  A281               	btfss	3969,1,c	;volatile
  4062  000B82  D7FE               	goto	l327
  4063                           
  4064                           ;main.c: 640: }
  4065                           ;main.c: 642: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4066  000B84  3881               	swapf	3969,w,c	;volatile
  4067  000B86  0B0F               	andlw	15
  4068  000B88  0B0F               	andlw	15
  4069  000B8A  0100               	movlb	0	; () banked
  4070  000B8C  6F8F               	movwf	operation@keypress_426& (0+255),b
  4071  000B8E                     
  4072                           ; BSR set to: 0
  4073                           ;main.c: 645: continue;
  4074  000B8E  B281               	btfsc	3969,1,c	;volatile
  4075  000B90  D7FE               	goto	l332
  4076                           
  4077                           ;main.c: 646: }
  4078                           ;main.c: 648: __nop();
  4079  000B92  F000               	nop	
  4080                           
  4081                           ;main.c: 650: if (keypress == 14) {
  4082  000B94  0E0E               	movlw	14
  4083  000B96  0100               	movlb	0	; () banked
  4084  000B98  198F               	xorwf	operation@keypress_426& (0+255),w,b
  4085  000B9A  A4D8               	btfss	status,2,c
  4086  000B9C  D7F1               	goto	l327
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;main.c: 652: }
  4090                           ;main.c: 653: }
  4091                           ;main.c: 655: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4092                           
  4093                           ; BSR set to: 0
  4094                           
  4095                           ; BSR set to: 0
  4096                           
  4097                           ; BSR set to: 0
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;main.c: 651: break;
  4101  000B9E  0E01               	movlw	1
  4102  000BA0  ECB4  F00B         	call	_lcdInst
  4103  000BA4  0EC3               	movlw	195
  4104  000BA6  6E3C               	movwf	??_operation& (0+255),c
  4105  000BA8  0ECD               	movlw	205
  4106  000BAA                     u4247:
  4107  000BAA  2EE8               	decfsz	wreg,f,c
  4108  000BAC  D7FE               	bra	u4247
  4109  000BAE  2E3C               	decfsz	??_operation& (0+255),f,c
  4110  000BB0  D7FC               	bra	u4247
  4111  000BB2  F000               	nop	
  4112                           
  4113                           ;main.c: 656: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4114  000BB4  0E80               	movlw	128
  4115  000BB6  ECB4  F00B         	call	_lcdInst
  4116  000BBA  0E41               	movlw	65
  4117  000BBC  6E3C               	movwf	??_operation& (0+255),c
  4118  000BBE  0EEE               	movlw	238
  4119  000BC0                     u4257:
  4120  000BC0  2EE8               	decfsz	wreg,f,c
  4121  000BC2  D7FE               	bra	u4257
  4122  000BC4  2E3C               	decfsz	??_operation& (0+255),f,c
  4123  000BC6  D7FC               	bra	u4257
  4124  000BC8  D000               	nop2	
  4125                           
  4126                           ;main.c: 657: printf("Run %d", num_runs);
  4127  000BCA  0EF7               	movlw	low STR_34
  4128  000BCC  6E20               	movwf	printf@f,c
  4129  000BCE  0EFF               	movlw	high STR_34
  4130  000BD0  6E21               	movwf	printf@f+1,c
  4131  000BD2  C054  F022         	movff	_num_runs,?_printf+2
  4132  000BD6  C055  F023         	movff	_num_runs+1,?_printf+3
  4133  000BDA  EC47  F007         	call	_printf	;wreg free
  4134                           
  4135                           ;main.c: 658: lcdInst(0xC0);;
  4136  000BDE  0EC0               	movlw	192
  4137  000BE0  ECB4  F00B         	call	_lcdInst
  4138                           
  4139                           ;main.c: 659: printf("Prescrip.: %dR %dF %dL", prescription[0], prescription[1], prescri
      +                          ption[2]);
  4140  000BE4  0E54               	movlw	low STR_38
  4141  000BE6  6E20               	movwf	printf@f,c
  4142  000BE8  0EFD               	movlw	high STR_38
  4143  000BEA  6E21               	movwf	printf@f+1,c
  4144  000BEC  C09F  F022         	movff	operation@prescription,?_printf+2
  4145  000BF0  C0A0  F023         	movff	operation@prescription+1,?_printf+3
  4146  000BF4  C0A1  F024         	movff	operation@prescription+2,?_printf+4
  4147  000BF8  C0A2  F025         	movff	operation@prescription+3,?_printf+5
  4148  000BFC  C0A3  F026         	movff	operation@prescription+4,?_printf+6
  4149  000C00  C0A4  F027         	movff	operation@prescription+5,?_printf+7
  4150  000C04  EC47  F007         	call	_printf	;wreg free
  4151                           
  4152                           ;main.c: 660: lcdInst(0xD4);;
  4153  000C08  0ED4               	movlw	212
  4154  000C0A  ECB4  F00B         	call	_lcdInst
  4155                           
  4156                           ;main.c: 661: printf("(# to continue...)");
  4157  000C0E  0EA3               	movlw	low STR_36
  4158  000C10  6E20               	movwf	printf@f,c
  4159  000C12  0EFE               	movlw	high STR_36
  4160  000C14  6E21               	movwf	printf@f+1,c
  4161  000C16  EC47  F007         	call	_printf	;wreg free
  4162  000C1A                     
  4163                           ;main.c: 665: continue;
  4164                           
  4165                           ;main.c: 664: while (PORTBbits.RB1 == 0) {
  4166  000C1A  A281               	btfss	3969,1,c	;volatile
  4167  000C1C  D7FE               	goto	l337
  4168                           
  4169                           ;main.c: 666: }
  4170                           ;main.c: 668: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4171  000C1E  3881               	swapf	3969,w,c	;volatile
  4172  000C20  0B0F               	andlw	15
  4173  000C22  0B0F               	andlw	15
  4174  000C24  0100               	movlb	0	; () banked
  4175  000C26  6F90               	movwf	operation@keypress_430& (0+255),b
  4176  000C28                     
  4177                           ; BSR set to: 0
  4178                           ;main.c: 671: continue;
  4179  000C28  B281               	btfsc	3969,1,c	;volatile
  4180  000C2A  D7FE               	goto	l342
  4181                           
  4182                           ;main.c: 672: }
  4183                           ;main.c: 674: __nop();
  4184  000C2C  F000               	nop	
  4185                           
  4186                           ;main.c: 676: if (keypress == 14) {
  4187  000C2E  0E0E               	movlw	14
  4188  000C30  0100               	movlb	0	; () banked
  4189  000C32  1990               	xorwf	operation@keypress_430& (0+255),w,b
  4190  000C34  A4D8               	btfss	status,2,c
  4191  000C36  D7F1               	goto	l337
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;main.c: 678: }
  4195                           ;main.c: 679: }
  4196                           ;main.c: 681: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4197                           
  4198                           ; BSR set to: 0
  4199                           
  4200                           ; BSR set to: 0
  4201                           
  4202                           ; BSR set to: 0
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;main.c: 677: break;
  4206  000C38  0E01               	movlw	1
  4207  000C3A  ECB4  F00B         	call	_lcdInst
  4208  000C3E  0EC3               	movlw	195
  4209  000C40  6E3C               	movwf	??_operation& (0+255),c
  4210  000C42  0ECD               	movlw	205
  4211  000C44                     u4267:
  4212  000C44  2EE8               	decfsz	wreg,f,c
  4213  000C46  D7FE               	bra	u4267
  4214  000C48  2E3C               	decfsz	??_operation& (0+255),f,c
  4215  000C4A  D7FC               	bra	u4267
  4216  000C4C  F000               	nop	
  4217                           
  4218                           ;main.c: 682: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4219  000C4E  0E80               	movlw	128
  4220  000C50  ECB4  F00B         	call	_lcdInst
  4221  000C54  0E41               	movlw	65
  4222  000C56  6E3C               	movwf	??_operation& (0+255),c
  4223  000C58  0EEE               	movlw	238
  4224  000C5A                     u4277:
  4225  000C5A  2EE8               	decfsz	wreg,f,c
  4226  000C5C  D7FE               	bra	u4277
  4227  000C5E  2E3C               	decfsz	??_operation& (0+255),f,c
  4228  000C60  D7FC               	bra	u4277
  4229  000C62  D000               	nop2	
  4230                           
  4231                           ;main.c: 683: printf("Run %d", num_runs);
  4232  000C64  0EF7               	movlw	low STR_34
  4233  000C66  6E20               	movwf	printf@f,c
  4234  000C68  0EFF               	movlw	high STR_34
  4235  000C6A  6E21               	movwf	printf@f+1,c
  4236  000C6C  C054  F022         	movff	_num_runs,?_printf+2
  4237  000C70  C055  F023         	movff	_num_runs+1,?_printf+3
  4238  000C74  EC47  F007         	call	_printf	;wreg free
  4239                           
  4240                           ;main.c: 684: lcdInst(0xC0);;
  4241  000C78  0EC0               	movlw	192
  4242  000C7A  ECB4  F00B         	call	_lcdInst
  4243                           
  4244                           ;main.c: 685: printf("Repetition:");
  4245  000C7E  0E9F               	movlw	low STR_41
  4246  000C80  6E20               	movwf	printf@f,c
  4247  000C82  0EFF               	movlw	high STR_41
  4248  000C84  6E21               	movwf	printf@f+1,c
  4249  000C86  EC47  F007         	call	_printf	;wreg free
  4250                           
  4251                           ;main.c: 686: lcdInst(0x94);;
  4252  000C8A  0E94               	movlw	148
  4253  000C8C  ECB4  F00B         	call	_lcdInst
  4254                           
  4255                           ;main.c: 687: switch (repetition) {
  4256  000C90  D01C               	goto	l347
  4257  000C92                     
  4258                           ;main.c: 689: printf("- Mornings");
  4259  000C92  0EC1               	movlw	low STR_23
  4260  000C94  6E20               	movwf	printf@f,c
  4261  000C96  0EFF               	movlw	high STR_23
  4262  000C98  6E21               	movwf	printf@f+1,c
  4263  000C9A  EC47  F007         	call	_printf	;wreg free
  4264                           
  4265                           ;main.c: 690: break;
  4266  000C9E  D023               	goto	l349
  4267  000CA0                     
  4268                           ;main.c: 692: printf("- Afternoons");
  4269  000CA0  0E79               	movlw	low STR_24
  4270  000CA2  6E20               	movwf	printf@f,c
  4271  000CA4  0EFF               	movlw	high STR_24
  4272  000CA6  6E21               	movwf	printf@f+1,c
  4273  000CA8  EC47  F007         	call	_printf	;wreg free
  4274                           
  4275                           ;main.c: 693: break;
  4276  000CAC  D01C               	goto	l349
  4277  000CAE                     
  4278                           ;main.c: 695: printf("- Morn. & Afternoon");
  4279  000CAE  0E8F               	movlw	low STR_25
  4280  000CB0  6E20               	movwf	printf@f,c
  4281  000CB2  0EFE               	movlw	high STR_25
  4282  000CB4  6E21               	movwf	printf@f+1,c
  4283  000CB6  EC47  F007         	call	_printf	;wreg free
  4284                           
  4285                           ;main.c: 696: break;
  4286  000CBA  D015               	goto	l349
  4287  000CBC                     
  4288                           ;main.c: 698: printf("- Alternating");
  4289  000CBC  0E51               	movlw	low STR_26
  4290  000CBE  6E20               	movwf	printf@f,c
  4291  000CC0  0EFF               	movlw	high STR_26
  4292  000CC2  6E21               	movwf	printf@f+1,c
  4293  000CC4  EC47  F007         	call	_printf	;wreg free
  4294                           
  4295                           ;main.c: 700: }
  4296                           
  4297                           ;main.c: 699: break;
  4298  000CC8  D00E               	goto	l349
  4299  000CCA                     l347:
  4300  000CCA  0100               	movlb	0	; () banked
  4301  000CCC  51A5               	movf	operation@repetition& (0+255),w,b
  4302                           
  4303                           ; Switch size 1, requested type "space"
  4304                           ; Number of cases is 4, Range of values is 0 to 3
  4305                           ; switch strategies available:
  4306                           ; Name         Instructions Cycles
  4307                           ; simple_byte           13     7 (average)
  4308                           ;	Chosen strategy is simple_byte
  4309  000CCE  0A00               	xorlw	0	; case 0
  4310  000CD0  B4D8               	btfsc	status,2,c
  4311  000CD2  D7DF               	goto	l348
  4312  000CD4  0A01               	xorlw	1	; case 1
  4313  000CD6  B4D8               	btfsc	status,2,c
  4314  000CD8  D7E3               	goto	l350
  4315  000CDA  0A03               	xorlw	3	; case 2
  4316  000CDC  B4D8               	btfsc	status,2,c
  4317  000CDE  D7EE               	goto	l352
  4318  000CE0  0A01               	xorlw	1	; case 3
  4319  000CE2  B4D8               	btfsc	status,2,c
  4320  000CE4  D7E4               	goto	l351
  4321  000CE6                     l349:
  4322                           
  4323                           ;main.c: 701: lcdInst(0xD4);;
  4324                           
  4325                           ; BSR set to: 0
  4326  000CE6  0ED4               	movlw	212
  4327  000CE8  ECB4  F00B         	call	_lcdInst
  4328                           
  4329                           ;main.c: 702: printf("(# to continue...)");
  4330  000CEC  0EA3               	movlw	low STR_36
  4331  000CEE  6E20               	movwf	printf@f,c
  4332  000CF0  0EFE               	movlw	high STR_36
  4333  000CF2  6E21               	movwf	printf@f+1,c
  4334  000CF4  EC47  F007         	call	_printf	;wreg free
  4335  000CF8                     
  4336                           ;main.c: 708: continue;
  4337                           
  4338                           ;main.c: 707: while (PORTBbits.RB1 == 0) {
  4339  000CF8  A281               	btfss	3969,1,c	;volatile
  4340  000CFA  D7FE               	goto	l353
  4341                           
  4342                           ;main.c: 709: }
  4343                           ;main.c: 711: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4344  000CFC  3881               	swapf	3969,w,c	;volatile
  4345  000CFE  0B0F               	andlw	15
  4346  000D00  0B0F               	andlw	15
  4347  000D02  0100               	movlb	0	; () banked
  4348  000D04  6F91               	movwf	operation@keypress_438& (0+255),b
  4349  000D06                     
  4350                           ; BSR set to: 0
  4351                           ;main.c: 714: continue;
  4352  000D06  B281               	btfsc	3969,1,c	;volatile
  4353  000D08  D7FE               	goto	l358
  4354                           
  4355                           ;main.c: 715: }
  4356                           ;main.c: 717: __nop();
  4357  000D0A  F000               	nop	
  4358                           
  4359                           ;main.c: 719: if (keypress == 14) {
  4360  000D0C  0E0E               	movlw	14
  4361  000D0E  0100               	movlb	0	; () banked
  4362  000D10  1991               	xorwf	operation@keypress_438& (0+255),w,b
  4363  000D12  A4D8               	btfss	status,2,c
  4364  000D14  D7F1               	goto	l353
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;main.c: 721: }
  4368                           ;main.c: 722: }
  4369                           ;main.c: 724: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4370                           
  4371                           ; BSR set to: 0
  4372                           
  4373                           ; BSR set to: 0
  4374                           
  4375                           ; BSR set to: 0
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;main.c: 720: break;
  4379  000D16  0E01               	movlw	1
  4380  000D18  ECB4  F00B         	call	_lcdInst
  4381  000D1C  0EC3               	movlw	195
  4382  000D1E  6E3C               	movwf	??_operation& (0+255),c
  4383  000D20  0ECD               	movlw	205
  4384  000D22                     u4287:
  4385  000D22  2EE8               	decfsz	wreg,f,c
  4386  000D24  D7FE               	bra	u4287
  4387  000D26  2E3C               	decfsz	??_operation& (0+255),f,c
  4388  000D28  D7FC               	bra	u4287
  4389  000D2A  F000               	nop	
  4390                           
  4391                           ;main.c: 725: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4392  000D2C  0E80               	movlw	128
  4393  000D2E  ECB4  F00B         	call	_lcdInst
  4394  000D32  0E41               	movlw	65
  4395  000D34  6E3C               	movwf	??_operation& (0+255),c
  4396  000D36  0EEE               	movlw	238
  4397  000D38                     u4297:
  4398  000D38  2EE8               	decfsz	wreg,f,c
  4399  000D3A  D7FE               	bra	u4297
  4400  000D3C  2E3C               	decfsz	??_operation& (0+255),f,c
  4401  000D3E  D7FC               	bra	u4297
  4402  000D40  D000               	nop2	
  4403                           
  4404                           ;main.c: 726: printf("Run %d", num_runs);
  4405  000D42  0EF7               	movlw	low STR_34
  4406  000D44  6E20               	movwf	printf@f,c
  4407  000D46  0EFF               	movlw	high STR_34
  4408  000D48  6E21               	movwf	printf@f+1,c
  4409  000D4A  C054  F022         	movff	_num_runs,?_printf+2
  4410  000D4E  C055  F023         	movff	_num_runs+1,?_printf+3
  4411  000D52  EC47  F007         	call	_printf	;wreg free
  4412                           
  4413                           ;main.c: 727: lcdInst(0xC0);;
  4414  000D56  0EC0               	movlw	192
  4415  000D58  ECB4  F00B         	call	_lcdInst
  4416                           
  4417                           ;main.c: 728: printf("Frequency:");
  4418  000D5C  0EAB               	movlw	low STR_48
  4419  000D5E  6E20               	movwf	printf@f,c
  4420  000D60  0EFF               	movlw	high STR_48
  4421  000D62  6E21               	movwf	printf@f+1,c
  4422  000D64  EC47  F007         	call	_printf	;wreg free
  4423                           
  4424                           ;main.c: 729: lcdInst(0x94);;
  4425  000D68  0E94               	movlw	148
  4426  000D6A  ECB4  F00B         	call	_lcdInst
  4427                           
  4428                           ;main.c: 730: switch (frequency) {
  4429  000D6E  D015               	goto	l363
  4430  000D70                     
  4431                           ;main.c: 732: printf("- Everyday");
  4432  000D70  0ECC               	movlw	low STR_27
  4433  000D72  6E20               	movwf	printf@f,c
  4434  000D74  0EFF               	movlw	high STR_27
  4435  000D76  6E21               	movwf	printf@f+1,c
  4436  000D78  EC47  F007         	call	_printf	;wreg free
  4437                           
  4438                           ;main.c: 733: break;
  4439  000D7C  D019               	goto	l365
  4440  000D7E                     
  4441                           ;main.c: 735: printf("- Alternate (Sun)");
  4442  000D7E  0EDB               	movlw	low STR_28
  4443  000D80  6E20               	movwf	printf@f,c
  4444  000D82  0EFE               	movlw	high STR_28
  4445  000D84  6E21               	movwf	printf@f+1,c
  4446  000D86  EC47  F007         	call	_printf	;wreg free
  4447                           
  4448                           ;main.c: 736: break;
  4449  000D8A  D012               	goto	l365
  4450  000D8C                     
  4451                           ;main.c: 738: printf("- Alternate (Mon)");
  4452  000D8C  0EC9               	movlw	low STR_29
  4453  000D8E  6E20               	movwf	printf@f,c
  4454  000D90  0EFE               	movlw	high STR_29
  4455  000D92  6E21               	movwf	printf@f+1,c
  4456  000D94  EC47  F007         	call	_printf	;wreg free
  4457                           
  4458                           ;main.c: 740: }
  4459                           
  4460                           ;main.c: 739: break;
  4461  000D98  D00B               	goto	l365
  4462  000D9A                     l363:
  4463  000D9A  0100               	movlb	0	; () banked
  4464  000D9C  5197               	movf	operation@frequency& (0+255),w,b
  4465                           
  4466                           ; Switch size 1, requested type "space"
  4467                           ; Number of cases is 3, Range of values is 0 to 2
  4468                           ; switch strategies available:
  4469                           ; Name         Instructions Cycles
  4470                           ; simple_byte           10     6 (average)
  4471                           ;	Chosen strategy is simple_byte
  4472  000D9E  0A00               	xorlw	0	; case 0
  4473  000DA0  B4D8               	btfsc	status,2,c
  4474  000DA2  D7E6               	goto	l364
  4475  000DA4  0A01               	xorlw	1	; case 1
  4476  000DA6  B4D8               	btfsc	status,2,c
  4477  000DA8  D7EA               	goto	l366
  4478  000DAA  0A03               	xorlw	3	; case 2
  4479  000DAC  B4D8               	btfsc	status,2,c
  4480  000DAE  D7EE               	goto	l367
  4481  000DB0                     l365:
  4482                           
  4483                           ;main.c: 741: lcdInst(0xD4);;
  4484                           
  4485                           ; BSR set to: 0
  4486  000DB0  0ED4               	movlw	212
  4487  000DB2  ECB4  F00B         	call	_lcdInst
  4488                           
  4489                           ;main.c: 742: printf("(# to continue...)");
  4490  000DB6  0EA3               	movlw	low STR_36
  4491  000DB8  6E20               	movwf	printf@f,c
  4492  000DBA  0EFE               	movlw	high STR_36
  4493  000DBC  6E21               	movwf	printf@f+1,c
  4494  000DBE  EC47  F007         	call	_printf	;wreg free
  4495  000DC2                     
  4496                           ;main.c: 748: continue;
  4497                           
  4498                           ;main.c: 747: while (PORTBbits.RB1 == 0) {
  4499  000DC2  A281               	btfss	3969,1,c	;volatile
  4500  000DC4  D7FE               	goto	l368
  4501                           
  4502                           ;main.c: 749: }
  4503                           ;main.c: 751: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4504  000DC6  3881               	swapf	3969,w,c	;volatile
  4505  000DC8  0B0F               	andlw	15
  4506  000DCA  0B0F               	andlw	15
  4507  000DCC  0100               	movlb	0	; () banked
  4508  000DCE  6F92               	movwf	operation@keypress_445& (0+255),b
  4509  000DD0                     
  4510                           ; BSR set to: 0
  4511                           ;main.c: 754: continue;
  4512  000DD0  B281               	btfsc	3969,1,c	;volatile
  4513  000DD2  D7FE               	goto	l373
  4514                           
  4515                           ;main.c: 755: }
  4516                           ;main.c: 757: __nop();
  4517  000DD4  F000               	nop	
  4518                           
  4519                           ;main.c: 759: if (keypress == 14) {
  4520  000DD6  0E0E               	movlw	14
  4521  000DD8  0100               	movlb	0	; () banked
  4522  000DDA  1992               	xorwf	operation@keypress_445& (0+255),w,b
  4523  000DDC  A4D8               	btfss	status,2,c
  4524  000DDE  D7F1               	goto	l368
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;main.c: 761: }
  4528                           ;main.c: 762: }
  4529                           ;main.c: 764: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4530                           
  4531                           ; BSR set to: 0
  4532                           
  4533                           ; BSR set to: 0
  4534                           
  4535                           ; BSR set to: 0
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;main.c: 760: break;
  4539  000DE0  0E01               	movlw	1
  4540  000DE2  ECB4  F00B         	call	_lcdInst
  4541  000DE6  0EC3               	movlw	195
  4542  000DE8  6E3C               	movwf	??_operation& (0+255),c
  4543  000DEA  0ECD               	movlw	205
  4544  000DEC                     u4307:
  4545  000DEC  2EE8               	decfsz	wreg,f,c
  4546  000DEE  D7FE               	bra	u4307
  4547  000DF0  2E3C               	decfsz	??_operation& (0+255),f,c
  4548  000DF2  D7FC               	bra	u4307
  4549  000DF4  F000               	nop	
  4550                           
  4551                           ;main.c: 765: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4552  000DF6  0E80               	movlw	128
  4553  000DF8  ECB4  F00B         	call	_lcdInst
  4554  000DFC  0E41               	movlw	65
  4555  000DFE  6E3C               	movwf	??_operation& (0+255),c
  4556  000E00  0EEE               	movlw	238
  4557  000E02                     u4317:
  4558  000E02  2EE8               	decfsz	wreg,f,c
  4559  000E04  D7FE               	bra	u4317
  4560  000E06  2E3C               	decfsz	??_operation& (0+255),f,c
  4561  000E08  D7FC               	bra	u4317
  4562  000E0A  D000               	nop2	
  4563                           
  4564                           ;main.c: 766: printf("Run %d ", num_runs);
  4565  000E0C  0ED7               	movlw	low STR_53
  4566  000E0E  6E20               	movwf	printf@f,c
  4567  000E10  0EFF               	movlw	high STR_53
  4568  000E12  6E21               	movwf	printf@f+1,c
  4569  000E14  C054  F022         	movff	_num_runs,?_printf+2
  4570  000E18  C055  F023         	movff	_num_runs+1,?_printf+3
  4571  000E1C  EC47  F007         	call	_printf	;wreg free
  4572                           
  4573                           ;main.c: 767: lcdInst(0xC0);;
  4574  000E20  0EC0               	movlw	192
  4575  000E22  ECB4  F00B         	call	_lcdInst
  4576                           
  4577                           ;main.c: 768: printf("Pills Remaining:");
  4578  000E26  0E10               	movlw	low STR_54
  4579  000E28  6E20               	movwf	printf@f,c
  4580  000E2A  0EFF               	movlw	high STR_54
  4581  000E2C  6E21               	movwf	printf@f+1,c
  4582  000E2E  EC47  F007         	call	_printf	;wreg free
  4583                           
  4584                           ;main.c: 769: lcdInst(0x94);;
  4585  000E32  0E94               	movlw	148
  4586  000E34  ECB4  F00B         	call	_lcdInst
  4587                           
  4588                           ;main.c: 770: printf("R: %d F: %d L: %d", 0, 0, 0);
  4589  000E38  0EED               	movlw	low STR_55
  4590  000E3A  6E20               	movwf	printf@f,c
  4591  000E3C  0EFE               	movlw	high STR_55
  4592  000E3E  6E21               	movwf	printf@f+1,c
  4593  000E40  0E00               	movlw	0
  4594  000E42  6E23               	movwf	?_printf+3,c
  4595  000E44  0E00               	movlw	0
  4596  000E46  6E22               	movwf	?_printf+2,c
  4597  000E48  0E00               	movlw	0
  4598  000E4A  6E25               	movwf	?_printf+5,c
  4599  000E4C  0E00               	movlw	0
  4600  000E4E  6E24               	movwf	?_printf+4,c
  4601  000E50  0E00               	movlw	0
  4602  000E52  6E27               	movwf	?_printf+7,c
  4603  000E54  0E00               	movlw	0
  4604  000E56  6E26               	movwf	?_printf+6,c
  4605  000E58  EC47  F007         	call	_printf	;wreg free
  4606                           
  4607                           ;main.c: 771: lcdInst(0xD4);;
  4608  000E5C  0ED4               	movlw	212
  4609  000E5E  ECB4  F00B         	call	_lcdInst
  4610                           
  4611                           ;main.c: 772: printf("(# to continue...)");
  4612  000E62  0EA3               	movlw	low STR_36
  4613  000E64  6E20               	movwf	printf@f,c
  4614  000E66  0EFE               	movlw	high STR_36
  4615  000E68  6E21               	movwf	printf@f+1,c
  4616  000E6A  EC47  F007         	call	_printf	;wreg free
  4617  000E6E                     
  4618                           ;main.c: 776: continue;
  4619                           
  4620                           ;main.c: 775: while (PORTBbits.RB1 == 0) {
  4621  000E6E  A281               	btfss	3969,1,c	;volatile
  4622  000E70  D7FE               	goto	l378
  4623                           
  4624                           ;main.c: 777: }
  4625                           ;main.c: 779: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4626  000E72  3881               	swapf	3969,w,c	;volatile
  4627  000E74  0B0F               	andlw	15
  4628  000E76  0B0F               	andlw	15
  4629  000E78  0100               	movlb	0	; () banked
  4630  000E7A  6F93               	movwf	operation@keypress_450& (0+255),b
  4631  000E7C                     
  4632                           ; BSR set to: 0
  4633                           ;main.c: 782: continue;
  4634  000E7C  B281               	btfsc	3969,1,c	;volatile
  4635  000E7E  D7FE               	goto	l383
  4636                           
  4637                           ;main.c: 783: }
  4638                           ;main.c: 785: __nop();
  4639  000E80  F000               	nop	
  4640                           
  4641                           ;main.c: 787: if (keypress == 14) {
  4642  000E82  0E0E               	movlw	14
  4643  000E84  0100               	movlb	0	; () banked
  4644  000E86  1993               	xorwf	operation@keypress_450& (0+255),w,b
  4645  000E88  B4D8               	btfsc	status,2,c
  4646  000E8A  0012               	return	
  4647  000E8C  D7F0               	goto	l378
  4648  000E8E                     __end_of_operation:
  4649                           	opt stack 0
  4650                           tblptru	equ	0xFF8
  4651                           tblptrh	equ	0xFF7
  4652                           tblptrl	equ	0xFF6
  4653                           tablat	equ	0xFF5
  4654                           prodh	equ	0xFF4
  4655                           prodl	equ	0xFF3
  4656                           intcon	equ	0xFF2
  4657                           intcon3	equ	0xFF0
  4658                           postinc0	equ	0xFEE
  4659                           wreg	equ	0xFE8
  4660                           postdec1	equ	0xFE5
  4661                           plusw1	equ	0xFE3
  4662                           fsr1l	equ	0xFE1
  4663                           indf2	equ	0xFDF
  4664                           postinc2	equ	0xFDE
  4665                           postdec2	equ	0xFDD
  4666                           plusw2	equ	0xFDB
  4667                           fsr2h	equ	0xFDA
  4668                           fsr2l	equ	0xFD9
  4669                           status	equ	0xFD8
  4670                           
  4671 ;; *************** function _printf *****************
  4672 ;; Defined at:
  4673 ;;		line 464 in file "/opt/microchip/xc8/v1.45/sources/common/doprnt.c"
  4674 ;; Parameters:    Size  Location     Type
  4675 ;;  f               2   31[COMRAM] PTR const unsigned char 
  4676 ;;		 -> STR_56(19), STR_55(18), STR_54(17), STR_53(8), 
  4677 ;;		 -> STR_52(19), STR_51(18), STR_50(18), STR_49(11), 
  4678 ;;		 -> STR_48(11), STR_47(7), STR_46(19), STR_45(14), 
  4679 ;;		 -> STR_44(20), STR_43(13), STR_42(11), STR_41(12), 
  4680 ;;		 -> STR_40(7), STR_39(19), STR_38(23), STR_37(7), 
  4681 ;;		 -> STR_36(19), STR_35(17), STR_34(7), STR_33(21), 
  4682 ;;		 -> STR_32(21), STR_31(21), STR_30(21), STR_29(18), 
  4683 ;;		 -> STR_28(18), STR_27(11), STR_26(14), STR_25(20), 
  4684 ;;		 -> STR_24(13), STR_23(11), STR_22(14), STR_21(19), 
  4685 ;;		 -> STR_20(20), STR_19(20), STR_18(13), STR_17(12), 
  4686 ;;		 -> STR_16(21), STR_15(13), STR_14(11), STR_13(13), 
  4687 ;;		 -> STR_12(21), STR_11(21), STR_10(8), STR_9(8), 
  4688 ;;		 -> STR_8(8), STR_7(17), STR_6(21), STR_5(21), 
  4689 ;;		 -> STR_4(21), STR_3(21), STR_2(21), STR_1(33), 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;  idx             1   49[COMRAM] unsigned char 
  4692 ;;  tmpval          4    0        struct .
  4693 ;;  cp              3    0        PTR const unsigned char 
  4694 ;;  width           2   56[COMRAM] int 
  4695 ;;  val             2   53[COMRAM] unsigned int 
  4696 ;;  ap              2   50[COMRAM] PTR void [1]
  4697 ;;		 -> ?_printf(2), 
  4698 ;;  len             2    0        unsigned int 
  4699 ;;  c               1   58[COMRAM] char 
  4700 ;;  flag            1   55[COMRAM] unsigned char 
  4701 ;;  prec            1   52[COMRAM] char 
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  2   31[COMRAM] int 
  4704 ;; Registers used:
  4705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4711 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;Total ram usage:       28 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; Hardware stack levels required when called:    3
  4718 ;; This function calls:
  4719 ;;		___lwdiv
  4720 ;;		___lwmod
  4721 ;;		___wmul
  4722 ;;		_isdigit
  4723 ;;		_putch
  4724 ;; This function is called by:
  4725 ;;		_main
  4726 ;;		_operation
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text2
  4731  000E8E                     __ptext2:
  4732                           	opt stack 0
  4733  000E8E                     _printf:
  4734                           	opt stack 27
  4735                           
  4736                           ;doprnt.c: 466: va_list ap;
  4737                           ;doprnt.c: 499: signed char c;
  4738                           ;doprnt.c: 501: int width;
  4739                           ;doprnt.c: 506: signed char prec;
  4740                           ;doprnt.c: 508: unsigned char flag;
  4741                           ;doprnt.c: 523: union {
  4742                           ;doprnt.c: 524: unsigned long vd;
  4743                           ;doprnt.c: 525: double integ;
  4744                           ;doprnt.c: 526: } tmpval;
  4745                           ;doprnt.c: 528: unsigned int val;
  4746                           ;doprnt.c: 529: unsigned len;
  4747                           ;doprnt.c: 530: const char * cp;
  4748                           ;doprnt.c: 533: *ap = __va_start();
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;incstack = 0
  4752  000E8E  0E22               	movlw	low (?_printf+2)
  4753  000E90  6E33               	movwf	printf@ap,c
  4754  000E92  0E00               	movlw	high (?_printf+2)
  4755  000E94  6E34               	movwf	printf@ap+1,c
  4756                           
  4757                           ;doprnt.c: 536: while(c = *f++) {
  4758  000E96  D174               	goto	u3070
  4759  000E98                     
  4760                           ;doprnt.c: 538: if(c != '%')
  4761  000E98  0E25               	movlw	37
  4762  000E9A  183B               	xorwf	printf@c,w,c
  4763  000E9C  B4D8               	btfsc	status,2,c
  4764  000E9E  D004               	goto	l463
  4765                           
  4766                           ;doprnt.c: 540: {
  4767                           ;doprnt.c: 541: (putch(c) );
  4768  000EA0  503B               	movf	printf@c,w,c
  4769  000EA2  ECAA  F00B         	call	_putch
  4770                           
  4771                           ;doprnt.c: 542: continue;
  4772  000EA6  D16C               	goto	u3070
  4773  000EA8                     l463:
  4774                           
  4775                           ;doprnt.c: 543: }
  4776                           ;doprnt.c: 546: width = 0;
  4777  000EA8  0E00               	movlw	0
  4778  000EAA  6E3A               	movwf	printf@width+1,c
  4779  000EAC  0E00               	movlw	0
  4780  000EAE  6E39               	movwf	printf@width,c
  4781                           
  4782                           ;doprnt.c: 548: flag = 0;
  4783  000EB0  0E00               	movlw	0
  4784  000EB2  6E38               	movwf	printf@flag,c
  4785                           
  4786                           ;doprnt.c: 551: switch(*f) {
  4787                           
  4788                           ;doprnt.c: 550: for(;;) {
  4789  000EB4  D003               	goto	l465
  4790  000EB6                     
  4791                           ;doprnt.c: 580: flag |= 0x04;
  4792  000EB6  8438               	bsf	printf@flag,2,c
  4793                           
  4794                           ;doprnt.c: 581: f++;
  4795  000EB8  4A20               	infsnz	printf@f,f,c
  4796  000EBA  2A21               	incf	printf@f+1,f,c
  4797  000EBC                     l465:
  4798  000EBC  C020  FFF6         	movff	printf@f,tblptrl
  4799  000EC0  C021  FFF7         	movff	printf@f+1,tblptrh
  4800  000EC4                     	if	0	;tblptru may be non-zero
  4801  000EC4                     	endif
  4802  000EC4                     	if	0	;tblptru may be non-zero
  4803  000EC4                     	endif
  4804  000EC4  0008               	tblrd		*
  4805  000EC6  50F5               	movf	tablat,w,c
  4806                           
  4807                           ; Switch size 1, requested type "space"
  4808                           ; Number of cases is 1, Range of values is 48 to 48
  4809                           ; switch strategies available:
  4810                           ; Name         Instructions Cycles
  4811                           ; simple_byte            4     3 (average)
  4812                           ;	Chosen strategy is simple_byte
  4813  000EC8  0A30               	xorlw	48	; case 48
  4814  000ECA  B4D8               	btfsc	status,2,c
  4815  000ECC  D7F4               	goto	l466
  4816                           
  4817                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4818                           
  4819                           ;doprnt.c: 586: }
  4820                           
  4821                           ;doprnt.c: 585: break;
  4822  000ECE  C020  FFF6         	movff	printf@f,tblptrl
  4823  000ED2  C021  FFF7         	movff	printf@f+1,tblptrh
  4824  000ED6                     	if	0	;tblptru may be non-zero
  4825  000ED6                     	endif
  4826  000ED6                     	if	0	;tblptru may be non-zero
  4827  000ED6                     	endif
  4828  000ED6  0008               	tblrd		*
  4829  000ED8  50F5               	movf	tablat,w,c
  4830  000EDA  EC8D  F00B         	call	_isdigit
  4831  000EDE  A0D8               	btfss	status,0,c
  4832  000EE0  D035               	goto	l473
  4833                           
  4834                           ;doprnt.c: 598: width = 0;
  4835  000EE2  0E00               	movlw	0
  4836  000EE4  6E3A               	movwf	printf@width+1,c
  4837  000EE6  0E00               	movlw	0
  4838  000EE8  6E39               	movwf	printf@width,c
  4839  000EEA                     
  4840                           ;doprnt.c: 600: width *= 10;
  4841  000EEA  C039  F014         	movff	printf@width,___wmul@multiplier
  4842  000EEE  C03A  F015         	movff	printf@width+1,___wmul@multiplier+1
  4843  000EF2  0E00               	movlw	0
  4844  000EF4  6E17               	movwf	___wmul@multiplicand+1,c
  4845  000EF6  0E0A               	movlw	10
  4846  000EF8  6E16               	movwf	___wmul@multiplicand,c
  4847  000EFA  EC68  F00B         	call	___wmul	;wreg free
  4848  000EFE  C014  F039         	movff	?___wmul,printf@width
  4849  000F02  C015  F03A         	movff	?___wmul+1,printf@width+1
  4850                           
  4851                           ;doprnt.c: 601: width += *f++ - '0';
  4852  000F06  0ED0               	movlw	208
  4853  000F08  6E2E               	movwf	??_printf& (0+255),c
  4854  000F0A  0EFF               	movlw	255
  4855  000F0C  6E2F               	movwf	(??_printf+1)& (0+255),c
  4856  000F0E  C020  FFF6         	movff	printf@f,tblptrl
  4857  000F12  C021  FFF7         	movff	printf@f+1,tblptrh
  4858  000F16                     	if	0	;tblptru may be non-zero
  4859  000F16                     	endif
  4860  000F16                     	if	0	;tblptru may be non-zero
  4861  000F16                     	endif
  4862  000F16  0008               	tblrd		*
  4863  000F18  50F5               	movf	tablat,w,c
  4864  000F1A  6E30               	movwf	(??_printf+2)& (0+255),c
  4865  000F1C  6A31               	clrf	(??_printf+3)& (0+255),c
  4866  000F1E  502E               	movf	??_printf,w,c
  4867  000F20  2630               	addwf	??_printf+2,f,c
  4868  000F22  502F               	movf	??_printf+1,w,c
  4869  000F24  2231               	addwfc	??_printf+3,f,c
  4870  000F26  5030               	movf	??_printf+2,w,c
  4871  000F28  2639               	addwf	printf@width,f,c
  4872  000F2A  5031               	movf	??_printf+3,w,c
  4873  000F2C  223A               	addwfc	printf@width+1,f,c
  4874  000F2E  4A20               	infsnz	printf@f,f,c
  4875  000F30  2A21               	incf	printf@f+1,f,c
  4876                           
  4877                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4878  000F32  C020  FFF6         	movff	printf@f,tblptrl
  4879  000F36  C021  FFF7         	movff	printf@f+1,tblptrh
  4880  000F3A                     	if	0	;tblptru may be non-zero
  4881  000F3A                     	endif
  4882  000F3A                     	if	0	;tblptru may be non-zero
  4883  000F3A                     	endif
  4884  000F3A  0008               	tblrd		*
  4885  000F3C  50F5               	movf	tablat,w,c
  4886  000F3E  EC8D  F00B         	call	_isdigit
  4887  000F42  A0D8               	btfss	status,0,c
  4888  000F44  D003               	goto	l473
  4889  000F46  D7D1               	goto	l471
  4890  000F48                     
  4891                           ;doprnt.c: 721: flag |= 0x80;
  4892  000F48  8E38               	bsf	printf@flag,7,c
  4893                           
  4894                           ;doprnt.c: 723: break;
  4895  000F4A  D017               	goto	l478
  4896  000F4C                     l473:
  4897  000F4C  C020  FFF6         	movff	printf@f,tblptrl
  4898  000F50  C021  FFF7         	movff	printf@f+1,tblptrh
  4899  000F54  4A20               	infsnz	printf@f,f,c
  4900  000F56  2A21               	incf	printf@f+1,f,c
  4901  000F58                     	if	0	;tblptru may be non-zero
  4902  000F58                     	endif
  4903  000F58                     	if	0	;tblptru may be non-zero
  4904  000F58                     	endif
  4905  000F58  0008               	tblrd		*
  4906  000F5A  CFF5 F03B          	movff	tablat,printf@c
  4907  000F5E  503B               	movf	printf@c,w,c
  4908                           
  4909                           ; Switch size 1, requested type "space"
  4910                           ; Number of cases is 4, Range of values is 0 to 120
  4911                           ; switch strategies available:
  4912                           ; Name         Instructions Cycles
  4913                           ; simple_byte           13     7 (average)
  4914                           ;	Chosen strategy is simple_byte
  4915  000F60  0A00               	xorlw	0	; case 0
  4916  000F62  B4D8               	btfsc	status,2,c
  4917  000F64  0012               	return	
  4918  000F66  0A64               	xorlw	100	; case 100
  4919  000F68  B4D8               	btfsc	status,2,c
  4920  000F6A  D007               	goto	l478
  4921  000F6C  0A0D               	xorlw	13	; case 105
  4922  000F6E  B4D8               	btfsc	status,2,c
  4923  000F70  D004               	goto	l478
  4924  000F72  0A11               	xorlw	17	; case 120
  4925  000F74  B4D8               	btfsc	status,2,c
  4926  000F76  D7E8               	goto	l479
  4927  000F78  D103               	goto	u3070
  4928  000F7A                     l478:
  4929                           
  4930                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4931  000F7A  BE38               	btfsc	printf@flag,7,c
  4932  000F7C  D015               	goto	l481
  4933                           
  4934                           ;doprnt.c: 1253: {
  4935                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4936  000F7E  C033  FFD9         	movff	printf@ap,fsr2l
  4937  000F82  C034  FFDA         	movff	printf@ap+1,fsr2h
  4938  000F86  CFDE F036          	movff	postinc2,printf@val
  4939  000F8A  CFDD F037          	movff	postdec2,printf@val+1
  4940  000F8E  0E02               	movlw	2
  4941  000F90  2633               	addwf	printf@ap,f,c
  4942  000F92  0E00               	movlw	0
  4943  000F94  2234               	addwfc	printf@ap+1,f,c
  4944                           
  4945                           ;doprnt.c: 1261: if((int)val < 0) {
  4946  000F96  AE37               	btfss	printf@val+1,7,c
  4947  000F98  D044               	goto	l484
  4948                           
  4949                           ;doprnt.c: 1262: flag |= 0x03;
  4950  000F9A  0E03               	movlw	3
  4951  000F9C  1238               	iorwf	printf@flag,f,c
  4952                           
  4953                           ;doprnt.c: 1263: val = -val;
  4954  000F9E  6C36               	negf	printf@val,c
  4955  000FA0  1E37               	comf	printf@val+1,f,c
  4956  000FA2  B0D8               	btfsc	status,0,c
  4957  000FA4  2A37               	incf	printf@val+1,f,c
  4958                           
  4959                           ;doprnt.c: 1264: }
  4960                           ;doprnt.c: 1266: }
  4961  000FA6  D03D               	goto	l484
  4962  000FA8                     l481:
  4963                           
  4964                           ;doprnt.c: 1268: else
  4965                           ;doprnt.c: 1273: {
  4966                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4967  000FA8  C033  FFD9         	movff	printf@ap,fsr2l
  4968  000FAC  C034  FFDA         	movff	printf@ap+1,fsr2h
  4969  000FB0  CFDE F036          	movff	postinc2,printf@val
  4970  000FB4  CFDD F037          	movff	postdec2,printf@val+1
  4971  000FB8  0E02               	movlw	2
  4972  000FBA  2633               	addwf	printf@ap,f,c
  4973  000FBC  0E00               	movlw	0
  4974  000FBE  2234               	addwfc	printf@ap+1,f,c
  4975                           
  4976                           ;doprnt.c: 1287: }
  4977                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4978  000FC0  D030               	goto	l484
  4979  000FC2                     
  4980                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4981  000FC2  0E01               	movlw	1
  4982  000FC4  6E3B               	movwf	printf@c,c
  4983  000FC6                     l3442:
  4984  000FC6  0E05               	movlw	5
  4985  000FC8  183B               	xorwf	printf@c,w,c
  4986  000FCA  B4D8               	btfsc	status,2,c
  4987  000FCC  D032               	goto	l489
  4988                           
  4989                           ;doprnt.c: 1306: if(val < dpowers[c])
  4990  000FCE  503B               	movf	printf@c,w,c
  4991  000FD0  0D02               	mullw	2
  4992  000FD2  0E14               	movlw	low _dpowers
  4993  000FD4  24F3               	addwf	prodl,w,c
  4994  000FD6  6EF6               	movwf	tblptrl,c
  4995  000FD8  0EFD               	movlw	high _dpowers
  4996  000FDA  20F4               	addwfc	prodh,w,c
  4997  000FDC  6EF7               	movwf	tblptrh,c
  4998  000FDE                     	if	0	;There are less than 3 active tblptr bytes
  4999  000FDE                     	endif
  5000  000FDE  0009               	tblrd		*+
  5001  000FE0  50F5               	movf	tablat,w,c
  5002  000FE2  5C36               	subwf	printf@val,w,c
  5003  000FE4  0009               	tblrd		*+
  5004  000FE6  50F5               	movf	tablat,w,c
  5005  000FE8  5837               	subwfb	printf@val+1,w,c
  5006  000FEA  A0D8               	btfss	status,0,c
  5007  000FEC  D022               	goto	l489
  5008                           
  5009                           ;doprnt.c: 1307: break;
  5010  000FEE  2A3B               	incf	printf@c,f,c
  5011  000FF0  D7EA               	goto	l3442
  5012  000FF2                     
  5013                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5014  000FF2  0E01               	movlw	1
  5015  000FF4  6E3B               	movwf	printf@c,c
  5016  000FF6                     l3456:
  5017  000FF6  0E04               	movlw	4
  5018  000FF8  183B               	xorwf	printf@c,w,c
  5019  000FFA  B4D8               	btfsc	status,2,c
  5020  000FFC  D01A               	goto	l489
  5021                           
  5022                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5023  000FFE  503B               	movf	printf@c,w,c
  5024  001000  0D02               	mullw	2
  5025  001002  0E1E               	movlw	low _hexpowers
  5026  001004  24F3               	addwf	prodl,w,c
  5027  001006  6EF6               	movwf	tblptrl,c
  5028  001008  0EFD               	movlw	high _hexpowers
  5029  00100A  20F4               	addwfc	prodh,w,c
  5030  00100C  6EF7               	movwf	tblptrh,c
  5031  00100E                     	if	0	;There are less than 3 active tblptr bytes
  5032  00100E                     	endif
  5033  00100E  0009               	tblrd		*+
  5034  001010  50F5               	movf	tablat,w,c
  5035  001012  5C36               	subwf	printf@val,w,c
  5036  001014  0009               	tblrd		*+
  5037  001016  50F5               	movf	tablat,w,c
  5038  001018  5837               	subwfb	printf@val+1,w,c
  5039  00101A  A0D8               	btfss	status,0,c
  5040  00101C  D00A               	goto	l489
  5041                           
  5042                           ;doprnt.c: 1318: break;
  5043  00101E  2A3B               	incf	printf@c,f,c
  5044  001020  D7EA               	goto	l3456
  5045  001022                     l484:
  5046  001022  5038               	movf	printf@flag,w,c
  5047  001024  0B80               	andlw	128
  5048                           
  5049                           ; Switch size 1, requested type "space"
  5050                           ; Number of cases is 2, Range of values is 0 to 128
  5051                           ; switch strategies available:
  5052                           ; Name         Instructions Cycles
  5053                           ; simple_byte            7     4 (average)
  5054                           ;	Chosen strategy is simple_byte
  5055  001026  0A00               	xorlw	0	; case 0
  5056  001028  B4D8               	btfsc	status,2,c
  5057  00102A  D7CB               	goto	l485
  5058  00102C  0A80               	xorlw	128	; case 128
  5059  00102E  B4D8               	btfsc	status,2,c
  5060  001030  D7E0               	goto	l490
  5061  001032                     l489:
  5062                           
  5063                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5064  001032  5039               	movf	printf@width,w,c
  5065  001034  103A               	iorwf	printf@width+1,w,c
  5066  001036  B4D8               	btfsc	status,2,c
  5067  001038  D009               	goto	l494
  5068  00103A  C038  F02E         	movff	printf@flag,??_printf
  5069  00103E  0E03               	movlw	3
  5070  001040  162E               	andwf	??_printf,f,c
  5071  001042  B4D8               	btfsc	status,2,c
  5072  001044  D003               	goto	l494
  5073                           
  5074                           ;doprnt.c: 1346: width--;
  5075  001046  0639               	decf	printf@width,f,c
  5076  001048  A0D8               	btfss	status,0,c
  5077  00104A  063A               	decf	printf@width+1,f,c
  5078  00104C                     l494:
  5079                           
  5080                           ;doprnt.c: 1381: if(width > c)
  5081  00104C  0E80               	movlw	128
  5082  00104E  BE3B               	btfsc	printf@c,7,c
  5083  001050  0E7F               	movlw	127
  5084  001052  6E2E               	movwf	??_printf& (0+255),c
  5085  001054  5039               	movf	printf@width,w,c
  5086  001056  5C3B               	subwf	printf@c,w,c
  5087  001058  503A               	movf	printf@width+1,w,c
  5088  00105A  0A80               	xorlw	128
  5089  00105C  582E               	subwfb	??_printf& (0+255),w,c
  5090  00105E  B0D8               	btfsc	status,0,c
  5091  001060  D007               	goto	l495
  5092                           
  5093                           ;doprnt.c: 1382: width -= c;
  5094  001062  503B               	movf	printf@c,w,c
  5095  001064  5E39               	subwf	printf@width,f,c
  5096  001066  0E00               	movlw	0
  5097  001068  BE3B               	btfsc	printf@c,7,c
  5098  00106A  0EFF               	movlw	255
  5099  00106C  5A3A               	subwfb	printf@width+1,f,c
  5100  00106E  D004               	goto	l496
  5101  001070                     l495:
  5102                           
  5103                           ;doprnt.c: 1383: else
  5104                           ;doprnt.c: 1384: width = 0;
  5105  001070  0E00               	movlw	0
  5106  001072  6E3A               	movwf	printf@width+1,c
  5107  001074  0E00               	movlw	0
  5108  001076  6E39               	movwf	printf@width,c
  5109  001078                     l496:
  5110                           
  5111                           ;doprnt.c: 1387: if(flag & 0x04) {
  5112  001078  A438               	btfss	printf@flag,2,c
  5113  00107A  D014               	goto	l497
  5114                           
  5115                           ;doprnt.c: 1392: if(flag & 0x03)
  5116  00107C  C038  F02E         	movff	printf@flag,??_printf
  5117  001080  0E03               	movlw	3
  5118  001082  162E               	andwf	??_printf,f,c
  5119  001084  B4D8               	btfsc	status,2,c
  5120  001086  D003               	goto	l498
  5121                           
  5122                           ;doprnt.c: 1393: (putch('-') );
  5123  001088  0E2D               	movlw	45
  5124  00108A  ECAA  F00B         	call	_putch
  5125  00108E                     l498:
  5126                           
  5127                           ;doprnt.c: 1415: if(width)
  5128  00108E  5039               	movf	printf@width,w,c
  5129  001090  103A               	iorwf	printf@width+1,w,c
  5130  001092  B4D8               	btfsc	status,2,c
  5131  001094  D01E               	goto	l506
  5132                           
  5133                           ;doprnt.c: 1417: (putch('0') );
  5134                           
  5135                           ;doprnt.c: 1416: do
  5136  001096  0E30               	movlw	48
  5137  001098  ECAA  F00B         	call	_putch
  5138                           
  5139                           ;doprnt.c: 1418: while(--width);
  5140  00109C  0639               	decf	printf@width,f,c
  5141  00109E  A0D8               	btfss	status,0,c
  5142  0010A0  063A               	decf	printf@width+1,f,c
  5143  0010A2  D7F5               	goto	l498
  5144  0010A4                     l497:
  5145                           
  5146                           ;doprnt.c: 1422: {
  5147                           ;doprnt.c: 1424: if(width
  5148                           ;doprnt.c: 1428: )
  5149  0010A4  5039               	movf	printf@width,w,c
  5150  0010A6  103A               	iorwf	printf@width+1,w,c
  5151  0010A8  B4D8               	btfsc	status,2,c
  5152  0010AA  D00A               	goto	u3050
  5153  0010AC                     u3040:
  5154                           
  5155                           ;doprnt.c: 1430: (putch(' ') );
  5156                           
  5157                           ;doprnt.c: 1429: do
  5158  0010AC  0E20               	movlw	32
  5159  0010AE  ECAA  F00B         	call	_putch
  5160                           
  5161                           ;doprnt.c: 1431: while(--width);
  5162  0010B2  0639               	decf	printf@width,f,c
  5163  0010B4  A0D8               	btfss	status,0,c
  5164  0010B6  063A               	decf	printf@width+1,f,c
  5165  0010B8  5039               	movf	printf@width,w,c
  5166  0010BA  103A               	iorwf	printf@width+1,w,c
  5167  0010BC  A4D8               	btfss	status,2,c
  5168  0010BE  D7F6               	goto	u3040
  5169  0010C0                     u3050:
  5170                           
  5171                           ;doprnt.c: 1438: if(flag & 0x03)
  5172  0010C0  C038  F02E         	movff	printf@flag,??_printf
  5173  0010C4  0E03               	movlw	3
  5174  0010C6  162E               	andwf	??_printf,f,c
  5175  0010C8  B4D8               	btfsc	status,2,c
  5176  0010CA  D003               	goto	l506
  5177                           
  5178                           ;doprnt.c: 1439: (putch('-') );
  5179  0010CC  0E2D               	movlw	45
  5180  0010CE  ECAA  F00B         	call	_putch
  5181  0010D2                     l506:
  5182                           
  5183                           ;doprnt.c: 1469: }
  5184                           ;doprnt.c: 1472: prec = c;
  5185  0010D2  C03B  F035         	movff	printf@c,printf@prec
  5186                           
  5187                           ;doprnt.c: 1474: while(prec--) {
  5188  0010D6  D050               	goto	l507
  5189  0010D8                     
  5190                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5191  0010D8  5035               	movf	printf@prec,w,c
  5192  0010DA  0D02               	mullw	2
  5193  0010DC  0E14               	movlw	low _dpowers
  5194  0010DE  24F3               	addwf	prodl,w,c
  5195  0010E0  6EF6               	movwf	tblptrl,c
  5196  0010E2  0EFD               	movlw	high _dpowers
  5197  0010E4  20F4               	addwfc	prodh,w,c
  5198  0010E6  6EF7               	movwf	tblptrh,c
  5199  0010E8                     	if	0	;There are less than 3 active tblptr bytes
  5200  0010E8                     	endif
  5201  0010E8  0009               	tblrd		*+
  5202  0010EA  CFF5 F016          	movff	tablat,___lwdiv@divisor
  5203  0010EE  000A               	tblrd		*-
  5204  0010F0  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
  5205  0010F4  C036  F014         	movff	printf@val,___lwdiv@dividend
  5206  0010F8  C037  F015         	movff	printf@val+1,___lwdiv@dividend+1
  5207  0010FC  ECD6  F00A         	call	___lwdiv	;wreg free
  5208  001100  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
  5209  001104  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
  5210  001108  0E00               	movlw	0
  5211  00110A  6E1E               	movwf	___lwmod@divisor+1,c
  5212  00110C  0E0A               	movlw	10
  5213  00110E  6E1D               	movwf	___lwmod@divisor,c
  5214  001110  EC47  F00B         	call	___lwmod	;wreg free
  5215  001114  501B               	movf	?___lwmod,w,c
  5216  001116  0F30               	addlw	48
  5217  001118  6E3B               	movwf	printf@c,c
  5218                           
  5219                           ;doprnt.c: 1491: break;
  5220  00111A  D02B               	goto	l511
  5221  00111C                     
  5222                           ;doprnt.c: 1499: {
  5223                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5224  00111C  C036  F014         	movff	printf@val,___lwdiv@dividend
  5225  001120  C037  F015         	movff	printf@val+1,___lwdiv@dividend+1
  5226  001124  5035               	movf	printf@prec,w,c
  5227  001126  0D02               	mullw	2
  5228  001128  0E1E               	movlw	low _hexpowers
  5229  00112A  24F3               	addwf	prodl,w,c
  5230  00112C  6EF6               	movwf	tblptrl,c
  5231  00112E  0EFD               	movlw	high _hexpowers
  5232  001130  20F4               	addwfc	prodh,w,c
  5233  001132  6EF7               	movwf	tblptrh,c
  5234  001134                     	if	0	;There are less than 3 active tblptr bytes
  5235  001134                     	endif
  5236  001134  0009               	tblrd		*+
  5237  001136  CFF5 F016          	movff	tablat,___lwdiv@divisor
  5238  00113A  000A               	tblrd		*-
  5239  00113C  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
  5240  001140  ECD6  F00A         	call	___lwdiv	;wreg free
  5241  001144  5014               	movf	?___lwdiv,w,c
  5242  001146  0B0F               	andlw	15
  5243  001148  6E32               	movwf	printf@idx,c
  5244                           
  5245                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5246  00114A  5032               	movf	printf@idx,w,c
  5247  00114C  0D01               	mullw	1
  5248  00114E  0EFF               	movlw	low STR_57
  5249  001150  24F3               	addwf	prodl,w,c
  5250  001152  6EF6               	movwf	tblptrl,c
  5251  001154  0EFE               	movlw	high STR_57
  5252  001156  20F4               	addwfc	prodh,w,c
  5253  001158  6EF7               	movwf	tblptrh,c
  5254  00115A                     	if	0	;There are less than 3 active tblptr bytes
  5255  00115A                     	endif
  5256  00115A  0008               	tblrd		*
  5257  00115C  CFF5 F03B          	movff	tablat,printf@c
  5258                           
  5259                           ;doprnt.c: 1523: }
  5260                           
  5261                           ;doprnt.c: 1508: }
  5262                           ;doprnt.c: 1510: break;
  5263  001160  D008               	goto	l511
  5264  001162  5038               	movf	printf@flag,w,c
  5265  001164  0B80               	andlw	128
  5266                           
  5267                           ; Switch size 1, requested type "space"
  5268                           ; Number of cases is 2, Range of values is 0 to 128
  5269                           ; switch strategies available:
  5270                           ; Name         Instructions Cycles
  5271                           ; simple_byte            7     4 (average)
  5272                           ;	Chosen strategy is simple_byte
  5273  001166  0A00               	xorlw	0	; case 0
  5274  001168  B4D8               	btfsc	status,2,c
  5275  00116A  D7B6               	goto	l510
  5276  00116C  0A80               	xorlw	128	; case 128
  5277  00116E  B4D8               	btfsc	status,2,c
  5278  001170  D7D5               	goto	l512
  5279  001172                     l511:
  5280                           
  5281                           ;doprnt.c: 1524: (putch(c) );
  5282  001172  503B               	movf	printf@c,w,c
  5283  001174  ECAA  F00B         	call	_putch
  5284  001178                     l507:
  5285  001178  0635               	decf	printf@prec,f,c
  5286  00117A  2835               	incf	printf@prec,w,c
  5287  00117C  A4D8               	btfss	status,2,c
  5288  00117E  D7F1               	goto	l509
  5289  001180                     u3070:
  5290  001180  C020  FFF6         	movff	printf@f,tblptrl
  5291  001184  C021  FFF7         	movff	printf@f+1,tblptrh
  5292  001188  4A20               	infsnz	printf@f,f,c
  5293  00118A  2A21               	incf	printf@f+1,f,c
  5294  00118C                     	if	0	;tblptru may be non-zero
  5295  00118C                     	endif
  5296  00118C                     	if	0	;tblptru may be non-zero
  5297  00118C                     	endif
  5298  00118C  0008               	tblrd		*
  5299  00118E  CFF5 F03B          	movff	tablat,printf@c
  5300  001192  503B               	movf	printf@c,w,c
  5301  001194  B4D8               	btfsc	status,2,c
  5302  001196  0012               	return	
  5303  001198  D67F               	goto	l462
  5304  00119A                     __end_of_printf:
  5305                           	opt stack 0
  5306                           tblptru	equ	0xFF8
  5307                           tblptrh	equ	0xFF7
  5308                           tblptrl	equ	0xFF6
  5309                           tablat	equ	0xFF5
  5310                           prodh	equ	0xFF4
  5311                           prodl	equ	0xFF3
  5312                           intcon	equ	0xFF2
  5313                           intcon3	equ	0xFF0
  5314                           postinc0	equ	0xFEE
  5315                           wreg	equ	0xFE8
  5316                           postdec1	equ	0xFE5
  5317                           plusw1	equ	0xFE3
  5318                           fsr1l	equ	0xFE1
  5319                           indf2	equ	0xFDF
  5320                           postinc2	equ	0xFDE
  5321                           postdec2	equ	0xFDD
  5322                           plusw2	equ	0xFDB
  5323                           fsr2h	equ	0xFDA
  5324                           fsr2l	equ	0xFD9
  5325                           status	equ	0xFD8
  5326                           
  5327 ;; *************** function _putch *****************
  5328 ;; Defined at:
  5329 ;;		line 24 in file "lcd.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  data            1    wreg     unsigned char 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  data            1   21[COMRAM] unsigned char 
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  1    wreg      void 
  5336 ;; Registers used:
  5337 ;;		wreg, status,2, status,0, cstack
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5344 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;Total ram usage:        1 bytes
  5348 ;; Hardware stack levels used:    1
  5349 ;; Hardware stack levels required when called:    2
  5350 ;; This function calls:
  5351 ;;		_lcdNibble
  5352 ;; This function is called by:
  5353 ;;		_operation
  5354 ;;		_printf
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text3
  5359  001754                     __ptext3:
  5360                           	opt stack 0
  5361  001754                     _putch:
  5362                           	opt stack 27
  5363                           
  5364                           ;incstack = 0
  5365                           ;putch@data stored from wreg
  5366  001754  6E16               	movwf	putch@data,c
  5367                           
  5368                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5369  001756  848C               	bsf	3980,2,c	;volatile
  5370                           
  5371                           ;lcd.c: 33: lcdNibble(data);
  5372  001758  5016               	movf	putch@data,w,c
  5373  00175A  EC31  F00A         	call	_lcdNibble
  5374                           
  5375                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5376  00175E  0EC8               	movlw	200
  5377  001760                     u4327:
  5378  001760  D000               	nop2	
  5379  001762  2EE8               	decfsz	wreg,f,c
  5380  001764  D7FD               	bra	u4327
  5381  001766  0012               	return		;funcret
  5382  001768                     __end_of_putch:
  5383                           	opt stack 0
  5384                           tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           prodh	equ	0xFF4
  5389                           prodl	equ	0xFF3
  5390                           intcon	equ	0xFF2
  5391                           intcon3	equ	0xFF0
  5392                           postinc0	equ	0xFEE
  5393                           wreg	equ	0xFE8
  5394                           postdec1	equ	0xFE5
  5395                           plusw1	equ	0xFE3
  5396                           fsr1l	equ	0xFE1
  5397                           indf2	equ	0xFDF
  5398                           postinc2	equ	0xFDE
  5399                           postdec2	equ	0xFDD
  5400                           plusw2	equ	0xFDB
  5401                           fsr2h	equ	0xFDA
  5402                           fsr2l	equ	0xFD9
  5403                           status	equ	0xFD8
  5404                           
  5405 ;; *************** function _isdigit *****************
  5406 ;; Defined at:
  5407 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/isdigit.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  c               1    wreg     unsigned char 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;  c               1   21[COMRAM] unsigned char 
  5412 ;; Return value:  Size  Location     Type
  5413 ;;		None               void
  5414 ;; Registers used:
  5415 ;;		wreg, status,2, status,0
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;Total ram usage:        3 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    1
  5428 ;; This function calls:
  5429 ;;		Nothing
  5430 ;; This function is called by:
  5431 ;;		_printf
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           	psect	text4
  5436  00171A                     __ptext4:
  5437                           	opt stack 0
  5438  00171A                     _isdigit:
  5439                           	opt stack 28
  5440                           
  5441                           ;incstack = 0
  5442                           ;isdigit@c stored from wreg
  5443  00171A  6E16               	movwf	isdigit@c,c
  5444  00171C  0E00               	movlw	0
  5445  00171E  6E15               	movwf	_isdigit$834,c
  5446  001720  0E3A               	movlw	58
  5447  001722  6016               	cpfslt	isdigit@c,c
  5448  001724  D005               	goto	l845
  5449  001726  0E2F               	movlw	47
  5450  001728  6416               	cpfsgt	isdigit@c,c
  5451  00172A  D002               	goto	l845
  5452  00172C  0E01               	movlw	1
  5453  00172E  6E15               	movwf	_isdigit$834,c
  5454  001730                     l845:
  5455  001730  C015  F014         	movff	_isdigit$834,??_isdigit
  5456  001734  3014               	rrcf	??_isdigit,w,c
  5457  001736  0012               	return	
  5458  001738                     __end_of_isdigit:
  5459                           	opt stack 0
  5460                           tblptru	equ	0xFF8
  5461                           tblptrh	equ	0xFF7
  5462                           tblptrl	equ	0xFF6
  5463                           tablat	equ	0xFF5
  5464                           prodh	equ	0xFF4
  5465                           prodl	equ	0xFF3
  5466                           intcon	equ	0xFF2
  5467                           intcon3	equ	0xFF0
  5468                           postinc0	equ	0xFEE
  5469                           wreg	equ	0xFE8
  5470                           postdec1	equ	0xFE5
  5471                           plusw1	equ	0xFE3
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           plusw2	equ	0xFDB
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function ___wmul *****************
  5482 ;; Defined at:
  5483 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  multiplier      2   19[COMRAM] unsigned int 
  5486 ;;  multiplicand    2   21[COMRAM] unsigned int 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  product         2   23[COMRAM] unsigned int 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  2   19[COMRAM] unsigned int 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0, prodl, prodh
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5498 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;Total ram usage:        6 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    1
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		_operation
  5509 ;;		_printf
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           	psect	text5
  5514  0016D0                     __ptext5:
  5515                           	opt stack 0
  5516  0016D0                     ___wmul:
  5517                           	opt stack 28
  5518                           
  5519                           ;incstack = 0
  5520  0016D0  5014               	movf	___wmul@multiplier,w,c
  5521  0016D2  0216               	mulwf	___wmul@multiplicand,c
  5522  0016D4  CFF3 F018          	movff	prodl,___wmul@product
  5523  0016D8  CFF4 F019          	movff	prodh,___wmul@product+1
  5524  0016DC  5014               	movf	___wmul@multiplier,w,c
  5525  0016DE  0217               	mulwf	___wmul@multiplicand+1,c
  5526  0016E0  50F3               	movf	prodl,w,c
  5527  0016E2  2619               	addwf	___wmul@product+1,f,c
  5528  0016E4  5015               	movf	___wmul@multiplier+1,w,c
  5529  0016E6  0216               	mulwf	___wmul@multiplicand,c
  5530  0016E8  50F3               	movf	prodl,w,c
  5531  0016EA  2619               	addwf	___wmul@product+1,f,c
  5532  0016EC  C018  F014         	movff	___wmul@product,?___wmul
  5533  0016F0  C019  F015         	movff	___wmul@product+1,?___wmul+1
  5534  0016F4  0012               	return	
  5535  0016F6                     __end_of___wmul:
  5536                           	opt stack 0
  5537                           tblptru	equ	0xFF8
  5538                           tblptrh	equ	0xFF7
  5539                           tblptrl	equ	0xFF6
  5540                           tablat	equ	0xFF5
  5541                           prodh	equ	0xFF4
  5542                           prodl	equ	0xFF3
  5543                           intcon	equ	0xFF2
  5544                           intcon3	equ	0xFF0
  5545                           postinc0	equ	0xFEE
  5546                           wreg	equ	0xFE8
  5547                           postdec1	equ	0xFE5
  5548                           plusw1	equ	0xFE3
  5549                           fsr1l	equ	0xFE1
  5550                           indf2	equ	0xFDF
  5551                           postinc2	equ	0xFDE
  5552                           postdec2	equ	0xFDD
  5553                           plusw2	equ	0xFDB
  5554                           fsr2h	equ	0xFDA
  5555                           fsr2l	equ	0xFD9
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function ___lwmod *****************
  5559 ;; Defined at:
  5560 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  dividend        2   26[COMRAM] unsigned int 
  5563 ;;  divisor         2   28[COMRAM] unsigned int 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;  counter         1   30[COMRAM] unsigned char 
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  2   26[COMRAM] unsigned int 
  5568 ;; Registers used:
  5569 ;;		wreg, status,2, status,0
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5575 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5579 ;;Total ram usage:        5 bytes
  5580 ;; Hardware stack levels used:    1
  5581 ;; Hardware stack levels required when called:    1
  5582 ;; This function calls:
  5583 ;;		Nothing
  5584 ;; This function is called by:
  5585 ;;		_printf
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           	psect	text6
  5590  00168E                     __ptext6:
  5591                           	opt stack 0
  5592  00168E                     ___lwmod:
  5593                           	opt stack 28
  5594                           
  5595                           ;incstack = 0
  5596  00168E  501D               	movf	___lwmod@divisor,w,c
  5597  001690  101E               	iorwf	___lwmod@divisor+1,w,c
  5598  001692  B4D8               	btfsc	status,2,c
  5599  001694  D018               	goto	l939
  5600  001696  0E01               	movlw	1
  5601  001698  6E1F               	movwf	___lwmod@counter,c
  5602  00169A  D004               	goto	l934
  5603  00169C  90D8               	bcf	status,0,c
  5604  00169E  361D               	rlcf	___lwmod@divisor,f,c
  5605  0016A0  361E               	rlcf	___lwmod@divisor+1,f,c
  5606  0016A2  2A1F               	incf	___lwmod@counter,f,c
  5607  0016A4                     l934:
  5608  0016A4  AE1E               	btfss	___lwmod@divisor+1,7,c
  5609  0016A6  D7FA               	goto	l935
  5610  0016A8                     u2830:
  5611  0016A8  501D               	movf	___lwmod@divisor,w,c
  5612  0016AA  5C1B               	subwf	___lwmod@dividend,w,c
  5613  0016AC  501E               	movf	___lwmod@divisor+1,w,c
  5614  0016AE  581C               	subwfb	___lwmod@dividend+1,w,c
  5615  0016B0  A0D8               	btfss	status,0,c
  5616  0016B2  D004               	goto	l938
  5617  0016B4  501D               	movf	___lwmod@divisor,w,c
  5618  0016B6  5E1B               	subwf	___lwmod@dividend,f,c
  5619  0016B8  501E               	movf	___lwmod@divisor+1,w,c
  5620  0016BA  5A1C               	subwfb	___lwmod@dividend+1,f,c
  5621  0016BC                     l938:
  5622  0016BC  90D8               	bcf	status,0,c
  5623  0016BE  321E               	rrcf	___lwmod@divisor+1,f,c
  5624  0016C0  321D               	rrcf	___lwmod@divisor,f,c
  5625  0016C2  2E1F               	decfsz	___lwmod@counter,f,c
  5626  0016C4  D7F1               	goto	u2830
  5627  0016C6                     l939:
  5628  0016C6  C01B  F01B         	movff	___lwmod@dividend,?___lwmod
  5629  0016CA  C01C  F01C         	movff	___lwmod@dividend+1,?___lwmod+1
  5630  0016CE  0012               	return		;funcret
  5631  0016D0                     __end_of___lwmod:
  5632                           	opt stack 0
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           intcon	equ	0xFF2
  5640                           intcon3	equ	0xFF0
  5641                           postinc0	equ	0xFEE
  5642                           wreg	equ	0xFE8
  5643                           postdec1	equ	0xFE5
  5644                           plusw1	equ	0xFE3
  5645                           fsr1l	equ	0xFE1
  5646                           indf2	equ	0xFDF
  5647                           postinc2	equ	0xFDE
  5648                           postdec2	equ	0xFDD
  5649                           plusw2	equ	0xFDB
  5650                           fsr2h	equ	0xFDA
  5651                           fsr2l	equ	0xFD9
  5652                           status	equ	0xFD8
  5653                           
  5654 ;; *************** function ___lwdiv *****************
  5655 ;; Defined at:
  5656 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;  dividend        2   19[COMRAM] unsigned int 
  5659 ;;  divisor         2   21[COMRAM] unsigned int 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  quotient        2   24[COMRAM] unsigned int 
  5662 ;;  counter         1   23[COMRAM] unsigned char 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  2   19[COMRAM] unsigned int 
  5665 ;; Registers used:
  5666 ;;		wreg, status,2, status,0
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5672 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5676 ;;Total ram usage:        7 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    1
  5679 ;; This function calls:
  5680 ;;		Nothing
  5681 ;; This function is called by:
  5682 ;;		_printf
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text7
  5687  0015AC                     __ptext7:
  5688                           	opt stack 0
  5689  0015AC                     ___lwdiv:
  5690                           	opt stack 28
  5691                           
  5692                           ;incstack = 0
  5693  0015AC  0E00               	movlw	0
  5694  0015AE  6E1A               	movwf	___lwdiv@quotient+1,c
  5695  0015B0  0E00               	movlw	0
  5696  0015B2  6E19               	movwf	___lwdiv@quotient,c
  5697  0015B4  5016               	movf	___lwdiv@divisor,w,c
  5698  0015B6  1017               	iorwf	___lwdiv@divisor+1,w,c
  5699  0015B8  B4D8               	btfsc	status,2,c
  5700  0015BA  D01C               	goto	l929
  5701  0015BC  0E01               	movlw	1
  5702  0015BE  6E18               	movwf	___lwdiv@counter,c
  5703  0015C0  D004               	goto	l924
  5704  0015C2  90D8               	bcf	status,0,c
  5705  0015C4  3616               	rlcf	___lwdiv@divisor,f,c
  5706  0015C6  3617               	rlcf	___lwdiv@divisor+1,f,c
  5707  0015C8  2A18               	incf	___lwdiv@counter,f,c
  5708  0015CA                     l924:
  5709  0015CA  AE17               	btfss	___lwdiv@divisor+1,7,c
  5710  0015CC  D7FA               	goto	l925
  5711  0015CE                     u2800:
  5712  0015CE  90D8               	bcf	status,0,c
  5713  0015D0  3619               	rlcf	___lwdiv@quotient,f,c
  5714  0015D2  361A               	rlcf	___lwdiv@quotient+1,f,c
  5715  0015D4  5016               	movf	___lwdiv@divisor,w,c
  5716  0015D6  5C14               	subwf	___lwdiv@dividend,w,c
  5717  0015D8  5017               	movf	___lwdiv@divisor+1,w,c
  5718  0015DA  5815               	subwfb	___lwdiv@dividend+1,w,c
  5719  0015DC  A0D8               	btfss	status,0,c
  5720  0015DE  D005               	goto	l928
  5721  0015E0  5016               	movf	___lwdiv@divisor,w,c
  5722  0015E2  5E14               	subwf	___lwdiv@dividend,f,c
  5723  0015E4  5017               	movf	___lwdiv@divisor+1,w,c
  5724  0015E6  5A15               	subwfb	___lwdiv@dividend+1,f,c
  5725  0015E8  8019               	bsf	___lwdiv@quotient,0,c
  5726  0015EA                     l928:
  5727  0015EA  90D8               	bcf	status,0,c
  5728  0015EC  3217               	rrcf	___lwdiv@divisor+1,f,c
  5729  0015EE  3216               	rrcf	___lwdiv@divisor,f,c
  5730  0015F0  2E18               	decfsz	___lwdiv@counter,f,c
  5731  0015F2  D7ED               	goto	u2800
  5732  0015F4                     l929:
  5733  0015F4  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
  5734  0015F8  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5735  0015FC  0012               	return		;funcret
  5736  0015FE                     __end_of___lwdiv:
  5737                           	opt stack 0
  5738                           tblptru	equ	0xFF8
  5739                           tblptrh	equ	0xFF7
  5740                           tblptrl	equ	0xFF6
  5741                           tablat	equ	0xFF5
  5742                           prodh	equ	0xFF4
  5743                           prodl	equ	0xFF3
  5744                           intcon	equ	0xFF2
  5745                           intcon3	equ	0xFF0
  5746                           postinc0	equ	0xFEE
  5747                           wreg	equ	0xFE8
  5748                           postdec1	equ	0xFE5
  5749                           plusw1	equ	0xFE3
  5750                           fsr1l	equ	0xFE1
  5751                           indf2	equ	0xFDF
  5752                           postinc2	equ	0xFDE
  5753                           postdec2	equ	0xFDD
  5754                           plusw2	equ	0xFDB
  5755                           fsr2h	equ	0xFDA
  5756                           fsr2l	equ	0xFD9
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function _lcd_set_cursor *****************
  5760 ;; Defined at:
  5761 ;;		line 80 in file "lcd.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;  x               1    wreg     unsigned char 
  5764 ;;  y               1   25[COMRAM] unsigned char 
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;  x               1   27[COMRAM] unsigned char 
  5767 ;; Return value:  Size  Location     Type
  5768 ;;                  1    wreg      void 
  5769 ;; Registers used:
  5770 ;;		wreg, status,2, status,0, cstack
  5771 ;; Tracked objects:
  5772 ;;		On entry : 0/0
  5773 ;;		On exit  : 0/0
  5774 ;;		Unchanged: 0/0
  5775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5776 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5779 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;Total ram usage:        3 bytes
  5781 ;; Hardware stack levels used:    1
  5782 ;; Hardware stack levels required when called:    4
  5783 ;; This function calls:
  5784 ;;		_lcdInst
  5785 ;;		_lcd_shift_cursor
  5786 ;; This function is called by:
  5787 ;;		_operation
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text8
  5792  0014E0                     __ptext8:
  5793                           	opt stack 0
  5794  0014E0                     _lcd_set_cursor:
  5795                           	opt stack 25
  5796                           
  5797                           ;incstack = 0
  5798                           ;lcd_set_cursor@x stored from wreg
  5799  0014E0  6E1C               	movwf	lcd_set_cursor@x,c
  5800                           
  5801                           ;lcd.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  5802  0014E2  0E80               	movlw	128
  5803  0014E4  ECB4  F00B         	call	_lcdInst
  5804  0014E8  0E41               	movlw	65
  5805  0014EA  6E1B               	movwf	??_lcd_set_cursor& (0+255),c
  5806  0014EC  0EEE               	movlw	238
  5807  0014EE                     u4337:
  5808  0014EE  2EE8               	decfsz	wreg,f,c
  5809  0014F0  D7FE               	bra	u4337
  5810  0014F2  2E1B               	decfsz	??_lcd_set_cursor& (0+255),f,c
  5811  0014F4  D7FC               	bra	u4337
  5812  0014F6  D000               	nop2	
  5813                           
  5814                           ;lcd.c: 92: switch (y) {
  5815  0014F8  D018               	goto	l41
  5816  0014FA                     
  5817                           ;lcd.c: 94: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  5818  0014FA  0E80               	movlw	128
  5819  0014FC  ECB4  F00B         	call	_lcdInst
  5820  001500  0E41               	movlw	65
  5821  001502  6E1B               	movwf	??_lcd_set_cursor& (0+255),c
  5822  001504  0EEE               	movlw	238
  5823  001506                     u4347:
  5824  001506  2EE8               	decfsz	wreg,f,c
  5825  001508  D7FE               	bra	u4347
  5826  00150A  2E1B               	decfsz	??_lcd_set_cursor& (0+255),f,c
  5827  00150C  D7FC               	bra	u4347
  5828  00150E  D000               	nop2	
  5829                           
  5830                           ;lcd.c: 95: break;
  5831  001510  D019               	goto	l43
  5832  001512                     
  5833                           ;lcd.c: 97: lcdInst(0xC0);;
  5834  001512  0EC0               	movlw	192
  5835  001514  ECB4  F00B         	call	_lcdInst
  5836                           
  5837                           ;lcd.c: 98: break;
  5838  001518  D015               	goto	l43
  5839  00151A                     
  5840                           ;lcd.c: 100: lcdInst(0x94);;
  5841  00151A  0E94               	movlw	148
  5842  00151C  ECB4  F00B         	call	_lcdInst
  5843                           
  5844                           ;lcd.c: 101: break;
  5845  001520  D011               	goto	l43
  5846  001522                     
  5847                           ;lcd.c: 103: lcdInst(0xD4);;
  5848  001522  0ED4               	movlw	212
  5849  001524  ECB4  F00B         	call	_lcdInst
  5850                           
  5851                           ;lcd.c: 105: }
  5852                           
  5853                           ;lcd.c: 104: break;
  5854  001528  D00D               	goto	l43
  5855  00152A                     l41:
  5856  00152A  501A               	movf	lcd_set_cursor@y,w,c
  5857                           
  5858                           ; Switch size 1, requested type "space"
  5859                           ; Number of cases is 4, Range of values is 0 to 3
  5860                           ; switch strategies available:
  5861                           ; Name         Instructions Cycles
  5862                           ; simple_byte           13     7 (average)
  5863                           ;	Chosen strategy is simple_byte
  5864  00152C  0A00               	xorlw	0	; case 0
  5865  00152E  B4D8               	btfsc	status,2,c
  5866  001530  D7E4               	goto	l42
  5867  001532  0A01               	xorlw	1	; case 1
  5868  001534  B4D8               	btfsc	status,2,c
  5869  001536  D7ED               	goto	l44
  5870  001538  0A03               	xorlw	3	; case 2
  5871  00153A  B4D8               	btfsc	status,2,c
  5872  00153C  D7EE               	goto	l45
  5873  00153E  0A01               	xorlw	1	; case 3
  5874  001540  B4D8               	btfsc	status,2,c
  5875  001542  D7EF               	goto	l46
  5876  001544                     l43:
  5877                           
  5878                           ;lcd.c: 107: lcd_shift_cursor(x, 1);
  5879  001544  0E01               	movlw	1
  5880  001546  6E17               	movwf	lcd_shift_cursor@direction,c
  5881  001548  501C               	movf	lcd_set_cursor@x,w,c
  5882  00154A  EC9C  F00B         	call	_lcd_shift_cursor
  5883  00154E  0012               	return		;funcret
  5884  001550                     __end_of_lcd_set_cursor:
  5885                           	opt stack 0
  5886                           tblptru	equ	0xFF8
  5887                           tblptrh	equ	0xFF7
  5888                           tblptrl	equ	0xFF6
  5889                           tablat	equ	0xFF5
  5890                           prodh	equ	0xFF4
  5891                           prodl	equ	0xFF3
  5892                           intcon	equ	0xFF2
  5893                           intcon3	equ	0xFF0
  5894                           postinc0	equ	0xFEE
  5895                           wreg	equ	0xFE8
  5896                           postdec1	equ	0xFE5
  5897                           plusw1	equ	0xFE3
  5898                           fsr1l	equ	0xFE1
  5899                           indf2	equ	0xFDF
  5900                           postinc2	equ	0xFDE
  5901                           postdec2	equ	0xFDD
  5902                           plusw2	equ	0xFDB
  5903                           fsr2h	equ	0xFDA
  5904                           fsr2l	equ	0xFD9
  5905                           status	equ	0xFD8
  5906                           
  5907 ;; *************** function _lcd_shift_cursor *****************
  5908 ;; Defined at:
  5909 ;;		line 110 in file "lcd.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  numChars        1    wreg     unsigned char 
  5912 ;;  direction       1   22[COMRAM] unsigned char 
  5913 ;; Auto vars:     Size  Location     Type
  5914 ;;  numChars        1   23[COMRAM] unsigned char 
  5915 ;;  n               1   24[COMRAM] unsigned char 
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      void 
  5918 ;; Registers used:
  5919 ;;		wreg, status,2, status,0, cstack
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5925 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5928 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;Total ram usage:        3 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    3
  5932 ;; This function calls:
  5933 ;;		_lcdInst
  5934 ;; This function is called by:
  5935 ;;		_lcd_set_cursor
  5936 ;; This function uses a non-reentrant model
  5937 ;;
  5938                           
  5939                           	psect	text9
  5940  001738                     __ptext9:
  5941                           	opt stack 0
  5942  001738                     _lcd_shift_cursor:
  5943                           	opt stack 25
  5944                           
  5945                           ;incstack = 0
  5946                           ;lcd_shift_cursor@numChars stored from wreg
  5947  001738  6E18               	movwf	lcd_shift_cursor@numChars,c
  5948                           
  5949                           ;lcd.c: 122: for(unsigned char n = numChars; n > 0; n--){
  5950  00173A  C018  F019         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  5951  00173E                     l3278:
  5952  00173E  5019               	movf	lcd_shift_cursor@n,w,c
  5953  001740  B4D8               	btfsc	status,2,c
  5954  001742  0012               	return	
  5955                           
  5956                           ;lcd.c: 125: lcdInst((unsigned char)(0x10 | (direction << 2)));
  5957  001744  4417               	rlncf	lcd_shift_cursor@direction,w,c
  5958  001746  46E8               	rlncf	wreg,f,c
  5959  001748  0BFC               	andlw	252
  5960  00174A  0910               	iorlw	16
  5961  00174C  ECB4  F00B         	call	_lcdInst
  5962  001750  0619               	decf	lcd_shift_cursor@n,f,c
  5963  001752  D7F5               	goto	l3278
  5964  001754                     __end_of_lcd_shift_cursor:
  5965                           	opt stack 0
  5966                           tblptru	equ	0xFF8
  5967                           tblptrh	equ	0xFF7
  5968                           tblptrl	equ	0xFF6
  5969                           tablat	equ	0xFF5
  5970                           prodh	equ	0xFF4
  5971                           prodl	equ	0xFF3
  5972                           intcon	equ	0xFF2
  5973                           intcon3	equ	0xFF0
  5974                           postinc0	equ	0xFEE
  5975                           wreg	equ	0xFE8
  5976                           postdec1	equ	0xFE5
  5977                           plusw1	equ	0xFE3
  5978                           fsr1l	equ	0xFE1
  5979                           indf2	equ	0xFDF
  5980                           postinc2	equ	0xFDE
  5981                           postdec2	equ	0xFDD
  5982                           plusw2	equ	0xFDB
  5983                           fsr2h	equ	0xFDA
  5984                           fsr2l	equ	0xFD9
  5985                           status	equ	0xFD8
  5986                           
  5987 ;; *************** function _I2C_Master_Write *****************
  5988 ;; Defined at:
  5989 ;;		line 108 in file "I2C.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  byteToWrite     2   20[COMRAM] unsigned int 
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;		None
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  1    wreg      void 
  5996 ;; Registers used:
  5997 ;;		wreg, status,2, status,0, cstack
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6003 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;Total ram usage:        2 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    2
  6010 ;; This function calls:
  6011 ;;		_I2C_Master_Wait
  6012 ;; This function is called by:
  6013 ;;		_main
  6014 ;;		_operation
  6015 ;;		_RTC_setTime
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text10
  6020  00178E                     __ptext10:
  6021                           	opt stack 0
  6022  00178E                     _I2C_Master_Write:
  6023                           	opt stack 27
  6024                           
  6025                           ;I2C.c: 116: I2C_Master_Wait();
  6026                           
  6027                           ;incstack = 0
  6028  00178E  ECBE  F00B         	call	_I2C_Master_Wait	;wreg free
  6029                           
  6030                           ;I2C.c: 117: SSPBUF = byteToWrite;
  6031  001792  C015  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  6032  001796  0012               	return		;funcret
  6033  001798                     __end_of_I2C_Master_Write:
  6034                           	opt stack 0
  6035                           tblptru	equ	0xFF8
  6036                           tblptrh	equ	0xFF7
  6037                           tblptrl	equ	0xFF6
  6038                           tablat	equ	0xFF5
  6039                           prodh	equ	0xFF4
  6040                           prodl	equ	0xFF3
  6041                           intcon	equ	0xFF2
  6042                           intcon3	equ	0xFF0
  6043                           postinc0	equ	0xFEE
  6044                           wreg	equ	0xFE8
  6045                           postdec1	equ	0xFE5
  6046                           plusw1	equ	0xFE3
  6047                           fsr1l	equ	0xFE1
  6048                           indf2	equ	0xFDF
  6049                           postinc2	equ	0xFDE
  6050                           postdec2	equ	0xFDD
  6051                           plusw2	equ	0xFDB
  6052                           fsr2h	equ	0xFDA
  6053                           fsr2l	equ	0xFD9
  6054                           status	equ	0xFD8
  6055                           
  6056 ;; *************** function _I2C_Master_Stop *****************
  6057 ;; Defined at:
  6058 ;;		line 95 in file "I2C.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;		None
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      void 
  6065 ;; Registers used:
  6066 ;;		wreg, status,2, status,0, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;Total ram usage:        0 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    2
  6079 ;; This function calls:
  6080 ;;		_I2C_Master_Wait
  6081 ;; This function is called by:
  6082 ;;		_main
  6083 ;;		_operation
  6084 ;;		_RTC_setTime
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text11
  6089  001798                     __ptext11:
  6090                           	opt stack 0
  6091  001798                     _I2C_Master_Stop:
  6092                           	opt stack 27
  6093                           
  6094                           ;I2C.c: 104: I2C_Master_Wait();
  6095                           
  6096                           ;incstack = 0
  6097  001798  ECBE  F00B         	call	_I2C_Master_Wait	;wreg free
  6098                           
  6099                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  6100  00179C  84C5               	bsf	4037,2,c	;volatile
  6101  00179E  0012               	return		;funcret
  6102  0017A0                     __end_of_I2C_Master_Stop:
  6103                           	opt stack 0
  6104                           tblptru	equ	0xFF8
  6105                           tblptrh	equ	0xFF7
  6106                           tblptrl	equ	0xFF6
  6107                           tablat	equ	0xFF5
  6108                           prodh	equ	0xFF4
  6109                           prodl	equ	0xFF3
  6110                           intcon	equ	0xFF2
  6111                           intcon3	equ	0xFF0
  6112                           postinc0	equ	0xFEE
  6113                           wreg	equ	0xFE8
  6114                           postdec1	equ	0xFE5
  6115                           plusw1	equ	0xFE3
  6116                           fsr1l	equ	0xFE1
  6117                           indf2	equ	0xFDF
  6118                           postinc2	equ	0xFDE
  6119                           postdec2	equ	0xFDD
  6120                           plusw2	equ	0xFDB
  6121                           fsr2h	equ	0xFDA
  6122                           fsr2l	equ	0xFD9
  6123                           status	equ	0xFD8
  6124                           
  6125 ;; *************** function _I2C_Master_Start *****************
  6126 ;; Defined at:
  6127 ;;		line 69 in file "I2C.c"
  6128 ;; Parameters:    Size  Location     Type
  6129 ;;		None
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;		None
  6132 ;; Return value:  Size  Location     Type
  6133 ;;                  1    wreg      void 
  6134 ;; Registers used:
  6135 ;;		wreg, status,2, status,0, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;Total ram usage:        0 bytes
  6146 ;; Hardware stack levels used:    1
  6147 ;; Hardware stack levels required when called:    2
  6148 ;; This function calls:
  6149 ;;		_I2C_Master_Wait
  6150 ;; This function is called by:
  6151 ;;		_main
  6152 ;;		_operation
  6153 ;;		_RTC_setTime
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           	psect	text12
  6158  0017A0                     __ptext12:
  6159                           	opt stack 0
  6160  0017A0                     _I2C_Master_Start:
  6161                           	opt stack 27
  6162                           
  6163                           ;I2C.c: 78: I2C_Master_Wait();
  6164                           
  6165                           ;incstack = 0
  6166  0017A0  ECBE  F00B         	call	_I2C_Master_Wait	;wreg free
  6167                           
  6168                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  6169  0017A4  80C5               	bsf	4037,0,c	;volatile
  6170  0017A6  0012               	return		;funcret
  6171  0017A8                     __end_of_I2C_Master_Start:
  6172                           	opt stack 0
  6173                           tblptru	equ	0xFF8
  6174                           tblptrh	equ	0xFF7
  6175                           tblptrl	equ	0xFF6
  6176                           tablat	equ	0xFF5
  6177                           prodh	equ	0xFF4
  6178                           prodl	equ	0xFF3
  6179                           intcon	equ	0xFF2
  6180                           intcon3	equ	0xFF0
  6181                           postinc0	equ	0xFEE
  6182                           wreg	equ	0xFE8
  6183                           postdec1	equ	0xFE5
  6184                           plusw1	equ	0xFE3
  6185                           fsr1l	equ	0xFE1
  6186                           indf2	equ	0xFDF
  6187                           postinc2	equ	0xFDE
  6188                           postdec2	equ	0xFDD
  6189                           plusw2	equ	0xFDB
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _I2C_Master_Read *****************
  6195 ;; Defined at:
  6196 ;;		line 120 in file "I2C.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  ackBit          1    wreg     unsigned char 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  ackBit          1   20[COMRAM] unsigned char 
  6201 ;;  receivedByte    1   21[COMRAM] unsigned char 
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  1    wreg      unsigned char 
  6204 ;; Registers used:
  6205 ;;		wreg, status,2, status,0, cstack
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;Total ram usage:        2 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    2
  6218 ;; This function calls:
  6219 ;;		_I2C_Master_Wait
  6220 ;; This function is called by:
  6221 ;;		_main
  6222 ;;		_operation
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text13
  6227  0016F6                     __ptext13:
  6228                           	opt stack 0
  6229  0016F6                     _I2C_Master_Read:
  6230                           	opt stack 27
  6231                           
  6232                           ;incstack = 0
  6233                           ;I2C_Master_Read@ackBit stored from wreg
  6234  0016F6  6E15               	movwf	I2C_Master_Read@ackBit,c
  6235                           
  6236                           ;I2C.c: 130: unsigned char receivedByte;
  6237                           ;I2C.c: 132: I2C_Master_Wait();
  6238  0016F8  ECBE  F00B         	call	_I2C_Master_Wait	;wreg free
  6239                           
  6240                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  6241  0016FC  86C5               	bsf	4037,3,c	;volatile
  6242                           
  6243                           ;I2C.c: 135: I2C_Master_Wait();
  6244  0016FE  ECBE  F00B         	call	_I2C_Master_Wait	;wreg free
  6245                           
  6246                           ;I2C.c: 136: receivedByte = SSPBUF;
  6247  001702  CFC9 F016          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  6248                           
  6249                           ;I2C.c: 138: I2C_Master_Wait();
  6250  001706  ECBE  F00B         	call	_I2C_Master_Wait	;wreg free
  6251                           
  6252                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  6253  00170A  B015               	btfsc	I2C_Master_Read@ackBit,0,c
  6254  00170C  D002               	bra	u2855
  6255  00170E  9AC5               	bcf	4037,5,c	;volatile
  6256  001710  D001               	bra	u2856
  6257  001712                     u2855:
  6258  001712  8AC5               	bsf	4037,5,c	;volatile
  6259  001714                     u2856:
  6260                           
  6261                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  6262  001714  88C5               	bsf	4037,4,c	;volatile
  6263                           
  6264                           ;I2C.c: 142: return receivedByte;
  6265  001716  5016               	movf	I2C_Master_Read@receivedByte,w,c
  6266  001718  0012               	return	
  6267  00171A                     __end_of_I2C_Master_Read:
  6268                           	opt stack 0
  6269                           tblptru	equ	0xFF8
  6270                           tblptrh	equ	0xFF7
  6271                           tblptrl	equ	0xFF6
  6272                           tablat	equ	0xFF5
  6273                           prodh	equ	0xFF4
  6274                           prodl	equ	0xFF3
  6275                           intcon	equ	0xFF2
  6276                           intcon3	equ	0xFF0
  6277                           postinc0	equ	0xFEE
  6278                           wreg	equ	0xFE8
  6279                           postdec1	equ	0xFE5
  6280                           plusw1	equ	0xFE3
  6281                           fsr1l	equ	0xFE1
  6282                           indf2	equ	0xFDF
  6283                           postinc2	equ	0xFDE
  6284                           postdec2	equ	0xFDD
  6285                           plusw2	equ	0xFDB
  6286                           fsr2h	equ	0xFDA
  6287                           fsr2l	equ	0xFD9
  6288                           status	equ	0xFD8
  6289                           
  6290 ;; *************** function _I2C_Master_Wait *****************
  6291 ;; Defined at:
  6292 ;;		line 51 in file "I2C.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;		None
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;		None
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  1    wreg      void 
  6299 ;; Registers used:
  6300 ;;		wreg, status,2, status,0
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;Total ram usage:        1 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    1
  6313 ;; This function calls:
  6314 ;;		Nothing
  6315 ;; This function is called by:
  6316 ;;		_I2C_Master_Start
  6317 ;;		_I2C_Master_Stop
  6318 ;;		_I2C_Master_Write
  6319 ;;		_I2C_Master_Read
  6320 ;;		_I2C_Master_RepeatedStart
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           	psect	text14
  6325  00177C                     __ptext14:
  6326                           	opt stack 0
  6327  00177C                     _I2C_Master_Wait:
  6328                           	opt stack 27
  6329                           
  6330                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6331                           
  6332                           ;incstack = 0
  6333  00177C  B4C7               	btfsc	4039,2,c	;volatile
  6334  00177E  D7FE               	goto	_I2C_Master_Wait
  6335  001780  CFC5 F014          	movff	4037,??_I2C_Master_Wait	;volatile
  6336  001784  0E1F               	movlw	31
  6337  001786  1614               	andwf	??_I2C_Master_Wait,f,c
  6338  001788  B4D8               	btfsc	status,2,c
  6339  00178A  0012               	return	
  6340  00178C  D7F7               	goto	_I2C_Master_Wait
  6341  00178E                     __end_of_I2C_Master_Wait:
  6342                           	opt stack 0
  6343                           tblptru	equ	0xFF8
  6344                           tblptrh	equ	0xFF7
  6345                           tblptrl	equ	0xFF6
  6346                           tablat	equ	0xFF5
  6347                           prodh	equ	0xFF4
  6348                           prodl	equ	0xFF3
  6349                           intcon	equ	0xFF2
  6350                           intcon3	equ	0xFF0
  6351                           postinc0	equ	0xFEE
  6352                           wreg	equ	0xFE8
  6353                           postdec1	equ	0xFE5
  6354                           plusw1	equ	0xFE3
  6355                           fsr1l	equ	0xFE1
  6356                           indf2	equ	0xFDF
  6357                           postinc2	equ	0xFDE
  6358                           postdec2	equ	0xFDD
  6359                           plusw2	equ	0xFDB
  6360                           fsr2h	equ	0xFDA
  6361                           fsr2l	equ	0xFD9
  6362                           status	equ	0xFD8
  6363                           
  6364 ;; *************** function _logging *****************
  6365 ;; Defined at:
  6366 ;;		line 797 in file "main.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;		None
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;		None
  6371 ;; Return value:  Size  Location     Type
  6372 ;;                  1    wreg      void 
  6373 ;; Registers used:
  6374 ;;		None
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6384 ;;Total ram usage:        0 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:    1
  6387 ;; This function calls:
  6388 ;;		Nothing
  6389 ;; This function is called by:
  6390 ;;		_main
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text15
  6395  0017AE                     __ptext15:
  6396                           	opt stack 0
  6397  0017AE                     _logging:
  6398                           	opt stack 29
  6399                           
  6400                           ;main.c: 798: return;
  6401                           
  6402                           ;incstack = 0
  6403  0017AE  0012               	return		;funcret
  6404  0017B0                     __end_of_logging:
  6405                           	opt stack 0
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           intcon	equ	0xFF2
  6413                           intcon3	equ	0xFF0
  6414                           postinc0	equ	0xFEE
  6415                           wreg	equ	0xFE8
  6416                           postdec1	equ	0xFE5
  6417                           plusw1	equ	0xFE3
  6418                           fsr1l	equ	0xFE1
  6419                           indf2	equ	0xFDF
  6420                           postinc2	equ	0xFDE
  6421                           postdec2	equ	0xFDD
  6422                           plusw2	equ	0xFDB
  6423                           fsr2h	equ	0xFDA
  6424                           fsr2l	equ	0xFD9
  6425                           status	equ	0xFD8
  6426                           
  6427 ;; *************** function _initLCD *****************
  6428 ;; Defined at:
  6429 ;;		line 60 in file "lcd.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;		None
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;		None
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      void 
  6436 ;; Registers used:
  6437 ;;		wreg, status,2, status,0, cstack
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;Total ram usage:        1 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    3
  6450 ;; This function calls:
  6451 ;;		_lcdInst
  6452 ;; This function is called by:
  6453 ;;		_main
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	text16
  6458  0015FE                     __ptext16:
  6459                           	opt stack 0
  6460  0015FE                     _initLCD:
  6461                           	opt stack 27
  6462                           
  6463                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  6464                           
  6465                           ;incstack = 0
  6466  0015FE  0EC3               	movlw	195
  6467  001600  6E17               	movwf	??_initLCD& (0+255),c
  6468  001602  0ECD               	movlw	205
  6469  001604                     u4357:
  6470  001604  2EE8               	decfsz	wreg,f,c
  6471  001606  D7FE               	bra	u4357
  6472  001608  2E17               	decfsz	??_initLCD& (0+255),f,c
  6473  00160A  D7FC               	bra	u4357
  6474  00160C  F000               	nop	
  6475                           
  6476                           ;lcd.c: 69: lcdInst(0b00110011);
  6477  00160E  0E33               	movlw	51
  6478  001610  ECB4  F00B         	call	_lcdInst
  6479                           
  6480                           ;lcd.c: 70: lcdInst(0b00110010);
  6481  001614  0E32               	movlw	50
  6482  001616  ECB4  F00B         	call	_lcdInst
  6483                           
  6484                           ;lcd.c: 71: lcdInst(0b00101000);
  6485  00161A  0E28               	movlw	40
  6486  00161C  ECB4  F00B         	call	_lcdInst
  6487                           
  6488                           ;lcd.c: 72: lcdInst(0b00001111);
  6489  001620  0E0F               	movlw	15
  6490  001622  ECB4  F00B         	call	_lcdInst
  6491                           
  6492                           ;lcd.c: 73: lcdInst(0b00000110);
  6493  001626  0E06               	movlw	6
  6494  001628  ECB4  F00B         	call	_lcdInst
  6495                           
  6496                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6497  00162C  0E01               	movlw	1
  6498  00162E  ECB4  F00B         	call	_lcdInst
  6499  001632  0EC3               	movlw	195
  6500  001634  6E17               	movwf	??_initLCD& (0+255),c
  6501  001636  0ECD               	movlw	205
  6502  001638                     u4367:
  6503  001638  2EE8               	decfsz	wreg,f,c
  6504  00163A  D7FE               	bra	u4367
  6505  00163C  2E17               	decfsz	??_initLCD& (0+255),f,c
  6506  00163E  D7FC               	bra	u4367
  6507  001640  F000               	nop	
  6508                           
  6509                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  6510  001642  0E0F               	movlw	15
  6511  001644  ECB4  F00B         	call	_lcdInst
  6512  001648  0012               	return		;funcret
  6513  00164A                     __end_of_initLCD:
  6514                           	opt stack 0
  6515                           tblptru	equ	0xFF8
  6516                           tblptrh	equ	0xFF7
  6517                           tblptrl	equ	0xFF6
  6518                           tablat	equ	0xFF5
  6519                           prodh	equ	0xFF4
  6520                           prodl	equ	0xFF3
  6521                           intcon	equ	0xFF2
  6522                           intcon3	equ	0xFF0
  6523                           postinc0	equ	0xFEE
  6524                           wreg	equ	0xFE8
  6525                           postdec1	equ	0xFE5
  6526                           plusw1	equ	0xFE3
  6527                           fsr1l	equ	0xFE1
  6528                           indf2	equ	0xFDF
  6529                           postinc2	equ	0xFDE
  6530                           postdec2	equ	0xFDD
  6531                           plusw2	equ	0xFDB
  6532                           fsr2h	equ	0xFDA
  6533                           fsr2l	equ	0xFD9
  6534                           status	equ	0xFD8
  6535                           
  6536 ;; *************** function _lcdInst *****************
  6537 ;; Defined at:
  6538 ;;		line 11 in file "lcd.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;  data            1    wreg     unsigned char 
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;  data            1   21[COMRAM] unsigned char 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      void 
  6545 ;; Registers used:
  6546 ;;		wreg, status,2, status,0, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;Total ram usage:        1 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    2
  6559 ;; This function calls:
  6560 ;;		_lcdNibble
  6561 ;; This function is called by:
  6562 ;;		_initLCD
  6563 ;;		_lcd_set_cursor
  6564 ;;		_lcd_shift_cursor
  6565 ;;		_main
  6566 ;;		_operation
  6567 ;;		_lcd_shift_display
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text17
  6572  001768                     __ptext17:
  6573                           	opt stack 0
  6574  001768                     _lcdInst:
  6575                           	opt stack 25
  6576                           
  6577                           ;incstack = 0
  6578                           ;lcdInst@data stored from wreg
  6579  001768  6E16               	movwf	lcdInst@data,c
  6580                           
  6581                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  6582  00176A  948C               	bcf	3980,2,c	;volatile
  6583                           
  6584                           ;lcd.c: 20: lcdNibble(data);
  6585  00176C  5016               	movf	lcdInst@data,w,c
  6586  00176E  EC31  F00A         	call	_lcdNibble
  6587                           
  6588                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6589  001772  0EC8               	movlw	200
  6590  001774                     u4377:
  6591  001774  D000               	nop2	
  6592  001776  2EE8               	decfsz	wreg,f,c
  6593  001778  D7FD               	bra	u4377
  6594  00177A  0012               	return		;funcret
  6595  00177C                     __end_of_lcdInst:
  6596                           	opt stack 0
  6597                           tblptru	equ	0xFF8
  6598                           tblptrh	equ	0xFF7
  6599                           tblptrl	equ	0xFF6
  6600                           tablat	equ	0xFF5
  6601                           prodh	equ	0xFF4
  6602                           prodl	equ	0xFF3
  6603                           intcon	equ	0xFF2
  6604                           intcon3	equ	0xFF0
  6605                           postinc0	equ	0xFEE
  6606                           wreg	equ	0xFE8
  6607                           postdec1	equ	0xFE5
  6608                           plusw1	equ	0xFE3
  6609                           fsr1l	equ	0xFE1
  6610                           indf2	equ	0xFDF
  6611                           postinc2	equ	0xFDE
  6612                           postdec2	equ	0xFDD
  6613                           plusw2	equ	0xFDB
  6614                           fsr2h	equ	0xFDA
  6615                           fsr2l	equ	0xFD9
  6616                           status	equ	0xFD8
  6617                           
  6618 ;; *************** function _lcdNibble *****************
  6619 ;; Defined at:
  6620 ;;		line 37 in file "lcd.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;  data            1    wreg     unsigned char 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  data            1   20[COMRAM] unsigned char 
  6625 ;;  temp            1   19[COMRAM] unsigned char 
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  1    wreg      void 
  6628 ;; Registers used:
  6629 ;;		wreg, status,2, status,0
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6638 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6639 ;;Total ram usage:        2 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    1
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_lcdInst
  6646 ;;		_putch
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           	psect	text18
  6651  001462                     __ptext18:
  6652                           	opt stack 0
  6653  001462                     _lcdNibble:
  6654                           	opt stack 27
  6655                           
  6656                           ;incstack = 0
  6657                           ;lcdNibble@data stored from wreg
  6658  001462  6E15               	movwf	lcdNibble@data,c
  6659                           
  6660                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  6661  001464  5015               	movf	lcdNibble@data,w,c
  6662  001466  0BF0               	andlw	240
  6663  001468  6E14               	movwf	lcdNibble@temp,c
  6664                           
  6665                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  6666  00146A  508C               	movf	3980,w,c	;volatile
  6667  00146C  0B0F               	andlw	15
  6668  00146E  6E8C               	movwf	3980,c	;volatile
  6669                           
  6670                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  6671  001470  5014               	movf	lcdNibble@temp,w,c
  6672  001472  108C               	iorwf	3980,w,c	;volatile
  6673  001474  6E8C               	movwf	3980,c	;volatile
  6674                           
  6675                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6676  001476  0E00               	movlw	0
  6677  001478  BEF2               	btfsc	intcon,7,c	;volatile
  6678  00147A  0E01               	movlw	1
  6679  00147C  6E58               	movwf	_LCDinterruptState,c
  6680  00147E  9EF2               	bcf	intcon,7,c	;volatile
  6681  001480  868C               	bsf	3980,3,c	;volatile
  6682  001482  0E53               	movlw	83
  6683  001484                     u4387:
  6684  001484  2EE8               	decfsz	wreg,f,c
  6685  001486  D7FE               	bra	u4387
  6686  001488  F000               	nop	
  6687  00148A  968C               	bcf	3980,3,c	;volatile
  6688  00148C  0EC8               	movlw	200
  6689  00148E                     u4397:
  6690  00148E  D000               	nop2	
  6691  001490  2EE8               	decfsz	wreg,f,c
  6692  001492  D7FD               	bra	u4397
  6693  001494  B058               	btfsc	_LCDinterruptState,0,c
  6694  001496  D002               	bra	u2715
  6695  001498  9EF2               	bcf	intcon,7,c	;volatile
  6696  00149A  D001               	bra	u2716
  6697  00149C                     u2715:
  6698  00149C  8EF2               	bsf	intcon,7,c	;volatile
  6699  00149E                     u2716:
  6700                           
  6701                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  6702  00149E  3815               	swapf	lcdNibble@data,w,c
  6703  0014A0  0BF0               	andlw	240
  6704  0014A2  6E15               	movwf	lcdNibble@data,c
  6705                           
  6706                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  6707  0014A4  5015               	movf	lcdNibble@data,w,c
  6708  0014A6  0BF0               	andlw	240
  6709  0014A8  6E14               	movwf	lcdNibble@temp,c
  6710                           
  6711                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  6712  0014AA  508C               	movf	3980,w,c	;volatile
  6713  0014AC  0B0F               	andlw	15
  6714  0014AE  6E8C               	movwf	3980,c	;volatile
  6715                           
  6716                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  6717  0014B0  5014               	movf	lcdNibble@temp,w,c
  6718  0014B2  108C               	iorwf	3980,w,c	;volatile
  6719  0014B4  6E8C               	movwf	3980,c	;volatile
  6720                           
  6721                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  6722  0014B6  0E00               	movlw	0
  6723  0014B8  BEF2               	btfsc	intcon,7,c	;volatile
  6724  0014BA  0E01               	movlw	1
  6725  0014BC  6E58               	movwf	_LCDinterruptState,c
  6726  0014BE  9EF2               	bcf	intcon,7,c	;volatile
  6727  0014C0  868C               	bsf	3980,3,c	;volatile
  6728  0014C2  0E53               	movlw	83
  6729  0014C4                     u4407:
  6730  0014C4  2EE8               	decfsz	wreg,f,c
  6731  0014C6  D7FE               	bra	u4407
  6732  0014C8  F000               	nop	
  6733  0014CA  968C               	bcf	3980,3,c	;volatile
  6734  0014CC  0EC8               	movlw	200
  6735  0014CE                     u4417:
  6736  0014CE  D000               	nop2	
  6737  0014D0  2EE8               	decfsz	wreg,f,c
  6738  0014D2  D7FD               	bra	u4417
  6739  0014D4  B058               	btfsc	_LCDinterruptState,0,c
  6740  0014D6  D002               	bra	u2725
  6741  0014D8  9EF2               	bcf	intcon,7,c	;volatile
  6742  0014DA  D001               	bra	u2726
  6743  0014DC                     u2725:
  6744  0014DC  8EF2               	bsf	intcon,7,c	;volatile
  6745  0014DE                     u2726:
  6746  0014DE  0012               	return		;funcret
  6747  0014E0                     __end_of_lcdNibble:
  6748                           	opt stack 0
  6749                           tblptru	equ	0xFF8
  6750                           tblptrh	equ	0xFF7
  6751                           tblptrl	equ	0xFF6
  6752                           tablat	equ	0xFF5
  6753                           prodh	equ	0xFF4
  6754                           prodl	equ	0xFF3
  6755                           intcon	equ	0xFF2
  6756                           intcon3	equ	0xFF0
  6757                           postinc0	equ	0xFEE
  6758                           wreg	equ	0xFE8
  6759                           postdec1	equ	0xFE5
  6760                           plusw1	equ	0xFE3
  6761                           fsr1l	equ	0xFE1
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           plusw2	equ	0xFDB
  6766                           fsr2h	equ	0xFDA
  6767                           fsr2l	equ	0xFD9
  6768                           status	equ	0xFD8
  6769                           
  6770 ;; *************** function _I2C_Master_Init *****************
  6771 ;; Defined at:
  6772 ;;		line 14 in file "I2C.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  clockFreq       4   32[COMRAM] const unsigned long 
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, status,2, status,0, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6786 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;Total ram usage:        8 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:    2
  6793 ;; This function calls:
  6794 ;;		___lldiv
  6795 ;; This function is called by:
  6796 ;;		_main
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           	psect	text19
  6801  001550                     __ptext19:
  6802                           	opt stack 0
  6803  001550                     _I2C_Master_Init:
  6804                           	opt stack 28
  6805                           
  6806                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  6807                           
  6808                           ;incstack = 0
  6809  001550  9AC6               	bcf	4038,5,c	;volatile
  6810                           
  6811                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  6812  001552  8694               	bsf	3988,3,c	;volatile
  6813                           
  6814                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  6815  001554  8894               	bsf	3988,4,c	;volatile
  6816                           
  6817                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  6818  001556  0E80               	movlw	128
  6819  001558  6EC7               	movwf	4039,c	;volatile
  6820                           
  6821                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  6822  00155A  0E28               	movlw	40
  6823  00155C  6EC6               	movwf	4038,c	;volatile
  6824                           
  6825                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  6826  00155E  0E00               	movlw	0
  6827  001560  6EC5               	movwf	4037,c	;volatile
  6828                           
  6829                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  6830  001562  0E00               	movlw	0
  6831  001564  6E14               	movwf	___lldiv@dividend,c
  6832  001566  0E5A               	movlw	90
  6833  001568  6E15               	movwf	___lldiv@dividend+1,c
  6834  00156A  0E62               	movlw	98
  6835  00156C  6E16               	movwf	___lldiv@dividend+2,c
  6836  00156E  0E02               	movlw	2
  6837  001570  6E17               	movwf	___lldiv@dividend+3,c
  6838  001572  C021  F025         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  6839  001576  C022  F026         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  6840  00157A  C023  F027         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  6841  00157E  C024  F028         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  6842  001582  0E02               	movlw	2
  6843  001584                     u3125:
  6844  001584  90D8               	bcf	status,0,c
  6845  001586  3625               	rlcf	??_I2C_Master_Init,f,c
  6846  001588  3626               	rlcf	??_I2C_Master_Init+1,f,c
  6847  00158A  3627               	rlcf	??_I2C_Master_Init+2,f,c
  6848  00158C  3628               	rlcf	??_I2C_Master_Init+3,f,c
  6849  00158E  2EE8               	decfsz	wreg,f,c
  6850  001590  D7F9               	goto	u3125
  6851  001592  C025  F018         	movff	??_I2C_Master_Init,___lldiv@divisor
  6852  001596  C026  F019         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6853  00159A  C027  F01A         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6854  00159E  C028  F01B         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6855  0015A2  ECF0  F009         	call	___lldiv	;wreg free
  6856  0015A6  0414               	decf	?___lldiv,w,c
  6857  0015A8  6EC8               	movwf	4040,c	;volatile
  6858  0015AA  0012               	return		;funcret
  6859  0015AC                     __end_of_I2C_Master_Init:
  6860                           	opt stack 0
  6861                           tblptru	equ	0xFF8
  6862                           tblptrh	equ	0xFF7
  6863                           tblptrl	equ	0xFF6
  6864                           tablat	equ	0xFF5
  6865                           prodh	equ	0xFF4
  6866                           prodl	equ	0xFF3
  6867                           intcon	equ	0xFF2
  6868                           intcon3	equ	0xFF0
  6869                           postinc0	equ	0xFEE
  6870                           wreg	equ	0xFE8
  6871                           postdec1	equ	0xFE5
  6872                           plusw1	equ	0xFE3
  6873                           fsr1l	equ	0xFE1
  6874                           indf2	equ	0xFDF
  6875                           postinc2	equ	0xFDE
  6876                           postdec2	equ	0xFDD
  6877                           plusw2	equ	0xFDB
  6878                           fsr2h	equ	0xFDA
  6879                           fsr2l	equ	0xFD9
  6880                           status	equ	0xFD8
  6881                           
  6882 ;; *************** function ___lldiv *****************
  6883 ;; Defined at:
  6884 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lldiv.c"
  6885 ;; Parameters:    Size  Location     Type
  6886 ;;  dividend        4   19[COMRAM] unsigned long 
  6887 ;;  divisor         4   23[COMRAM] unsigned long 
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;  quotient        4   27[COMRAM] unsigned long 
  6890 ;;  counter         1   31[COMRAM] unsigned char 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  4   19[COMRAM] unsigned long 
  6893 ;; Registers used:
  6894 ;;		wreg, status,2, status,0
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6900 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;Total ram usage:       13 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    1
  6907 ;; This function calls:
  6908 ;;		Nothing
  6909 ;; This function is called by:
  6910 ;;		_I2C_Master_Init
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text20
  6915  0013E0                     __ptext20:
  6916                           	opt stack 0
  6917  0013E0                     ___lldiv:
  6918                           	opt stack 28
  6919                           
  6920                           ;incstack = 0
  6921  0013E0  0E00               	movlw	0
  6922  0013E2  6E1C               	movwf	___lldiv@quotient,c
  6923  0013E4  0E00               	movlw	0
  6924  0013E6  6E1D               	movwf	___lldiv@quotient+1,c
  6925  0013E8  0E00               	movlw	0
  6926  0013EA  6E1E               	movwf	___lldiv@quotient+2,c
  6927  0013EC  0E00               	movlw	0
  6928  0013EE  6E1F               	movwf	___lldiv@quotient+3,c
  6929  0013F0  5018               	movf	___lldiv@divisor,w,c
  6930  0013F2  1019               	iorwf	___lldiv@divisor+1,w,c
  6931  0013F4  101A               	iorwf	___lldiv@divisor+2,w,c
  6932  0013F6  101B               	iorwf	___lldiv@divisor+3,w,c
  6933  0013F8  B4D8               	btfsc	status,2,c
  6934  0013FA  D02A               	goto	l876
  6935  0013FC  0E01               	movlw	1
  6936  0013FE  6E20               	movwf	___lldiv@counter,c
  6937  001400  D006               	goto	l871
  6938  001402  90D8               	bcf	status,0,c
  6939  001404  3618               	rlcf	___lldiv@divisor,f,c
  6940  001406  3619               	rlcf	___lldiv@divisor+1,f,c
  6941  001408  361A               	rlcf	___lldiv@divisor+2,f,c
  6942  00140A  361B               	rlcf	___lldiv@divisor+3,f,c
  6943  00140C  2A20               	incf	___lldiv@counter,f,c
  6944  00140E                     l871:
  6945  00140E  AE1B               	btfss	___lldiv@divisor+3,7,c
  6946  001410  D7F8               	goto	l872
  6947  001412                     u3100:
  6948  001412  90D8               	bcf	status,0,c
  6949  001414  361C               	rlcf	___lldiv@quotient,f,c
  6950  001416  361D               	rlcf	___lldiv@quotient+1,f,c
  6951  001418  361E               	rlcf	___lldiv@quotient+2,f,c
  6952  00141A  361F               	rlcf	___lldiv@quotient+3,f,c
  6953  00141C  5018               	movf	___lldiv@divisor,w,c
  6954  00141E  5C14               	subwf	___lldiv@dividend,w,c
  6955  001420  5019               	movf	___lldiv@divisor+1,w,c
  6956  001422  5815               	subwfb	___lldiv@dividend+1,w,c
  6957  001424  501A               	movf	___lldiv@divisor+2,w,c
  6958  001426  5816               	subwfb	___lldiv@dividend+2,w,c
  6959  001428  501B               	movf	___lldiv@divisor+3,w,c
  6960  00142A  5817               	subwfb	___lldiv@dividend+3,w,c
  6961  00142C  A0D8               	btfss	status,0,c
  6962  00142E  D009               	goto	l875
  6963  001430  5018               	movf	___lldiv@divisor,w,c
  6964  001432  5E14               	subwf	___lldiv@dividend,f,c
  6965  001434  5019               	movf	___lldiv@divisor+1,w,c
  6966  001436  5A15               	subwfb	___lldiv@dividend+1,f,c
  6967  001438  501A               	movf	___lldiv@divisor+2,w,c
  6968  00143A  5A16               	subwfb	___lldiv@dividend+2,f,c
  6969  00143C  501B               	movf	___lldiv@divisor+3,w,c
  6970  00143E  5A17               	subwfb	___lldiv@dividend+3,f,c
  6971  001440  801C               	bsf	___lldiv@quotient,0,c
  6972  001442                     l875:
  6973  001442  90D8               	bcf	status,0,c
  6974  001444  321B               	rrcf	___lldiv@divisor+3,f,c
  6975  001446  321A               	rrcf	___lldiv@divisor+2,f,c
  6976  001448  3219               	rrcf	___lldiv@divisor+1,f,c
  6977  00144A  3218               	rrcf	___lldiv@divisor,f,c
  6978  00144C  2E20               	decfsz	___lldiv@counter,f,c
  6979  00144E  D7E1               	goto	u3100
  6980  001450                     l876:
  6981  001450  C01C  F014         	movff	___lldiv@quotient,?___lldiv
  6982  001454  C01D  F015         	movff	___lldiv@quotient+1,?___lldiv+1
  6983  001458  C01E  F016         	movff	___lldiv@quotient+2,?___lldiv+2
  6984  00145C  C01F  F017         	movff	___lldiv@quotient+3,?___lldiv+3
  6985  001460  0012               	return		;funcret
  6986  001462                     __end_of___lldiv:
  6987                           	opt stack 0
  6988                           tblptru	equ	0xFF8
  6989                           tblptrh	equ	0xFF7
  6990                           tblptrl	equ	0xFF6
  6991                           tablat	equ	0xFF5
  6992                           prodh	equ	0xFF4
  6993                           prodl	equ	0xFF3
  6994                           intcon	equ	0xFF2
  6995                           intcon3	equ	0xFF0
  6996                           postinc0	equ	0xFEE
  6997                           wreg	equ	0xFE8
  6998                           postdec1	equ	0xFE5
  6999                           plusw1	equ	0xFE3
  7000                           fsr1l	equ	0xFE1
  7001                           indf2	equ	0xFDF
  7002                           postinc2	equ	0xFDE
  7003                           postdec2	equ	0xFDD
  7004                           plusw2	equ	0xFDB
  7005                           fsr2h	equ	0xFDA
  7006                           fsr2l	equ	0xFD9
  7007                           status	equ	0xFD8
  7008                           
  7009 ;; *************** function _interruptHandler *****************
  7010 ;; Defined at:
  7011 ;;		line 814 in file "main.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;		None
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  keypress        1   18[COMRAM] unsigned char 
  7016 ;; Return value:  Size  Location     Type
  7017 ;;                  1    wreg      void 
  7018 ;; Registers used:
  7019 ;;		wreg, status,2, status,0
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7026 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7027 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;Total ram usage:       19 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; This function calls:
  7032 ;;		Nothing
  7033 ;; This function is called by:
  7034 ;;		Interrupt level 2
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           	psect	intcode
  7039  000008                     __pintcode:
  7040                           	opt stack 0
  7041  000008                     _interruptHandler:
  7042                           	opt stack 25
  7043                           
  7044                           ;incstack = 0
  7045  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7046  00000A  ED8B  F009         	call	int_func,f	;refresh shadow registers
  7047                           tblptru	equ	0xFF8
  7048                           tblptrh	equ	0xFF7
  7049                           tblptrl	equ	0xFF6
  7050                           tablat	equ	0xFF5
  7051                           prodh	equ	0xFF4
  7052                           prodl	equ	0xFF3
  7053                           intcon	equ	0xFF2
  7054                           intcon3	equ	0xFF0
  7055                           postinc0	equ	0xFEE
  7056                           wreg	equ	0xFE8
  7057                           postdec1	equ	0xFE5
  7058                           plusw1	equ	0xFE3
  7059                           fsr1l	equ	0xFE1
  7060                           indf2	equ	0xFDF
  7061                           postinc2	equ	0xFDE
  7062                           postdec2	equ	0xFDD
  7063                           plusw2	equ	0xFDB
  7064                           fsr2h	equ	0xFDA
  7065                           fsr2l	equ	0xFD9
  7066                           status	equ	0xFD8
  7067                           
  7068                           	psect	intcode_body
  7069  001316                     __pintcode_body:
  7070                           	opt stack 25
  7071  001316                     int_func:
  7072                           	opt stack 25
  7073  001316  0006               	pop		; remove dummy address from shadow register refresh
  7074  001318  CFFA F001          	movff	pclath,??_interruptHandler
  7075  00131C  CFFB F002          	movff	pclatu,??_interruptHandler+1
  7076  001320  CFE9 F003          	movff	fsr0l,??_interruptHandler+2
  7077  001324  CFEA F004          	movff	fsr0h,??_interruptHandler+3
  7078  001328  CFE1 F005          	movff	fsr1l,??_interruptHandler+4
  7079  00132C  CFE2 F006          	movff	fsr1h,??_interruptHandler+5
  7080  001330  CFD9 F007          	movff	fsr2l,??_interruptHandler+6
  7081  001334  CFDA F008          	movff	fsr2h,??_interruptHandler+7
  7082  001338  CFF3 F009          	movff	prodl,??_interruptHandler+8
  7083  00133C  CFF4 F00A          	movff	prodh,??_interruptHandler+9
  7084  001340  CFF6 F00B          	movff	tblptrl,??_interruptHandler+10
  7085  001344  CFF7 F00C          	movff	tblptrh,??_interruptHandler+11
  7086  001348  CFF8 F00D          	movff	tblptru,??_interruptHandler+12
  7087  00134C  CFF5 F00E          	movff	tablat,??_interruptHandler+13
  7088  001350  C059  F00F         	movff	btemp,??_interruptHandler+14
  7089  001354  C05A  F010         	movff	btemp+1,??_interruptHandler+15
  7090  001358  C05B  F011         	movff	btemp+2,??_interruptHandler+16
  7091  00135C  C05C  F012         	movff	btemp+3,??_interruptHandler+17
  7092                           
  7093                           ;main.c: 816: if (INT1IF) {
  7094  001360  A0F0               	btfss	intcon3,0,c	;volatile
  7095  001362  D018               	goto	i2l405
  7096                           
  7097                           ;main.c: 819: unsigned char keypress = (PORTB & 0xF0) >> 4;
  7098  001364  3881               	swapf	3969,w,c	;volatile
  7099  001366  0B0F               	andlw	15
  7100  001368  0B0F               	andlw	15
  7101  00136A  6E13               	movwf	interruptHandler@keypress,c
  7102                           
  7103                           ;main.c: 821: if (keypress == 12) {
  7104  00136C  0E0C               	movlw	12
  7105  00136E  1813               	xorwf	interruptHandler@keypress,w,c
  7106  001370  A4D8               	btfss	status,2,c
  7107  001372  D006               	goto	i2l402
  7108                           
  7109                           ;main.c: 822: begin_operation = 1;
  7110  001374  0E00               	movlw	0
  7111  001376  0100               	movlb	0	; () banked
  7112  001378  6FC6               	movwf	(_begin_operation+1)& (0+255),b
  7113  00137A  0E01               	movlw	1
  7114  00137C  6FC5               	movwf	_begin_operation& (0+255),b
  7115  00137E  D009               	goto	i2l3220
  7116  001380                     i2l402:
  7117                           
  7118                           ;main.c: 825: else if (keypress == 14) {
  7119                           
  7120                           ; BSR set to: 0
  7121  001380  0E0E               	movlw	14
  7122  001382  1813               	xorwf	interruptHandler@keypress,w,c
  7123  001384  A4D8               	btfss	status,2,c
  7124  001386  D005               	goto	i2l3220
  7125                           
  7126                           ;main.c: 826: begin_logging = 1;
  7127  001388  0E00               	movlw	0
  7128  00138A  0100               	movlb	0	; () banked
  7129  00138C  6FC4               	movwf	(_begin_logging+1)& (0+255),b
  7130  00138E  0E01               	movlw	1
  7131  001390  6FC3               	movwf	_begin_logging& (0+255),b
  7132  001392                     i2l3220:
  7133                           
  7134                           ;main.c: 829: else {
  7135                           ;main.c: 830: INT1IF = 0;
  7136                           
  7137                           ;main.c: 828: }
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;main.c: 827: INT1IF = 0;
  7141  001392  90F0               	bcf	intcon3,0,c	;volatile
  7142  001394                     i2l405:
  7143  001394  C012  F05C         	movff	??_interruptHandler+17,btemp+3
  7144  001398  C011  F05B         	movff	??_interruptHandler+16,btemp+2
  7145  00139C  C010  F05A         	movff	??_interruptHandler+15,btemp+1
  7146  0013A0  C00F  F059         	movff	??_interruptHandler+14,btemp
  7147  0013A4  C00E  FFF5         	movff	??_interruptHandler+13,tablat
  7148  0013A8  C00D  FFF8         	movff	??_interruptHandler+12,tblptru
  7149  0013AC  C00C  FFF7         	movff	??_interruptHandler+11,tblptrh
  7150  0013B0  C00B  FFF6         	movff	??_interruptHandler+10,tblptrl
  7151  0013B4  C00A  FFF4         	movff	??_interruptHandler+9,prodh
  7152  0013B8  C009  FFF3         	movff	??_interruptHandler+8,prodl
  7153  0013BC  C008  FFDA         	movff	??_interruptHandler+7,fsr2h
  7154  0013C0  C007  FFD9         	movff	??_interruptHandler+6,fsr2l
  7155  0013C4  C006  FFE2         	movff	??_interruptHandler+5,fsr1h
  7156  0013C8  C005  FFE1         	movff	??_interruptHandler+4,fsr1l
  7157  0013CC  C004  FFEA         	movff	??_interruptHandler+3,fsr0h
  7158  0013D0  C003  FFE9         	movff	??_interruptHandler+2,fsr0l
  7159  0013D4  C002  FFFB         	movff	??_interruptHandler+1,pclatu
  7160  0013D8  C001  FFFA         	movff	??_interruptHandler,pclath
  7161  0013DC  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7162  0013DE  0011               	retfie		f
  7163  0013E0                     __end_of_interruptHandler:
  7164                           	opt stack 0
  7165                           pclatu	equ	0xFFB
  7166                           pclath	equ	0xFFA
  7167                           tblptru	equ	0xFF8
  7168                           tblptrh	equ	0xFF7
  7169                           tblptrl	equ	0xFF6
  7170                           tablat	equ	0xFF5
  7171                           prodh	equ	0xFF4
  7172                           prodl	equ	0xFF3
  7173                           intcon	equ	0xFF2
  7174                           intcon3	equ	0xFF0
  7175                           postinc0	equ	0xFEE
  7176                           fsr0h	equ	0xFEA
  7177                           fsr0l	equ	0xFE9
  7178                           wreg	equ	0xFE8
  7179                           postdec1	equ	0xFE5
  7180                           plusw1	equ	0xFE3
  7181                           fsr1h	equ	0xFE2
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           plusw2	equ	0xFDB
  7187                           fsr2h	equ	0xFDA
  7188                           fsr2l	equ	0xFD9
  7189                           status	equ	0xFD8
  7190                           pclatu	equ	0xFFB
  7191                           pclath	equ	0xFFA
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           intcon	equ	0xFF2
  7199                           intcon3	equ	0xFF0
  7200                           postinc0	equ	0xFEE
  7201                           fsr0h	equ	0xFEA
  7202                           fsr0l	equ	0xFE9
  7203                           wreg	equ	0xFE8
  7204                           postdec1	equ	0xFE5
  7205                           plusw1	equ	0xFE3
  7206                           fsr1h	equ	0xFE2
  7207                           fsr1l	equ	0xFE1
  7208                           indf2	equ	0xFDF
  7209                           postinc2	equ	0xFDE
  7210                           postdec2	equ	0xFDD
  7211                           plusw2	equ	0xFDB
  7212                           fsr2h	equ	0xFDA
  7213                           fsr2l	equ	0xFD9
  7214                           status	equ	0xFD8
  7215                           
  7216                           	psect	rparam
  7217  0000                     pclatu	equ	0xFFB
  7218                           pclath	equ	0xFFA
  7219                           tblptru	equ	0xFF8
  7220                           tblptrh	equ	0xFF7
  7221                           tblptrl	equ	0xFF6
  7222                           tablat	equ	0xFF5
  7223                           prodh	equ	0xFF4
  7224                           prodl	equ	0xFF3
  7225                           intcon	equ	0xFF2
  7226                           intcon3	equ	0xFF0
  7227                           postinc0	equ	0xFEE
  7228                           fsr0h	equ	0xFEA
  7229                           fsr0l	equ	0xFE9
  7230                           wreg	equ	0xFE8
  7231                           postdec1	equ	0xFE5
  7232                           plusw1	equ	0xFE3
  7233                           fsr1h	equ	0xFE2
  7234                           fsr1l	equ	0xFE1
  7235                           indf2	equ	0xFDF
  7236                           postinc2	equ	0xFDE
  7237                           postdec2	equ	0xFDD
  7238                           plusw2	equ	0xFDB
  7239                           fsr2h	equ	0xFDA
  7240                           fsr2l	equ	0xFD9
  7241                           status	equ	0xFD8
  7242                           
  7243                           	psect	temp
  7244  000059                     btemp:
  7245                           	opt stack 0
  7246  000059                     	ds	1
  7247  0000                     int$flags	set	btemp
  7248  0000                     wtemp6	set	btemp+1
  7249                           pclatu	equ	0xFFB
  7250                           pclath	equ	0xFFA
  7251                           tblptru	equ	0xFF8
  7252                           tblptrh	equ	0xFF7
  7253                           tblptrl	equ	0xFF6
  7254                           tablat	equ	0xFF5
  7255                           prodh	equ	0xFF4
  7256                           prodl	equ	0xFF3
  7257                           intcon	equ	0xFF2
  7258                           intcon3	equ	0xFF0
  7259                           postinc0	equ	0xFEE
  7260                           fsr0h	equ	0xFEA
  7261                           fsr0l	equ	0xFE9
  7262                           wreg	equ	0xFE8
  7263                           postdec1	equ	0xFE5
  7264                           plusw1	equ	0xFE3
  7265                           fsr1h	equ	0xFE2
  7266                           fsr1l	equ	0xFE1
  7267                           indf2	equ	0xFDF
  7268                           postinc2	equ	0xFDE
  7269                           postdec2	equ	0xFDD
  7270                           plusw2	equ	0xFDB
  7271                           fsr2h	equ	0xFDA
  7272                           fsr2l	equ	0xFD9
  7273                           status	equ	0xFD8


Data Sizes:
    Strings     715
    Constant    48
    Data        6
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     77      88
    BANK0           128     39      71
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_56(CODE[19]), STR_55(CODE[18]), STR_54(CODE[17]), STR_53(CODE[8]), 
		 -> STR_52(CODE[19]), STR_51(CODE[18]), STR_50(CODE[18]), STR_49(CODE[11]), 
		 -> STR_48(CODE[11]), STR_47(CODE[7]), STR_46(CODE[19]), STR_45(CODE[14]), 
		 -> STR_44(CODE[20]), STR_43(CODE[13]), STR_42(CODE[11]), STR_41(CODE[12]), 
		 -> STR_40(CODE[7]), STR_39(CODE[19]), STR_38(CODE[23]), STR_37(CODE[7]), 
		 -> STR_36(CODE[19]), STR_35(CODE[17]), STR_34(CODE[7]), STR_33(CODE[21]), 
		 -> STR_32(CODE[21]), STR_31(CODE[21]), STR_30(CODE[21]), STR_29(CODE[18]), 
		 -> STR_28(CODE[18]), STR_27(CODE[11]), STR_26(CODE[14]), STR_25(CODE[20]), 
		 -> STR_24(CODE[13]), STR_23(CODE[11]), STR_22(CODE[14]), STR_21(CODE[19]), 
		 -> STR_20(CODE[20]), STR_19(CODE[20]), STR_18(CODE[13]), STR_17(CODE[12]), 
		 -> STR_16(CODE[21]), STR_15(CODE[13]), STR_14(CODE[11]), STR_13(CODE[13]), 
		 -> STR_12(CODE[21]), STR_11(CODE[21]), STR_10(CODE[8]), STR_9(CODE[8]), 
		 -> STR_8(CODE[8]), STR_7(CODE[17]), STR_6(CODE[21]), STR_5(CODE[21]), 
		 -> STR_4(CODE[21]), STR_3(CODE[21]), STR_2(CODE[21]), STR_1(CODE[33]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_operation
    _operation->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_operation

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   26390
                                             67 COMRAM    10    10      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                            _logging
                          _operation
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                           47    47      0   15878
                                             59 COMRAM     8     8      0
                                              0 BANK0     39    39      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
                            _lcdInst
                     _lcd_set_cursor
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    8390
                                             31 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     195
                                             21 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     592
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             26 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     601
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_set_cursor                                       3     2      1    1572
                                             25 COMRAM     3     2      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (3) _lcd_shift_cursor                                     3     2      1     415
                                             22 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     751
                                             20 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                             20 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _logging                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             22 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                             21 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     164
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     542
                                             32 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                             19 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interruptHandler                                    19    19      0      45
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _logging
   _operation
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
     _lcdInst
       _lcdNibble
     _lcd_set_cursor
       _lcdInst
         _lcdNibble
       _lcd_shift_cursor
         _lcdInst
           _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _putch
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     27      47       5       55.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     4D      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9F      34        0.0%
DATA                 0      0      9F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb  5 20:59:38 2018

         operation@frequency 0097                           l41 152A                           l42 14FA  
                         l43 1544                           l44 1512                           l45 151A  
                         l46 1522                  __CFG_CPD$ON 000000          ___wmul@multiplicand 0016  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l200 0224  
                        l202 022E                          l203 0236                          l300 0832  
                        l220 02CC                          l302 084E                          l222 02D6  
                        l214 0282                          l231 039C                          l223 02DE  
                        l207 0274                          l304 086C                          l216 030E  
                        l224 02E6                          l160 12FA                          l152 11E2  
                        l241 04A2                          l153 121E                          l314 0968  
                        l250 047E                          l234 0414                          l323 0B10  
                        l315 0A38                          l219 02F0                          l332 0B8E  
                        l316 0A5C                          l244 0484                          l180 0184  
                        l261 0538                          l245 046C                          l510 10D8  
                        l350 0CA0                          l342 0C28                          l318 0B02  
                        l270 0584                          l182 018E                          l174 0142  
                        l158 12E0                          l511 1172                          l351 0CAE  
                        l327 0B80                          l263 05A6                          l271 0588  
                        l247 0472                          l239 0422                          l183 0196  
                        l512 111C                          l352 0CBC                          l280 0634  
                        l256 052A                          l248 0476                          l176 01B8  
                        l168 00A8                          l353 0CF8                          l337 0C1A  
                        l281 0642                          l249 047A                          l169 0134  
                        l506 10D2                          l290 07B8                          l282 0650  
                        l266 058E                          l194 01E2                          l507 1178  
                        l363 0D9A                          l347 0CCA                          l291 078C  
                        l283 06AC                          l267 057A                          l187 01D4  
                        l179 01A0                          l364 0D70                          l348 0C92  
                        l292 07CC                          l284 0682                          l196 0258  
                        l509 1162                          l373 0DD0                          l365 0DB0  
                        l349 0CE6                          l293 079C                          l285 06C2  
                        l277 065E                          l269 0580                          l462 0E98  
                        l366 0D7E                          l358 0D06                          l294 07A8  
                        l286 0690                          l278 0626                          l471 0EEA  
                        l463 0EA8                          l383 0E7C                          l367 0D8C  
                        l295 07D8                          l287 069E                          l279 067A  
                        l199 0240                          l368 0DC2                          l288 06F8  
                        l481 0FA8                          l473 0F4C                          l465 0EBC  
                        l297 0916                          l490 0FF2                          l466 0EB6  
                        l378 0E6E                          l298 07F8                          l484 1022  
                        l485 0FC2                          l494 104C                          l478 0F7A  
                        l495 1070                          l479 0F48                          l496 1078  
                        l497 10A4                          l489 1032                          l498 108E  
                        l924 15CA                          l925 15C2                          l845 1730  
                        l934 16A4                          l871 140E                          l935 169C  
                        l872 1402                          l928 15EA                          l929 15F4  
                        l938 16BC                          l875 1442                          l939 16C6  
                        l876 1450                 __CFG_CPB$OFF 000000                          prod 000FF3  
                        wreg 000FE8              ?_lcd_set_cursor 001A                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l3442 0FC6                         l3278 173E  
                       l4190 1216                         l3456 0FF6                         l3724 0344  
                       l3718 0320                         l3932 07D0                         l3954 086C  
                       l3892 06F0                         l3974 0968                         l3984 0A54  
                       STR_1 FD33                         STR_2 FDAA                         STR_3 FDE9  
                       STR_4 FDFE                         STR_5 FE28                         STR_6 FDD4  
                       STR_7 FF21                         STR_8 FFEF                         STR_9 FFDF  
                       u3100 1412                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         u3040 10AC                         u3200 01CA  
                       _LATD 000F8C                         _LATE 000F8D                         u3050 10C0  
                       u3131 001E                         u3125 1584                         u3070 1180  
                       u3330 02A6                         u3250 01FE                         u4107 0356  
                       u3420 0446                         u3180 015E                         u4117 038E  
                       u4037 126A                         u3270 026A                         u4207 0768  
                       u4127 03A8                         u4047 12D2                         u2800 15CE  
                       u3600 08AE                         u4217 0ADA                         u4137 03BE  
                       u4057 0040                         u3610 08B0                         u3530 0716  
                       u2715 149C                         u4307 0DEC                         u4227 0B22  
                       u4147 04BE                         u4067 0056                         u2716 149E  
                       u3700 09AC                         u2725 14DC                         u4317 0E02  
                       u4237 0B38                         u4157 04D4                         u4077 009A  
                       u2726 14DE                         u2830 16A8                         u3710 0A12  
                       u4407 14C4                         u4327 1760                         u4247 0BAA  
                       u4167 05C8                         u4087 00B4                         u3720 0A14  
                       u3560 07E4                         u4417 14CE                         u4337 14EE  
                       u4257 0BC0                         u4177 05DE                         u4097 00CA  
                       u3730 0A3E                         u3570 07FE                         u3490 0554  
                       u4347 1506                         u4267 0C44                         u4187 06CC  
                       u3580 083A                         u4357 1604                         u4277 0C5A  
                       u4197 0730                         u3750 0A7A                         u4367 1638  
                       u2855 1712                         u4287 0D22                         u2856 1714  
                       u4377 1774                         u4297 0D38                         u3690 09AA  
                       u4387 1484                         u4397 148E                         u3960 123A  
                       _main 119A     __end_of_interruptHandler 13E0                         _keys FD03  
                       fsr0h 000FEA                         fsr1h 000FE2                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 0059                         prodh 000FF4  
                       prodl 000FF3                         start 000E                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000             __end_of_LCD_LEFT FD2E  
        operation@repetition 00A5        I2C_Master_Read@ackBit 0015             ?_I2C_Master_Init 0021  
           ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_main 0001                        STR_10 FFE7                        STR_11 FDBF  
                      STR_20 FE67                        STR_12 FD80                        STR_13 FF5F  
                      STR_21 FEB6                        STR_14 FFB6                        STR_22 FF43  
                      STR_30 FD95                        STR_23 FFC1                        STR_15 FF6C  
                      STR_31 FD6B                        STR_40 FFF7                        STR_24 FF79  
                      STR_16 FE52                        STR_32 FE3D                        STR_41 FF9F  
                      STR_17 FF93                        STR_25 FE8F                        STR_33 FE13  
                      STR_50 FEDB                        STR_42 FFC1                        STR_34 FFF7  
                      STR_18 FF86                        STR_26 FF51                        STR_51 FEC9  
                      STR_43 FF79                        STR_27 FFCC                        STR_35 FF32  
                      STR_19 FE7B                        STR_52 FEA3                        STR_44 FE8F  
                      STR_28 FEDB                        STR_36 FEA3                        STR_37 FFF7  
                      STR_45 FF51                        STR_53 FFD7                        STR_29 FEC9  
                      STR_46 FEA3                        STR_54 FF10                        STR_38 FD54  
                      STR_39 FEA3                        STR_47 FFF7                        STR_55 FEED  
                      STR_56 FEA3                        STR_48 FFAB                        STR_49 FFCC  
                      STR_57 FEFF              __end_of___lldiv 1462              __end_of___lwdiv 15FE  
            __end_of___lwmod 16D0                        i2l402 1380                        i2l405 1394  
                      _PORTB 000F81                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000              __end_of_lcdInst 177C  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 164A  
             __CFG_EBTRB$OFF 000000              __end_of_dpowers FD1E              __end_of_isdigit 1738  
            __end_of_logging 17B0                        _putch 1754                        main@i 004D  
                      pclath 000FFA                        tablat 000FF5            _LCDinterruptState 0058  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
I2C_Master_Read@receivedByte 0016                        wtemp6 005A               __CFG_PBADEN$ON 000000  
        operation@start_time 0081              __initialization 164A                 __end_of_main 1316  
               __end_of_keys FD14            ?_lcd_shift_cursor 0017               __CFG_OSC$HSPLL 000000  
          __end_of_LCD_RIGHT FD2F                       ??_main 0044           ??_lcd_shift_cursor 0018  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0015  
         ??_I2C_Master_Start 0015                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0017                       ?_putch 0001        operation@keypress_400 009E  
      operation@keypress_405 009C        operation@keypress_430 0090        operation@keypress_422 0080  
      operation@keypress_450 0093        operation@keypress_426 008F        operation@keypress_445 0092  
      operation@keypress_438 0091        operation@keypress_392 009B        operation@keypress_393 009D  
                     _INT1IE 007F83                       _INT1IF 007F80                       i2l3220 1392  
                     _SSPADD 000FC8                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
                     ___wmul 16D0               __CFG_STVREN$ON 000000                    ??___lldiv 001C  
           __end_of_currDate FD2D                    ??___lwdiv 0018                    ??___lwmod 001F  
                     clear_0 1670                    ??_lcdInst 0016                       _printf 0E8E  
                  ??_initLCD 0017                 __pdataCOMRAM 004E                    ??_isdigit 0014  
                  ??_logging 0014                 __mediumconst FD02                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                   __accesstop 0080  
    __end_of__initialization 1680                ___rparam_used 000001               __pcstackCOMRAM 0001  
              __end_of_putch 1768             ??_lcd_set_cursor 001B           __size_of_lcdNibble 007E  
                    ??_putch 0016                   __pbssBANK0 00A7            ?_interruptHandler 0001  
         ??_interruptHandler 0001                      ?___wmul 0014                      ?_printf 0020  
         __size_of_operation 0E7C         lcd@LCDinterruptState 0057                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7            __end_of_lcdNibble 14E0  
                    __Hparam 0000        operation@prescription 009F                      __Lparam 0000  
                    ___lldiv 13E0              __size_of___wmul 0026                      ___lwdiv 15AC  
                    ___lwmod 168E     interruptHandler@keypress 0013               operation@F3027 004E  
                    __pcinit 164A                      __ramtop 1000                      _lcdInst 1768  
                    __ptext0 119A                      __ptext1 0012                      __ptext2 0E8E  
                    __ptext3 1754                      __ptext4 171A                      __ptext5 16D0  
                    __ptext6 168E                      __ptext7 15AC                      __ptext8 14E0  
                    __ptext9 1738              __size_of_printf 030C                      _initLCD 15FE  
          __end_of_hexpowers FD26                      _dpowers FD14                      _isdigit 171A  
                    _logging 17AE                    _LCD_RIGHT FD2E     __size_of_I2C_Master_Init 005C  
   __size_of_I2C_Master_Read 0024     __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008  
             __pintcode_body 1316    __size_of_lcd_shift_cursor 001C         end_of_initialization 1680  
              _begin_logging 00C3        __end_of_LCD_SIZE_HORZ FD31        __end_of_LCD_SIZE_VERT FD30  
              __Lmediumconst FD02                      int_func 1316            __end_of_operation 0E8E  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0018  
            ___lldiv@counter 0020                      printf@c 003B                      printf@f 0020  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE                    _PORTBbits 000F81            operation@end_time 0088  
                  _TRISCbits 000F94            operation@keypress 009A                   _total_time 0056  
                printf@width 0039    lcd_shift_cursor@direction 0017               __end_of___wmul 16F6  
              __pidataCOMRAM 17A8               __end_of_printf 119A          start_initialization 164A  
          ??_I2C_Master_Init 0025            ??_I2C_Master_Read 0015            ??_I2C_Master_Wait 0014  
          ??_I2C_Master_Stop 0015                     ??___wmul 0018     I2C_Master_Init@clockFreq 0021  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 002E    __size_of_interruptHandler 13D8  
                __pbssCOMRAM 0054                __pcstackBANK0 0080             _lcd_shift_cursor 1738  
           _I2C_Master_Start 17A0             _I2C_Master_Write 178E      operation@fill_increment 0098  
           ___lwdiv@dividend 0014            __CFG_CCP2MX$PORTC 000000                    __pintcode 0008  
              __pmediumconst FD02                    _lcdNibble 1462                     ?___lldiv 0014  
                   ?___lwdiv 0014                     ?___lwmod 001B                     ?_lcdInst 0001  
                   ?_initLCD 0001                     ?_isdigit 0001                     ?_logging 0001  
                  _hexpowers FD1E             ___lwdiv@quotient 0019               __size_of_putch 0014  
                 operation@i 00A6                     _LCD_LEFT FD2D      __size_of_lcd_set_cursor 0070  
             ___wmul@product 0018                     _LATDbits 000F8C              lcd_set_cursor@x 001C  
            lcd_set_cursor@y 001A                    _operation 0012             __CFG_WDTPS$32768 000000  
                 ?_lcdNibble 0001            ___wmul@multiplier 0014                lcdNibble@data 0015  
                 printf@flag 0038                lcdNibble@temp 0014                   printf@prec 0035  
             _LCD_HORZ_LIMIT FD32                    copy_data0 165E                     __Hrparam 0000  
                 ?_operation 0001                     __Lrparam 0000           __CFG_BOREN$SBORDIS 000000  
            _begin_operation 00C5             __size_of___lldiv 0082             __size_of___lwdiv 0052  
           __size_of___lwmod 0042             _interruptHandler 0008                  _isdigit$834 0015  
           __size_of_lcdInst 0014              _I2C_Master_Init 1550              _I2C_Master_Read 16F6  
           __size_of_initLCD 004C              _I2C_Master_Wait 177C              _I2C_Master_Stop 1798  
     __end_of_LCD_HORZ_LIMIT FD33             __size_of_isdigit 001E             __size_of_logging 0002  
            ___lwdiv@divisor 0016              ___lwdiv@counter 0018                     __ptext10 178E  
                   __ptext11 1798                     __ptext20 13E0                     __ptext12 17A0  
                   __ptext13 16F6                     __ptext14 177C                     __ptext15 17AE  
                   __ptext16 15FE                     __ptext17 1768                     __ptext18 1462  
                   __ptext19 1550               _LCD_VERT_LIMIT FD31                     _box_fill 00A7  
                   _currDate FD26                __size_of_main 017C                 operation@dir 0094  
                ??_lcdNibble 0014                     _num_runs 0054                     int$flags 0059  
   __end_of_lcd_shift_cursor 1754                    printf@idx 0032                    printf@val 0036  
                   main@time 0046  I2C_Master_Write@byteToWrite 0015            lcd_shift_cursor@n 0019  
                  putch@data 0016     __end_of_I2C_Master_Start 17A8     __end_of_I2C_Master_Write 1798  
                 _INTCONbits 000FF2       __end_of_LCD_VERT_LIMIT FD32                     isdigit@c 0016  
                   intlevel2 0000               _lcd_set_cursor 14E0                _LCD_SIZE_HORZ FD30  
           ___lwmod@dividend 001B                _LCD_SIZE_VERT FD2F             ___lldiv@dividend 0014  
                ??_operation 003C                     printf@ap 0033      __end_of_I2C_Master_Init 15AC  
    __end_of_I2C_Master_Read 171A      __end_of_I2C_Master_Wait 178E      __end_of_I2C_Master_Stop 17A0  
                lcdInst@data 0016             ___lldiv@quotient 001C              ___lwmod@divisor 001D  
            ___lwmod@counter 001F                  _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
     __end_of_lcd_set_cursor 1550          operation@fill_start 0095     lcd_shift_cursor@numChars 0018  
