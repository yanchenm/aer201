

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Feb 04 21:50:13 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4620 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	idataCOMRAM
    74  0013A0                     __pidataCOMRAM:
    75                           	opt stack 0
    76                           
    77                           ;initializer for operation@F3021
    78  0013A0  FFFF               	dw	65535
    79  0013A2  FFFF               	dw	65535
    80  0013A4  FFFF               	dw	65535
    81                           
    82                           	psect	mediumconst
    83  00FD02                     __pmediumconst:
    84                           	opt stack 0
    85  00FD02  00                 	db	0
    86  00FD03                     _keys:
    87                           	opt stack 0
    88  00FD03  31                 	db	49
    89  00FD04  32                 	db	50
    90  00FD05  33                 	db	51
    91  00FD06  41                 	db	65
    92  00FD07  34                 	db	52
    93  00FD08  35                 	db	53
    94  00FD09  36                 	db	54
    95  00FD0A  42                 	db	66
    96  00FD0B  37                 	db	55
    97  00FD0C  38                 	db	56
    98  00FD0D  39                 	db	57
    99  00FD0E  43                 	db	67
   100  00FD0F  2A                 	db	42
   101  00FD10  30                 	db	48
   102  00FD11  23                 	db	35
   103  00FD12  44                 	db	68
   104  00FD13  00                 	db	0
   105  00FD14                     __end_of_keys:
   106                           	opt stack 0
   107  00FD14                     _dpowers:
   108                           	opt stack 0
   109  00FD14  0001               	dw	1
   110  00FD16  000A               	dw	10
   111  00FD18  0064               	dw	100
   112  00FD1A  03E8               	dw	1000
   113  00FD1C  2710               	dw	10000
   114  00FD1E                     __end_of_dpowers:
   115                           	opt stack 0
   116  00FD1E                     _hexpowers:
   117                           	opt stack 0
   118  00FD1E  0001               	dw	1
   119  00FD20  0010               	dw	16
   120  00FD22  0100               	dw	256
   121  00FD24  1000               	dw	4096
   122  00FD26                     __end_of_hexpowers:
   123                           	opt stack 0
   124  00FD26                     _currDate:
   125                           	opt stack 0
   126  00FD26  00                 	db	0
   127  00FD27  30                 	db	48
   128  00FD28  20                 	db	32
   129  00FD29  00                 	db	0
   130  00FD2A  04                 	db	4
   131  00FD2B  02                 	db	2
   132  00FD2C  18                 	db	24
   133  00FD2D                     __end_of_currDate:
   134                           	opt stack 0
   135  00FD2D                     _LCD_LEFT:
   136                           	opt stack 0
   137  00FD2D  00                 	db	0
   138  00FD2E                     __end_of_LCD_LEFT:
   139                           	opt stack 0
   140  00FD2E                     _LCD_RIGHT:
   141                           	opt stack 0
   142  00FD2E  01                 	db	1
   143  00FD2F                     __end_of_LCD_RIGHT:
   144                           	opt stack 0
   145  00FD2F                     _LCD_SIZE_VERT:
   146                           	opt stack 0
   147  00FD2F  02                 	db	2
   148  00FD30                     __end_of_LCD_SIZE_VERT:
   149                           	opt stack 0
   150  00FD30                     _LCD_SIZE_HORZ:
   151                           	opt stack 0
   152  00FD30  10                 	db	16
   153  00FD31                     __end_of_LCD_SIZE_HORZ:
   154                           	opt stack 0
   155  00FD31                     _LCD_VERT_LIMIT:
   156                           	opt stack 0
   157  00FD31  04                 	db	4
   158  00FD32                     __end_of_LCD_VERT_LIMIT:
   159                           	opt stack 0
   160  00FD32                     _LCD_HORZ_LIMIT:
   161                           	opt stack 0
   162  00FD32  14                 	db	20
   163  00FD33                     __end_of_LCD_HORZ_LIMIT:
   164                           	opt stack 0
   165  0000                     _SSPBUF	set	4041
   166  0000                     _SSPCON2bits	set	4037
   167  0000                     _SSPADD	set	4040
   168  0000                     _SSPCON2	set	4037
   169  0000                     _SSPCON1	set	4038
   170  0000                     _SSPSTAT	set	4039
   171  0000                     _TRISCbits	set	3988
   172  0000                     _SSPCON1bits	set	4038
   173  0000                     _PORTB	set	3969
   174  0000                     _PORTBbits	set	3969
   175  0000                     _ADCON1	set	4033
   176  0000                     _ADCON0	set	4034
   177  0000                     _TRISE	set	3990
   178  0000                     _TRISD	set	3989
   179  0000                     _TRISC	set	3988
   180  0000                     _TRISB	set	3987
   181  0000                     _TRISA	set	3986
   182  0000                     _LATE	set	3981
   183  0000                     _LATC	set	3979
   184  0000                     _LATB	set	3978
   185  0000                     _LATA	set	3977
   186  0000                     _INTCONbits	set	4082
   187  0000                     _LATD	set	3980
   188  0000                     _LATDbits	set	3980
   189  0000                     _INT1IF	set	32640
   190  0000                     _INT1IE	set	32643
   191  00FD33                     STR_1:
   192  00FD33  25                 	db	37
   193  00FD34  30                 	db	48	;'0'
   194  00FD35  32                 	db	50	;'2'
   195  00FD36  78                 	db	120	;'x'
   196  00FD37  2F                 	db	47
   197  00FD38  25                 	db	37
   198  00FD39  30                 	db	48	;'0'
   199  00FD3A  32                 	db	50	;'2'
   200  00FD3B  78                 	db	120	;'x'
   201  00FD3C  2F                 	db	47
   202  00FD3D  25                 	db	37
   203  00FD3E  30                 	db	48	;'0'
   204  00FD3F  32                 	db	50	;'2'
   205  00FD40  78                 	db	120	;'x'
   206  00FD41  20                 	db	32
   207  00FD42  20                 	db	32
   208  00FD43  20                 	db	32
   209  00FD44  20                 	db	32
   210  00FD45  25                 	db	37
   211  00FD46  30                 	db	48	;'0'
   212  00FD47  32                 	db	50	;'2'
   213  00FD48  78                 	db	120	;'x'
   214  00FD49  3A                 	db	58	;':'
   215  00FD4A  25                 	db	37
   216  00FD4B  30                 	db	48	;'0'
   217  00FD4C  32                 	db	50	;'2'
   218  00FD4D  78                 	db	120	;'x'
   219  00FD4E  3A                 	db	58	;':'
   220  00FD4F  25                 	db	37
   221  00FD50  30                 	db	48	;'0'
   222  00FD51  32                 	db	50	;'2'
   223  00FD52  78                 	db	120	;'x'
   224  00FD53  00                 	db	0
   225  00FD54                     STR_38:
   226  00FD54  50                 	db	80	;'P'
   227  00FD55  72                 	db	114	;'r'
   228  00FD56  65                 	db	101	;'e'
   229  00FD57  73                 	db	115	;'s'
   230  00FD58  63                 	db	99	;'c'
   231  00FD59  72                 	db	114	;'r'
   232  00FD5A  69                 	db	105	;'i'
   233  00FD5B  70                 	db	112	;'p'
   234  00FD5C  2E                 	db	46
   235  00FD5D  3A                 	db	58	;':'
   236  00FD5E  20                 	db	32
   237  00FD5F  25                 	db	37
   238  00FD60  64                 	db	100	;'d'
   239  00FD61  52                 	db	82	;'R'
   240  00FD62  20                 	db	32
   241  00FD63  25                 	db	37
   242  00FD64  64                 	db	100	;'d'
   243  00FD65  46                 	db	70	;'F'
   244  00FD66  20                 	db	32
   245  00FD67  25                 	db	37
   246  00FD68  64                 	db	100	;'d'
   247  00FD69  4C                 	db	76	;'L'
   248  00FD6A  00                 	db	0
   249  00FD6B                     STR_31:
   250  00FD6B  20                 	db	32
   251  00FD6C  20                 	db	32
   252  00FD6D  20                 	db	32
   253  00FD6E  20                 	db	32
   254  00FD6F  20                 	db	32
   255  00FD70  20                 	db	32
   256  00FD71  50                 	db	80	;'P'
   257  00FD72  49                 	db	73	;'I'
   258  00FD73  4C                 	db	76	;'L'
   259  00FD74  4C                 	db	76	;'L'
   260  00FD75  53                 	db	83	;'S'
   261  00FD76  2E                 	db	46
   262  00FD77  2E                 	db	46
   263  00FD78  2E                 	db	46
   264  00FD79  20                 	db	32
   265  00FD7A  20                 	db	32
   266  00FD7B  20                 	db	32
   267  00FD7C  20                 	db	32
   268  00FD7D  20                 	db	32
   269  00FD7E  20                 	db	32
   270  00FD7F  00                 	db	0
   271  00FD80                     STR_12:
   272  00FD80  20                 	db	32
   273  00FD81  20                 	db	32
   274  00FD82  20                 	db	32
   275  00FD83  20                 	db	32
   276  00FD84  20                 	db	32
   277  00FD85  54                 	db	84	;'T'
   278  00FD86  52                 	db	82	;'R'
   279  00FD87  59                 	db	89	;'Y'
   280  00FD88  20                 	db	32
   281  00FD89  41                 	db	65	;'A'
   282  00FD8A  47                 	db	71	;'G'
   283  00FD8B  41                 	db	65	;'A'
   284  00FD8C  49                 	db	73	;'I'
   285  00FD8D  4E                 	db	78	;'N'
   286  00FD8E  20                 	db	32
   287  00FD8F  20                 	db	32
   288  00FD90  20                 	db	32
   289  00FD91  20                 	db	32
   290  00FD92  20                 	db	32
   291  00FD93  20                 	db	32
   292  00FD94  00                 	db	0
   293  00FD95                     STR_30:
   294  00FD95  20                 	db	32
   295  00FD96  20                 	db	32
   296  00FD97  20                 	db	32
   297  00FD98  20                 	db	32
   298  00FD99  20                 	db	32
   299  00FD9A  44                 	db	68	;'D'
   300  00FD9B  49                 	db	73	;'I'
   301  00FD9C  53                 	db	83	;'S'
   302  00FD9D  50                 	db	80	;'P'
   303  00FD9E  45                 	db	69	;'E'
   304  00FD9F  4E                 	db	78	;'N'
   305  00FDA0  53                 	db	83	;'S'
   306  00FDA1  49                 	db	73	;'I'
   307  00FDA2  4E                 	db	78	;'N'
   308  00FDA3  47                 	db	71	;'G'
   309  00FDA4  20                 	db	32
   310  00FDA5  20                 	db	32
   311  00FDA6  20                 	db	32
   312  00FDA7  20                 	db	32
   313  00FDA8  20                 	db	32
   314  00FDA9  00                 	db	0
   315  00FDAA                     STR_2:
   316  00FDAA  20                 	db	32
   317  00FDAB  20                 	db	32
   318  00FDAC  20                 	db	32
   319  00FDAD  20                 	db	32
   320  00FDAE  20                 	db	32
   321  00FDAF  2A                 	db	42
   322  00FDB0  20                 	db	32
   323  00FDB1  74                 	db	116	;'t'
   324  00FDB2  6F                 	db	111	;'o'
   325  00FDB3  20                 	db	32
   326  00FDB4  42                 	db	66	;'B'
   327  00FDB5  45                 	db	69	;'E'
   328  00FDB6  47                 	db	71	;'G'
   329  00FDB7  49                 	db	73	;'I'
   330  00FDB8  4E                 	db	78	;'N'
   331  00FDB9  20                 	db	32
   332  00FDBA  20                 	db	32
   333  00FDBB  20                 	db	32
   334  00FDBC  20                 	db	32
   335  00FDBD  20                 	db	32
   336  00FDBE  00                 	db	0
   337  00FDBF                     STR_11:
   338  00FDBF  20                 	db	32
   339  00FDC0  20                 	db	32
   340  00FDC1  20                 	db	32
   341  00FDC2  49                 	db	73	;'I'
   342  00FDC3  4E                 	db	78	;'N'
   343  00FDC4  56                 	db	86	;'V'
   344  00FDC5  41                 	db	65	;'A'
   345  00FDC6  4C                 	db	76	;'L'
   346  00FDC7  49                 	db	73	;'I'
   347  00FDC8  44                 	db	68	;'D'
   348  00FDC9  20                 	db	32
   349  00FDCA  49                 	db	73	;'I'
   350  00FDCB  4E                 	db	78	;'N'
   351  00FDCC  50                 	db	80	;'P'
   352  00FDCD  55                 	db	85	;'U'
   353  00FDCE  54                 	db	84	;'T'
   354  00FDCF  20                 	db	32
   355  00FDD0  20                 	db	32
   356  00FDD1  20                 	db	32
   357  00FDD2  20                 	db	32
   358  00FDD3  00                 	db	0
   359  00FDD4                     STR_6:
   360  00FDD4  20                 	db	32
   361  00FDD5  20                 	db	32
   362  00FDD6  20                 	db	32
   363  00FDD7  20                 	db	32
   364  00FDD8  23                 	db	35
   365  00FDD9  20                 	db	32
   366  00FDDA  74                 	db	116	;'t'
   367  00FDDB  6F                 	db	111	;'o'
   368  00FDDC  20                 	db	32
   369  00FDDD  63                 	db	99	;'c'
   370  00FDDE  6F                 	db	111	;'o'
   371  00FDDF  6E                 	db	110	;'n'
   372  00FDE0  66                 	db	102	;'f'
   373  00FDE1  69                 	db	105	;'i'
   374  00FDE2  72                 	db	114	;'r'
   375  00FDE3  6D                 	db	109	;'m'
   376  00FDE4  20                 	db	32
   377  00FDE5  20                 	db	32
   378  00FDE6  20                 	db	32
   379  00FDE7  20                 	db	32
   380  00FDE8  00                 	db	0
   381  00FDE9                     STR_3:
   382  00FDE9  20                 	db	32
   383  00FDEA  20                 	db	32
   384  00FDEB  20                 	db	32
   385  00FDEC  20                 	db	32
   386  00FDED  23                 	db	35
   387  00FDEE  20                 	db	32
   388  00FDEF  66                 	db	102	;'f'
   389  00FDF0  6F                 	db	111	;'o'
   390  00FDF1  72                 	db	114	;'r'
   391  00FDF2  20                 	db	32
   392  00FDF3  4C                 	db	76	;'L'
   393  00FDF4  4F                 	db	79	;'O'
   394  00FDF5  47                 	db	71	;'G'
   395  00FDF6  47                 	db	71	;'G'
   396  00FDF7  49                 	db	73	;'I'
   397  00FDF8  4E                 	db	78	;'N'
   398  00FDF9  47                 	db	71	;'G'
   399  00FDFA  20                 	db	32
   400  00FDFB  20                 	db	32
   401  00FDFC  20                 	db	32
   402  00FDFD  00                 	db	0
   403  00FDFE                     STR_4:
   404  00FDFE  20                 	db	32
   405  00FDFF  20                 	db	32
   406  00FE00  20                 	db	32
   407  00FE01  41                 	db	65	;'A'
   408  00FE02  66                 	db	102	;'f'
   409  00FE03  74                 	db	116	;'t'
   410  00FE04  65                 	db	101	;'e'
   411  00FE05  72                 	db	114	;'r'
   412  00FE06  20                 	db	32
   413  00FE07  65                 	db	101	;'e'
   414  00FE08  6E                 	db	110	;'n'
   415  00FE09  74                 	db	116	;'t'
   416  00FE0A  65                 	db	101	;'e'
   417  00FE0B  72                 	db	114	;'r'
   418  00FE0C  69                 	db	105	;'i'
   419  00FE0D  6E                 	db	110	;'n'
   420  00FE0E  67                 	db	103	;'g'
   421  00FE0F  20                 	db	32
   422  00FE10  20                 	db	32
   423  00FE11  20                 	db	32
   424  00FE12  00                 	db	0
   425  00FE13                     STR_33:
   426  00FE13  20                 	db	32
   427  00FE14  20                 	db	32
   428  00FE15  50                 	db	80	;'P'
   429  00FE16  52                 	db	82	;'R'
   430  00FE17  45                 	db	69	;'E'
   431  00FE18  53                 	db	83	;'S'
   432  00FE19  53                 	db	83	;'S'
   433  00FE1A  20                 	db	32
   434  00FE1B  41                 	db	65	;'A'
   435  00FE1C  4E                 	db	78	;'N'
   436  00FE1D  59                 	db	89	;'Y'
   437  00FE1E  20                 	db	32
   438  00FE1F  4B                 	db	75	;'K'
   439  00FE20  45                 	db	69	;'E'
   440  00FE21  59                 	db	89	;'Y'
   441  00FE22  2E                 	db	46
   442  00FE23  2E                 	db	46
   443  00FE24  2E                 	db	46
   444  00FE25  20                 	db	32
   445  00FE26  20                 	db	32
   446  00FE27  00                 	db	0
   447  00FE28                     STR_5:
   448  00FE28  20                 	db	32
   449  00FE29  20                 	db	32
   450  00FE2A  73                 	db	115	;'s'
   451  00FE2B  65                 	db	101	;'e'
   452  00FE2C  6C                 	db	108	;'l'
   453  00FE2D  65                 	db	101	;'e'
   454  00FE2E  63                 	db	99	;'c'
   455  00FE2F  74                 	db	116	;'t'
   456  00FE30  69                 	db	105	;'i'
   457  00FE31  6F                 	db	111	;'o'
   458  00FE32  6E                 	db	110	;'n'
   459  00FE33  2C                 	db	44
   460  00FE34  20                 	db	32
   461  00FE35  70                 	db	112	;'p'
   462  00FE36  72                 	db	114	;'r'
   463  00FE37  65                 	db	101	;'e'
   464  00FE38  73                 	db	115	;'s'
   465  00FE39  73                 	db	115	;'s'
   466  00FE3A  20                 	db	32
   467  00FE3B  20                 	db	32
   468  00FE3C  00                 	db	0
   469  00FE3D                     STR_32:
   470  00FE3D  20                 	db	32
   471  00FE3E  4F                 	db	79	;'O'
   472  00FE3F  50                 	db	80	;'P'
   473  00FE40  45                 	db	69	;'E'
   474  00FE41  52                 	db	82	;'R'
   475  00FE42  41                 	db	65	;'A'
   476  00FE43  54                 	db	84	;'T'
   477  00FE44  49                 	db	73	;'I'
   478  00FE45  4F                 	db	79	;'O'
   479  00FE46  4E                 	db	78	;'N'
   480  00FE47  20                 	db	32
   481  00FE48  43                 	db	67	;'C'
   482  00FE49  4F                 	db	79	;'O'
   483  00FE4A  4D                 	db	77	;'M'
   484  00FE4B  50                 	db	80	;'P'
   485  00FE4C  4C                 	db	76	;'L'
   486  00FE4D  45                 	db	69	;'E'
   487  00FE4E  54                 	db	84	;'T'
   488  00FE4F  45                 	db	69	;'E'
   489  00FE50  20                 	db	32
   490  00FE51  00                 	db	0
   491  00FE52                     STR_16:
   492  00FE52  28                 	db	40
   493  00FE53  33                 	db	51	;'3'
   494  00FE54  29                 	db	41
   495  00FE55  42                 	db	66	;'B'
   496  00FE56  6F                 	db	111	;'o'
   497  00FE57  74                 	db	116	;'t'
   498  00FE58  68                 	db	104	;'h'
   499  00FE59  20                 	db	32
   500  00FE5A  28                 	db	40
   501  00FE5B  34                 	db	52	;'4'
   502  00FE5C  29                 	db	41
   503  00FE5D  41                 	db	65	;'A'
   504  00FE5E  6C                 	db	108	;'l'
   505  00FE5F  74                 	db	116	;'t'
   506  00FE60  65                 	db	101	;'e'
   507  00FE61  72                 	db	114	;'r'
   508  00FE62  6E                 	db	110	;'n'
   509  00FE63  61                 	db	97	;'a'
   510  00FE64  74                 	db	116	;'t'
   511  00FE65  65                 	db	101	;'e'
   512  00FE66  00                 	db	0
   513  00FE67                     STR_20:
   514  00FE67  28                 	db	40
   515  00FE68  33                 	db	51	;'3'
   516  00FE69  29                 	db	41
   517  00FE6A  20                 	db	32
   518  00FE6B  41                 	db	65	;'A'
   519  00FE6C  6C                 	db	108	;'l'
   520  00FE6D  74                 	db	116	;'t'
   521  00FE6E  65                 	db	101	;'e'
   522  00FE6F  72                 	db	114	;'r'
   523  00FE70  6E                 	db	110	;'n'
   524  00FE71  61                 	db	97	;'a'
   525  00FE72  74                 	db	116	;'t'
   526  00FE73  65                 	db	101	;'e'
   527  00FE74  20                 	db	32
   528  00FE75  28                 	db	40
   529  00FE76  4D                 	db	77	;'M'
   530  00FE77  6F                 	db	111	;'o'
   531  00FE78  6E                 	db	110	;'n'
   532  00FE79  29                 	db	41
   533  00FE7A  00                 	db	0
   534  00FE7B                     STR_19:
   535  00FE7B  28                 	db	40
   536  00FE7C  32                 	db	50	;'2'
   537  00FE7D  29                 	db	41
   538  00FE7E  20                 	db	32
   539  00FE7F  41                 	db	65	;'A'
   540  00FE80  6C                 	db	108	;'l'
   541  00FE81  74                 	db	116	;'t'
   542  00FE82  65                 	db	101	;'e'
   543  00FE83  72                 	db	114	;'r'
   544  00FE84  6E                 	db	110	;'n'
   545  00FE85  61                 	db	97	;'a'
   546  00FE86  74                 	db	116	;'t'
   547  00FE87  65                 	db	101	;'e'
   548  00FE88  20                 	db	32
   549  00FE89  28                 	db	40
   550  00FE8A  53                 	db	83	;'S'
   551  00FE8B  75                 	db	117	;'u'
   552  00FE8C  6E                 	db	110	;'n'
   553  00FE8D  29                 	db	41
   554  00FE8E  00                 	db	0
   555  00FE8F                     STR_25:
   556  00FE8F  2D                 	db	45
   557  00FE90  20                 	db	32
   558  00FE91  4D                 	db	77	;'M'
   559  00FE92  6F                 	db	111	;'o'
   560  00FE93  72                 	db	114	;'r'
   561  00FE94  6E                 	db	110	;'n'
   562  00FE95  2E                 	db	46
   563  00FE96  20                 	db	32
   564  00FE97  26                 	db	38
   565  00FE98  20                 	db	32
   566  00FE99  41                 	db	65	;'A'
   567  00FE9A  66                 	db	102	;'f'
   568  00FE9B  74                 	db	116	;'t'
   569  00FE9C  65                 	db	101	;'e'
   570  00FE9D  72                 	db	114	;'r'
   571  00FE9E  6E                 	db	110	;'n'
   572  00FE9F  6F                 	db	111	;'o'
   573  00FEA0  6F                 	db	111	;'o'
   574  00FEA1  6E                 	db	110	;'n'
   575  00FEA2  00                 	db	0
   576  00FEA3                     STR_36:
   577  00FEA3  28                 	db	40
   578  00FEA4  23                 	db	35
   579  00FEA5  20                 	db	32
   580  00FEA6  74                 	db	116	;'t'
   581  00FEA7  6F                 	db	111	;'o'
   582  00FEA8  20                 	db	32
   583  00FEA9  63                 	db	99	;'c'
   584  00FEAA  6F                 	db	111	;'o'
   585  00FEAB  6E                 	db	110	;'n'
   586  00FEAC  74                 	db	116	;'t'
   587  00FEAD  69                 	db	105	;'i'
   588  00FEAE  6E                 	db	110	;'n'
   589  00FEAF  75                 	db	117	;'u'
   590  00FEB0  65                 	db	101	;'e'
   591  00FEB1  2E                 	db	46
   592  00FEB2  2E                 	db	46
   593  00FEB3  2E                 	db	46
   594  00FEB4  29                 	db	41
   595  00FEB5  00                 	db	0
   596  00FEB6                     STR_21:
   597  00FEB6  50                 	db	80	;'P'
   598  00FEB7  72                 	db	114	;'r'
   599  00FEB8  65                 	db	101	;'e'
   600  00FEB9  73                 	db	115	;'s'
   601  00FEBA  63                 	db	99	;'c'
   602  00FEBB  72                 	db	114	;'r'
   603  00FEBC  69                 	db	105	;'i'
   604  00FEBD  70                 	db	112	;'p'
   605  00FEBE  2E                 	db	46
   606  00FEBF  20                 	db	32
   607  00FEC0  64                 	db	100	;'d'
   608  00FEC1  65                 	db	101	;'e'
   609  00FEC2  74                 	db	116	;'t'
   610  00FEC3  61                 	db	97	;'a'
   611  00FEC4  69                 	db	105	;'i'
   612  00FEC5  6C                 	db	108	;'l'
   613  00FEC6  73                 	db	115	;'s'
   614  00FEC7  3A                 	db	58	;':'
   615  00FEC8  00                 	db	0
   616  00FEC9                     STR_29:
   617  00FEC9  2D                 	db	45
   618  00FECA  20                 	db	32
   619  00FECB  41                 	db	65	;'A'
   620  00FECC  6C                 	db	108	;'l'
   621  00FECD  74                 	db	116	;'t'
   622  00FECE  65                 	db	101	;'e'
   623  00FECF  72                 	db	114	;'r'
   624  00FED0  6E                 	db	110	;'n'
   625  00FED1  61                 	db	97	;'a'
   626  00FED2  74                 	db	116	;'t'
   627  00FED3  65                 	db	101	;'e'
   628  00FED4  20                 	db	32
   629  00FED5  28                 	db	40
   630  00FED6  4D                 	db	77	;'M'
   631  00FED7  6F                 	db	111	;'o'
   632  00FED8  6E                 	db	110	;'n'
   633  00FED9  29                 	db	41
   634  00FEDA  00                 	db	0
   635  00FEDB                     STR_28:
   636  00FEDB  2D                 	db	45
   637  00FEDC  20                 	db	32
   638  00FEDD  41                 	db	65	;'A'
   639  00FEDE  6C                 	db	108	;'l'
   640  00FEDF  74                 	db	116	;'t'
   641  00FEE0  65                 	db	101	;'e'
   642  00FEE1  72                 	db	114	;'r'
   643  00FEE2  6E                 	db	110	;'n'
   644  00FEE3  61                 	db	97	;'a'
   645  00FEE4  74                 	db	116	;'t'
   646  00FEE5  65                 	db	101	;'e'
   647  00FEE6  20                 	db	32
   648  00FEE7  28                 	db	40
   649  00FEE8  53                 	db	83	;'S'
   650  00FEE9  75                 	db	117	;'u'
   651  00FEEA  6E                 	db	110	;'n'
   652  00FEEB  29                 	db	41
   653  00FEEC  00                 	db	0
   654  00FEED                     STR_55:
   655  00FEED  52                 	db	82	;'R'
   656  00FEEE  3A                 	db	58	;':'
   657  00FEEF  20                 	db	32
   658  00FEF0  25                 	db	37
   659  00FEF1  64                 	db	100	;'d'
   660  00FEF2  20                 	db	32
   661  00FEF3  46                 	db	70	;'F'
   662  00FEF4  3A                 	db	58	;':'
   663  00FEF5  20                 	db	32
   664  00FEF6  25                 	db	37
   665  00FEF7  64                 	db	100	;'d'
   666  00FEF8  20                 	db	32
   667  00FEF9  4C                 	db	76	;'L'
   668  00FEFA  3A                 	db	58	;':'
   669  00FEFB  20                 	db	32
   670  00FEFC  25                 	db	37
   671  00FEFD  64                 	db	100	;'d'
   672  00FEFE  00                 	db	0
   673  00FEFF                     STR_57:
   674  00FEFF  30                 	db	48	;'0'
   675  00FF00  31                 	db	49	;'1'
   676  00FF01  32                 	db	50	;'2'
   677  00FF02  33                 	db	51	;'3'
   678  00FF03  34                 	db	52	;'4'
   679  00FF04  35                 	db	53	;'5'
   680  00FF05  36                 	db	54	;'6'
   681  00FF06  37                 	db	55	;'7'
   682  00FF07  38                 	db	56	;'8'
   683  00FF08  39                 	db	57	;'9'
   684  00FF09  61                 	db	97	;'a'
   685  00FF0A  62                 	db	98	;'b'
   686  00FF0B  63                 	db	99	;'c'
   687  00FF0C  64                 	db	100	;'d'
   688  00FF0D  65                 	db	101	;'e'
   689  00FF0E  66                 	db	102	;'f'
   690  00FF0F  00                 	db	0
   691  00FF10                     STR_54:
   692  00FF10  50                 	db	80	;'P'
   693  00FF11  69                 	db	105	;'i'
   694  00FF12  6C                 	db	108	;'l'
   695  00FF13  6C                 	db	108	;'l'
   696  00FF14  73                 	db	115	;'s'
   697  00FF15  20                 	db	32
   698  00FF16  52                 	db	82	;'R'
   699  00FF17  65                 	db	101	;'e'
   700  00FF18  6D                 	db	109	;'m'
   701  00FF19  61                 	db	97	;'a'
   702  00FF1A  69                 	db	105	;'i'
   703  00FF1B  6E                 	db	110	;'n'
   704  00FF1C  69                 	db	105	;'i'
   705  00FF1D  6E                 	db	110	;'n'
   706  00FF1E  67                 	db	103	;'g'
   707  00FF1F  3A                 	db	58	;':'
   708  00FF20  00                 	db	0
   709  00FF21                     STR_7:
   710  00FF21  4E                 	db	78	;'N'
   711  00FF22  75                 	db	117	;'u'
   712  00FF23  6D                 	db	109	;'m'
   713  00FF24  62                 	db	98	;'b'
   714  00FF25  65                 	db	101	;'e'
   715  00FF26  72                 	db	114	;'r'
   716  00FF27  20                 	db	32
   717  00FF28  6F                 	db	111	;'o'
   718  00FF29  66                 	db	102	;'f'
   719  00FF2A  20                 	db	32
   720  00FF2B  70                 	db	112	;'p'
   721  00FF2C  69                 	db	105	;'i'
   722  00FF2D  6C                 	db	108	;'l'
   723  00FF2E  6C                 	db	108	;'l'
   724  00FF2F  73                 	db	115	;'s'
   725  00FF30  3A                 	db	58	;':'
   726  00FF31  00                 	db	0
   727  00FF32                     STR_35:
   728  00FF32  54                 	db	84	;'T'
   729  00FF33  6F                 	db	111	;'o'
   730  00FF34  74                 	db	116	;'t'
   731  00FF35  61                 	db	97	;'a'
   732  00FF36  6C                 	db	108	;'l'
   733  00FF37  20                 	db	32
   734  00FF38  74                 	db	116	;'t'
   735  00FF39  69                 	db	105	;'i'
   736  00FF3A  6D                 	db	109	;'m'
   737  00FF3B  65                 	db	101	;'e'
   738  00FF3C  3A                 	db	58	;':'
   739  00FF3D  20                 	db	32
   740  00FF3E  25                 	db	37
   741  00FF3F  64                 	db	100	;'d'
   742  00FF40  20                 	db	32
   743  00FF41  73                 	db	115	;'s'
   744  00FF42  00                 	db	0
   745  00FF43                     STR_22:
   746  00FF43  2D                 	db	45
   747  00FF44  20                 	db	32
   748  00FF45  25                 	db	37
   749  00FF46  64                 	db	100	;'d'
   750  00FF47  52                 	db	82	;'R'
   751  00FF48  20                 	db	32
   752  00FF49  25                 	db	37
   753  00FF4A  64                 	db	100	;'d'
   754  00FF4B  46                 	db	70	;'F'
   755  00FF4C  20                 	db	32
   756  00FF4D  25                 	db	37
   757  00FF4E  64                 	db	100	;'d'
   758  00FF4F  4C                 	db	76	;'L'
   759  00FF50  00                 	db	0
   760  00FF51                     STR_26:
   761  00FF51  2D                 	db	45
   762  00FF52  20                 	db	32
   763  00FF53  41                 	db	65	;'A'
   764  00FF54  6C                 	db	108	;'l'
   765  00FF55  74                 	db	116	;'t'
   766  00FF56  65                 	db	101	;'e'
   767  00FF57  72                 	db	114	;'r'
   768  00FF58  6E                 	db	110	;'n'
   769  00FF59  61                 	db	97	;'a'
   770  00FF5A  74                 	db	116	;'t'
   771  00FF5B  69                 	db	105	;'i'
   772  00FF5C  6E                 	db	110	;'n'
   773  00FF5D  67                 	db	103	;'g'
   774  00FF5E  00                 	db	0
   775  00FF5F                     STR_13:
   776  00FF5F  52                 	db	82	;'R'
   777  00FF60  65                 	db	101	;'e'
   778  00FF61  70                 	db	112	;'p'
   779  00FF62  65                 	db	101	;'e'
   780  00FF63  74                 	db	116	;'t'
   781  00FF64  69                 	db	105	;'i'
   782  00FF65  74                 	db	116	;'t'
   783  00FF66  69                 	db	105	;'i'
   784  00FF67  6F                 	db	111	;'o'
   785  00FF68  6E                 	db	110	;'n'
   786  00FF69  3A                 	db	58	;':'
   787  00FF6A  20                 	db	32
   788  00FF6B  00                 	db	0
   789  00FF6C                     STR_15:
   790  00FF6C  28                 	db	40
   791  00FF6D  32                 	db	50	;'2'
   792  00FF6E  29                 	db	41
   793  00FF6F  41                 	db	65	;'A'
   794  00FF70  66                 	db	102	;'f'
   795  00FF71  74                 	db	116	;'t'
   796  00FF72  65                 	db	101	;'e'
   797  00FF73  72                 	db	114	;'r'
   798  00FF74  6E                 	db	110	;'n'
   799  00FF75  6F                 	db	111	;'o'
   800  00FF76  6F                 	db	111	;'o'
   801  00FF77  6E                 	db	110	;'n'
   802  00FF78  00                 	db	0
   803  00FF79                     STR_24:
   804  00FF79  2D                 	db	45
   805  00FF7A  20                 	db	32
   806  00FF7B  41                 	db	65	;'A'
   807  00FF7C  66                 	db	102	;'f'
   808  00FF7D  74                 	db	116	;'t'
   809  00FF7E  65                 	db	101	;'e'
   810  00FF7F  72                 	db	114	;'r'
   811  00FF80  6E                 	db	110	;'n'
   812  00FF81  6F                 	db	111	;'o'
   813  00FF82  6F                 	db	111	;'o'
   814  00FF83  6E                 	db	110	;'n'
   815  00FF84  73                 	db	115	;'s'
   816  00FF85  00                 	db	0
   817  00FF86                     STR_18:
   818  00FF86  28                 	db	40
   819  00FF87  31                 	db	49	;'1'
   820  00FF88  29                 	db	41
   821  00FF89  20                 	db	32
   822  00FF8A  45                 	db	69	;'E'
   823  00FF8B  76                 	db	118	;'v'
   824  00FF8C  65                 	db	101	;'e'
   825  00FF8D  72                 	db	114	;'r'
   826  00FF8E  79                 	db	121	;'y'
   827  00FF8F  64                 	db	100	;'d'
   828  00FF90  61                 	db	97	;'a'
   829  00FF91  79                 	db	121	;'y'
   830  00FF92  00                 	db	0
   831  00FF93                     STR_17:
   832  00FF93  46                 	db	70	;'F'
   833  00FF94  72                 	db	114	;'r'
   834  00FF95  65                 	db	101	;'e'
   835  00FF96  71                 	db	113	;'q'
   836  00FF97  75                 	db	117	;'u'
   837  00FF98  65                 	db	101	;'e'
   838  00FF99  6E                 	db	110	;'n'
   839  00FF9A  63                 	db	99	;'c'
   840  00FF9B  79                 	db	121	;'y'
   841  00FF9C  3A                 	db	58	;':'
   842  00FF9D  20                 	db	32
   843  00FF9E  00                 	db	0
   844  00FF9F                     STR_41:
   845  00FF9F  52                 	db	82	;'R'
   846  00FFA0  65                 	db	101	;'e'
   847  00FFA1  70                 	db	112	;'p'
   848  00FFA2  65                 	db	101	;'e'
   849  00FFA3  74                 	db	116	;'t'
   850  00FFA4  69                 	db	105	;'i'
   851  00FFA5  74                 	db	116	;'t'
   852  00FFA6  69                 	db	105	;'i'
   853  00FFA7  6F                 	db	111	;'o'
   854  00FFA8  6E                 	db	110	;'n'
   855  00FFA9  3A                 	db	58	;':'
   856  00FFAA  00                 	db	0
   857  00FFAB                     STR_48:
   858  00FFAB  46                 	db	70	;'F'
   859  00FFAC  72                 	db	114	;'r'
   860  00FFAD  65                 	db	101	;'e'
   861  00FFAE  71                 	db	113	;'q'
   862  00FFAF  75                 	db	117	;'u'
   863  00FFB0  65                 	db	101	;'e'
   864  00FFB1  6E                 	db	110	;'n'
   865  00FFB2  63                 	db	99	;'c'
   866  00FFB3  79                 	db	121	;'y'
   867  00FFB4  3A                 	db	58	;':'
   868  00FFB5  00                 	db	0
   869  00FFB6                     STR_14:
   870  00FFB6  28                 	db	40
   871  00FFB7  31                 	db	49	;'1'
   872  00FFB8  29                 	db	41
   873  00FFB9  4D                 	db	77	;'M'
   874  00FFBA  6F                 	db	111	;'o'
   875  00FFBB  72                 	db	114	;'r'
   876  00FFBC  6E                 	db	110	;'n'
   877  00FFBD  69                 	db	105	;'i'
   878  00FFBE  6E                 	db	110	;'n'
   879  00FFBF  67                 	db	103	;'g'
   880  00FFC0  00                 	db	0
   881  00FFC1                     STR_23:
   882  00FFC1  2D                 	db	45
   883  00FFC2  20                 	db	32
   884  00FFC3  4D                 	db	77	;'M'
   885  00FFC4  6F                 	db	111	;'o'
   886  00FFC5  72                 	db	114	;'r'
   887  00FFC6  6E                 	db	110	;'n'
   888  00FFC7  69                 	db	105	;'i'
   889  00FFC8  6E                 	db	110	;'n'
   890  00FFC9  67                 	db	103	;'g'
   891  00FFCA  73                 	db	115	;'s'
   892  00FFCB  00                 	db	0
   893  00FFCC                     STR_27:
   894  00FFCC  2D                 	db	45
   895  00FFCD  20                 	db	32
   896  00FFCE  45                 	db	69	;'E'
   897  00FFCF  76                 	db	118	;'v'
   898  00FFD0  65                 	db	101	;'e'
   899  00FFD1  72                 	db	114	;'r'
   900  00FFD2  79                 	db	121	;'y'
   901  00FFD3  64                 	db	100	;'d'
   902  00FFD4  61                 	db	97	;'a'
   903  00FFD5  79                 	db	121	;'y'
   904  00FFD6  00                 	db	0
   905  00FFD7                     STR_53:
   906  00FFD7  52                 	db	82	;'R'
   907  00FFD8  75                 	db	117	;'u'
   908  00FFD9  6E                 	db	110	;'n'
   909  00FFDA  20                 	db	32
   910  00FFDB  25                 	db	37
   911  00FFDC  64                 	db	100	;'d'
   912  00FFDD  20                 	db	32
   913  00FFDE  00                 	db	0
   914  00FFDF                     STR_9:
   915  00FFDF  20                 	db	32
   916  00FFE0  20                 	db	32
   917  00FFE1  20                 	db	32
   918  00FFE2  46                 	db	70	;'F'
   919  00FFE3  3A                 	db	58	;':'
   920  00FFE4  20                 	db	32
   921  00FFE5  5F                 	db	95	;'_'
   922  00FFE6  00                 	db	0
   923  00FFE7                     STR_10:
   924  00FFE7  20                 	db	32
   925  00FFE8  20                 	db	32
   926  00FFE9  20                 	db	32
   927  00FFEA  4C                 	db	76	;'L'
   928  00FFEB  3A                 	db	58	;':'
   929  00FFEC  20                 	db	32
   930  00FFED  5F                 	db	95	;'_'
   931  00FFEE  00                 	db	0
   932  00FFEF                     STR_8:
   933  00FFEF  20                 	db	32
   934  00FFF0  20                 	db	32
   935  00FFF1  20                 	db	32
   936  00FFF2  52                 	db	82	;'R'
   937  00FFF3  3A                 	db	58	;':'
   938  00FFF4  20                 	db	32
   939  00FFF5  5F                 	db	95	;'_'
   940  00FFF6  00                 	db	0
   941  00FFF7                     STR_34:
   942  00FFF7  52                 	db	82	;'R'
   943  00FFF8  75                 	db	117	;'u'
   944  00FFF9  6E                 	db	110	;'n'
   945  00FFFA  20                 	db	32
   946  00FFFB  25                 	db	37
   947  00FFFC  64                 	db	100	;'d'
   948  00FFFD  00                 	db	0
   949  0000                     
   950                           ; #config settings
   951  00FFFE  00                 	db	0	; dummy byte at the end
   952  0000                     
   953                           	psect	cinit
   954  00128E                     __pcinit:
   955                           	opt stack 0
   956  00128E                     start_initialization:
   957                           	opt stack 0
   958  00128E                     __initialization:
   959                           	opt stack 0
   960                           
   961                           ; Initialize objects allocated to COMRAM (6 bytes)
   962                           ; load TBLPTR registers with __pidataCOMRAM
   963  00128E  0EA0               	movlw	low __pidataCOMRAM
   964  001290  6EF6               	movwf	tblptrl,c
   965  001292  0E13               	movlw	high __pidataCOMRAM
   966  001294  6EF7               	movwf	tblptrh,c
   967  001296  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   968  001298  6EF8               	movwf	tblptru,c
   969  00129A  EE00  F065         	lfsr	0,__pdataCOMRAM
   970  00129E  EE10 F006          	lfsr	1,6
   971  0012A2                     copy_data0:
   972  0012A2  0009               	tblrd		*+
   973  0012A4  CFF5 FFEE          	movff	tablat,postinc0
   974  0012A8  50E5               	movf	postdec1,w,c
   975  0012AA  50E1               	movf	fsr1l,w,c
   976  0012AC  E1FA               	bnz	copy_data0
   977                           
   978                           ; Clear objects allocated to COMRAM (10 bytes)
   979  0012AE  EE00  F05B         	lfsr	0,__pbssCOMRAM
   980  0012B2  0E0A               	movlw	10
   981  0012B4                     clear_0:
   982  0012B4  6AEE               	clrf	postinc0,c
   983  0012B6  06E8               	decf	wreg,f,c
   984  0012B8  E1FD               	bnz	clear_0
   985  0012BA                     end_of_initialization:
   986                           	opt stack 0
   987  0012BA                     __end_of__initialization:
   988                           	opt stack 0
   989  0012BA  906B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   990  0012BC  926B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   991  0012BE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   992  0012C0  6EF8               	movwf	tblptru,c
   993  0012C2  0100               	movlb	0
   994  0012C4  EFD3  F006         	goto	_main	;jump to C main() function
   995                           tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           postdec1	equ	0xFE5
  1002                           fsr1l	equ	0xFE1
  1003                           
  1004                           	psect	bssCOMRAM
  1005  00005B                     __pbssCOMRAM:
  1006                           	opt stack 0
  1007  00005B                     _total_time:
  1008                           	opt stack 0
  1009  00005B                     	ds	2
  1010  00005D                     _num_runs:
  1011                           	opt stack 0
  1012  00005D                     	ds	2
  1013  00005F                     _begin_logging:
  1014                           	opt stack 0
  1015  00005F                     	ds	2
  1016  000061                     _begin_operation:
  1017                           	opt stack 0
  1018  000061                     	ds	2
  1019  000063                     	ds	1
  1020  000064                     _LCDinterruptState:
  1021                           	opt stack 0
  1022  000064                     	ds	1
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           postdec1	equ	0xFE5
  1030                           fsr1l	equ	0xFE1
  1031                           
  1032                           	psect	dataCOMRAM
  1033  000065                     __pdataCOMRAM:
  1034                           	opt stack 0
  1035  000065                     operation@F3021:
  1036                           	opt stack 0
  1037  000065                     	ds	6
  1038                           tblptru	equ	0xFF8
  1039                           tblptrh	equ	0xFF7
  1040                           tblptrl	equ	0xFF6
  1041                           tablat	equ	0xFF5
  1042                           postinc0	equ	0xFEE
  1043                           wreg	equ	0xFE8
  1044                           postdec1	equ	0xFE5
  1045                           fsr1l	equ	0xFE1
  1046                           
  1047                           	psect	cstackCOMRAM
  1048  000001                     __pcstackCOMRAM:
  1049                           	opt stack 0
  1050  000001                     ??_interruptHandler:
  1051  000001                     
  1052                           ; 1 bytes @ 0x0
  1053  000001                     	ds	18
  1054  000013                     interruptHandler@keypress:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x12
  1058  000013                     	ds	1
  1059  000014                     ??_isdigit:
  1060  000014                     ??_I2C_Master_Wait:
  1061  000014                     ?___wmul:
  1062                           	opt stack 0
  1063  000014                     ?___lwdiv:
  1064                           	opt stack 0
  1065  000014                     ?___lldiv:
  1066                           	opt stack 0
  1067  000014                     lcdNibble@temp:
  1068                           	opt stack 0
  1069  000014                     ___wmul@multiplier:
  1070                           	opt stack 0
  1071  000014                     ___lwdiv@dividend:
  1072                           	opt stack 0
  1073  000014                     ___lldiv@dividend:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0x13
  1077  000014                     	ds	1
  1078  000015                     lcdNibble@data:
  1079                           	opt stack 0
  1080  000015                     I2C_Master_Read@ackBit:
  1081                           	opt stack 0
  1082  000015                     _isdigit$822:
  1083                           	opt stack 0
  1084  000015                     I2C_Master_Write@byteToWrite:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x14
  1088  000015                     	ds	1
  1089  000016                     lcdInst@data:
  1090                           	opt stack 0
  1091  000016                     putch@data:
  1092                           	opt stack 0
  1093  000016                     I2C_Master_Read@receivedByte:
  1094                           	opt stack 0
  1095  000016                     isdigit@c:
  1096                           	opt stack 0
  1097  000016                     ___wmul@multiplicand:
  1098                           	opt stack 0
  1099  000016                     ___lwdiv@divisor:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x15
  1103  000016                     	ds	1
  1104  000017                     ??_initLCD:
  1105  000017                     lcd_shift_cursor@direction:
  1106                           	opt stack 0
  1107                           
  1108                           ; 1 bytes @ 0x16
  1109  000017                     	ds	1
  1110  000018                     lcd_shift_cursor@numChars:
  1111                           	opt stack 0
  1112  000018                     ___wmul@product:
  1113                           	opt stack 0
  1114  000018                     ___lwdiv@quotient:
  1115                           	opt stack 0
  1116  000018                     ___lldiv@divisor:
  1117                           	opt stack 0
  1118                           
  1119                           ; 4 bytes @ 0x17
  1120  000018                     	ds	1
  1121  000019                     lcd_shift_cursor@n:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x18
  1125  000019                     	ds	1
  1126  00001A                     lcd_set_cursor@y:
  1127                           	opt stack 0
  1128  00001A                     ___lwdiv@counter:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x19
  1132  00001A                     	ds	1
  1133  00001B                     ??_lcd_set_cursor:
  1134  00001B                     ?___lwmod:
  1135                           	opt stack 0
  1136  00001B                     ___lwmod@dividend:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x1A
  1140  00001B                     	ds	1
  1141  00001C                     lcd_set_cursor@x:
  1142                           	opt stack 0
  1143  00001C                     ___lldiv@quotient:
  1144                           	opt stack 0
  1145                           
  1146                           ; 4 bytes @ 0x1B
  1147  00001C                     	ds	1
  1148  00001D                     ___lwmod@divisor:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x1C
  1152  00001D                     	ds	2
  1153  00001F                     ___lwmod@counter:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x1E
  1157  00001F                     	ds	1
  1158  000020                     ?_printf:
  1159                           	opt stack 0
  1160  000020                     ___lldiv@counter:
  1161                           	opt stack 0
  1162  000020                     printf@f:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x1F
  1166  000020                     	ds	1
  1167  000021                     I2C_Master_Init@clockFreq:
  1168                           	opt stack 0
  1169                           
  1170                           ; 4 bytes @ 0x20
  1171  000021                     	ds	4
  1172  000025                     ??_I2C_Master_Init:
  1173                           
  1174                           ; 1 bytes @ 0x24
  1175  000025                     	ds	9
  1176  00002E                     ??_printf:
  1177                           
  1178                           ; 1 bytes @ 0x2D
  1179  00002E                     	ds	4
  1180  000032                     printf@idx:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x31
  1184  000032                     	ds	1
  1185  000033                     printf@ap:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x32
  1189  000033                     	ds	2
  1190  000035                     printf@prec:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x34
  1194  000035                     	ds	1
  1195  000036                     printf@val:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x35
  1199  000036                     	ds	2
  1200  000038                     printf@flag:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x37
  1204  000038                     	ds	1
  1205  000039                     printf@width:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x38
  1209  000039                     	ds	2
  1210  00003B                     printf@c:
  1211                           	opt stack 0
  1212                           
  1213                           ; 1 bytes @ 0x3A
  1214  00003B                     	ds	1
  1215  00003C                     ??_operation:
  1216                           
  1217                           ; 1 bytes @ 0x3B
  1218  00003C                     	ds	2
  1219  00003E                     operation@keypress_410:
  1220                           	opt stack 0
  1221                           
  1222                           ; 1 bytes @ 0x3D
  1223  00003E                     	ds	1
  1224  00003F                     operation@keypress_414:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x3E
  1228  00003F                     	ds	1
  1229  000040                     operation@keypress_418:
  1230                           	opt stack 0
  1231                           
  1232                           ; 1 bytes @ 0x3F
  1233  000040                     	ds	1
  1234  000041                     operation@keypress_426:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x40
  1238  000041                     	ds	1
  1239  000042                     operation@keypress_433:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x41
  1243  000042                     	ds	1
  1244  000043                     operation@keypress_438:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x42
  1248  000043                     	ds	1
  1249  000044                     operation@frequency:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x43
  1253  000044                     	ds	1
  1254  000045                     operation@repetition:
  1255                           	opt stack 0
  1256                           
  1257                           ; 1 bytes @ 0x44
  1258  000045                     	ds	1
  1259  000046                     operation@keypress:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0x45
  1263  000046                     	ds	1
  1264  000047                     operation@keypress_383:
  1265                           	opt stack 0
  1266                           
  1267                           ; 1 bytes @ 0x46
  1268  000047                     	ds	1
  1269  000048                     operation@keypress_396:
  1270                           	opt stack 0
  1271                           
  1272                           ; 1 bytes @ 0x47
  1273  000048                     	ds	1
  1274  000049                     operation@keypress_384:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x48
  1278  000049                     	ds	1
  1279  00004A                     operation@keypress_391:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x49
  1283  00004A                     	ds	1
  1284  00004B                     operation@prescription:
  1285                           	opt stack 0
  1286                           
  1287                           ; 6 bytes @ 0x4A
  1288  00004B                     	ds	6
  1289  000051                     ??_main:
  1290                           
  1291                           ; 1 bytes @ 0x50
  1292  000051                     	ds	2
  1293  000053                     main@time:
  1294                           	opt stack 0
  1295                           
  1296                           ; 7 bytes @ 0x52
  1297  000053                     	ds	7
  1298  00005A                     main@i:
  1299                           	opt stack 0
  1300                           
  1301                           ; 1 bytes @ 0x59
  1302  00005A                     	ds	1
  1303                           tblptru	equ	0xFF8
  1304                           tblptrh	equ	0xFF7
  1305                           tblptrl	equ	0xFF6
  1306                           tablat	equ	0xFF5
  1307                           postinc0	equ	0xFEE
  1308                           wreg	equ	0xFE8
  1309                           postdec1	equ	0xFE5
  1310                           fsr1l	equ	0xFE1
  1311                           
  1312 ;;
  1313 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1314 ;;
  1315 ;; *************** function _main *****************
  1316 ;; Defined at:
  1317 ;;		line 39 in file "main.c"
  1318 ;; Parameters:    Size  Location     Type
  1319 ;;		None
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;  time            7   82[COMRAM] unsigned char [7]
  1322 ;;  i               1   89[COMRAM] unsigned char 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  1    wreg      void 
  1325 ;; Registers used:
  1326 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1333 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1334 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1335 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1336 ;;Total ram usage:       10 bytes
  1337 ;; Hardware stack levels required when called:    6
  1338 ;; This function calls:
  1339 ;;		_I2C_Master_Init
  1340 ;;		_I2C_Master_Read
  1341 ;;		_I2C_Master_Start
  1342 ;;		_I2C_Master_Stop
  1343 ;;		_I2C_Master_Write
  1344 ;;		_initLCD
  1345 ;;		_lcdInst
  1346 ;;		_logging
  1347 ;;		_operation
  1348 ;;		_printf
  1349 ;; This function is called by:
  1350 ;;		Startup code after reset
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           	psect	text0
  1355  000DA6                     __ptext0:
  1356                           	opt stack 0
  1357  000DA6                     _main:
  1358                           	opt stack 25
  1359                           
  1360                           ;main.c: 45: LATA = 0x00;
  1361                           
  1362                           ;incstack = 0
  1363  000DA6  0E00               	movlw	0
  1364  000DA8  6E89               	movwf	3977,c	;volatile
  1365                           
  1366                           ;main.c: 46: LATB = 0x00;
  1367  000DAA  0E00               	movlw	0
  1368  000DAC  6E8A               	movwf	3978,c	;volatile
  1369                           
  1370                           ;main.c: 47: LATC = 0x00;
  1371  000DAE  0E00               	movlw	0
  1372  000DB0  6E8B               	movwf	3979,c	;volatile
  1373                           
  1374                           ;main.c: 48: LATD = 0x00;
  1375  000DB2  0E00               	movlw	0
  1376  000DB4  6E8C               	movwf	3980,c	;volatile
  1377                           
  1378                           ;main.c: 49: LATE = 0x00;
  1379  000DB6  0E00               	movlw	0
  1380  000DB8  6E8D               	movwf	3981,c	;volatile
  1381                           
  1382                           ;main.c: 53: TRISA = 0xFF;
  1383  000DBA  6892               	setf	3986,c	;volatile
  1384                           
  1385                           ;main.c: 54: TRISB = 0xFF;
  1386  000DBC  6893               	setf	3987,c	;volatile
  1387                           
  1388                           ;main.c: 55: TRISC = 0b10000000;
  1389  000DBE  0E80               	movlw	128
  1390  000DC0  6E94               	movwf	3988,c	;volatile
  1391                           
  1392                           ;main.c: 59: TRISD = 0x00;
  1393  000DC2  0E00               	movlw	0
  1394  000DC4  6E95               	movwf	3989,c	;volatile
  1395                           
  1396                           ;main.c: 60: TRISE = 0x00;
  1397  000DC6  0E00               	movlw	0
  1398  000DC8  6E96               	movwf	3990,c	;volatile
  1399                           
  1400                           ;main.c: 63: ADCON0 = 0x00;
  1401  000DCA  0E00               	movlw	0
  1402  000DCC  6EC2               	movwf	4034,c	;volatile
  1403                           
  1404                           ;main.c: 64: ADCON1 = 0b00001111;
  1405  000DCE  0E0F               	movlw	15
  1406  000DD0  6EC1               	movwf	4033,c	;volatile
  1407                           
  1408                           ;main.c: 66: INT1IE = 1;
  1409  000DD2  86F0               	bsf	intcon3,3,c	;volatile
  1410                           
  1411                           ;main.c: 67: (INTCONbits.GIE = 1);
  1412  000DD4  8EF2               	bsf	intcon,7,c	;volatile
  1413                           
  1414                           ;main.c: 72: initLCD();
  1415  000DD6  EC00  F009         	call	_initLCD	;wreg free
  1416                           
  1417                           ;main.c: 74: I2C_Master_Init(100000);
  1418  000DDA  0EA0               	movlw	160
  1419  000DDC  6E21               	movwf	I2C_Master_Init@clockFreq,c
  1420  000DDE  0E86               	movlw	134
  1421  000DE0  6E22               	movwf	I2C_Master_Init@clockFreq+1,c
  1422  000DE2  0E01               	movlw	1
  1423  000DE4  6E23               	movwf	I2C_Master_Init@clockFreq+2,c
  1424  000DE6  0E00               	movlw	0
  1425  000DE8  6E24               	movwf	I2C_Master_Init@clockFreq+3,c
  1426  000DEA  ECA9  F008         	call	_I2C_Master_Init	;wreg free
  1427  000DEE                     
  1428                           ;main.c: 89: I2C_Master_Start();
  1429  000DEE  ECCC  F009         	call	_I2C_Master_Start	;wreg free
  1430                           
  1431                           ;main.c: 90: I2C_Master_Write(0b11010000);
  1432  000DF2  0E00               	movlw	0
  1433  000DF4  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  1434  000DF6  0ED0               	movlw	208
  1435  000DF8  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  1436  000DFA  ECC3  F009         	call	_I2C_Master_Write	;wreg free
  1437                           
  1438                           ;main.c: 91: I2C_Master_Write(0x00);
  1439  000DFE  0E00               	movlw	0
  1440  000E00  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  1441  000E02  0E00               	movlw	0
  1442  000E04  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  1443  000E06  ECC3  F009         	call	_I2C_Master_Write	;wreg free
  1444                           
  1445                           ;main.c: 92: I2C_Master_Stop();
  1446  000E0A  ECC8  F009         	call	_I2C_Master_Stop	;wreg free
  1447                           
  1448                           ;main.c: 95: I2C_Master_Start();
  1449  000E0E  ECCC  F009         	call	_I2C_Master_Start	;wreg free
  1450                           
  1451                           ;main.c: 96: I2C_Master_Write(0b11010001);
  1452  000E12  0E00               	movlw	0
  1453  000E14  6E16               	movwf	I2C_Master_Write@byteToWrite+1,c
  1454  000E16  0ED1               	movlw	209
  1455  000E18  6E15               	movwf	I2C_Master_Write@byteToWrite,c
  1456  000E1A  ECC3  F009         	call	_I2C_Master_Write	;wreg free
  1457                           
  1458                           ;main.c: 97: for(i = 0; i < 6; i++){
  1459  000E1E  0E00               	movlw	0
  1460  000E20  6E5A               	movwf	main@i,c
  1461  000E22                     l2802:
  1462  000E22  0E05               	movlw	5
  1463  000E24  645A               	cpfsgt	main@i,c
  1464  000E26  D001               	goto	l151
  1465  000E28  D00E               	goto	u2060
  1466  000E2A                     l151:
  1467                           
  1468                           ;main.c: 98: time[i] = I2C_Master_Read(0);
  1469  000E2A  505A               	movf	main@i,w,c
  1470  000E2C  0D01               	mullw	1
  1471  000E2E  0E53               	movlw	low main@time
  1472  000E30  24F3               	addwf	prodl,w,c
  1473  000E32  6ED9               	movwf	fsr2l,c
  1474  000E34  0E00               	movlw	high main@time
  1475  000E36  20F4               	addwfc	prodh,w,c
  1476  000E38  6EDA               	movwf	fsr2h,c
  1477  000E3A  0E00               	movlw	0
  1478  000E3C  EC77  F009         	call	_I2C_Master_Read
  1479  000E40  6EDF               	movwf	indf2,c
  1480  000E42  2A5A               	incf	main@i,f,c
  1481  000E44  D7EE               	goto	l2802
  1482  000E46                     u2060:
  1483                           
  1484                           ;main.c: 99: }
  1485                           ;main.c: 100: time[6] = I2C_Master_Read(1);
  1486  000E46  0E01               	movlw	1
  1487  000E48  EC77  F009         	call	_I2C_Master_Read
  1488  000E4C  6E59               	movwf	main@time+6,c
  1489                           
  1490                           ;main.c: 101: I2C_Master_Stop();
  1491  000E4E  ECC8  F009         	call	_I2C_Master_Stop	;wreg free
  1492                           
  1493                           ;main.c: 103: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1494  000E52  0E0C               	movlw	12
  1495  000E54  ECB0  F009         	call	_lcdInst
  1496                           
  1497                           ;main.c: 105: if (begin_operation || begin_logging) {
  1498  000E58  5061               	movf	_begin_operation,w,c
  1499  000E5A  1062               	iorwf	_begin_operation+1,w,c
  1500  000E5C  A4D8               	btfss	status,2,c
  1501  000E5E  D045               	goto	l156
  1502  000E60  505F               	movf	_begin_logging,w,c
  1503  000E62  1060               	iorwf	_begin_logging+1,w,c
  1504  000E64  A4D8               	btfss	status,2,c
  1505  000E66  D041               	goto	l156
  1506                           
  1507                           ;main.c: 107: }
  1508                           ;main.c: 110: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1509                           
  1510                           ;main.c: 106: break;
  1511  000E68  0E80               	movlw	128
  1512  000E6A  ECB0  F009         	call	_lcdInst
  1513  000E6E  0E41               	movlw	65
  1514  000E70  6E51               	movwf	??_main& (0+255),c
  1515  000E72  0EEE               	movlw	238
  1516  000E74                     u2137:
  1517  000E74  2EE8               	decfsz	wreg,f,c
  1518  000E76  D7FE               	bra	u2137
  1519  000E78  2E51               	decfsz	??_main& (0+255),f,c
  1520  000E7A  D7FC               	bra	u2137
  1521  000E7C  D000               	nop2	
  1522                           
  1523                           ;main.c: 111: printf("%02x/%02x/%02x    %02x:%02x:%02x", time[5],time[4],time[6],time[2]
      +                          ,time[1],time[0]);
  1524  000E7E  0E33               	movlw	low STR_1
  1525  000E80  6E20               	movwf	printf@f,c
  1526  000E82  0EFD               	movlw	high STR_1
  1527  000E84  6E21               	movwf	printf@f+1,c
  1528  000E86  C058  F022         	movff	main@time+5,?_printf+2
  1529  000E8A  6A23               	clrf	?_printf+3,c
  1530  000E8C  C057  F024         	movff	main@time+4,?_printf+4
  1531  000E90  6A25               	clrf	?_printf+5,c
  1532  000E92  C059  F026         	movff	main@time+6,?_printf+6
  1533  000E96  6A27               	clrf	?_printf+7,c
  1534  000E98  C055  F028         	movff	main@time+2,?_printf+8
  1535  000E9C  6A29               	clrf	?_printf+9,c
  1536  000E9E  C054  F02A         	movff	main@time+1,?_printf+10
  1537  000EA2  6A2B               	clrf	?_printf+11,c
  1538  000EA4  C053  F02C         	movff	main@time,?_printf+12
  1539  000EA8  6A2D               	clrf	?_printf+13,c
  1540  000EAA  EC4D  F005         	call	_printf	;wreg free
  1541                           
  1542                           ;main.c: 112: lcdInst(0x94);;
  1543  000EAE  0E94               	movlw	148
  1544  000EB0  ECB0  F009         	call	_lcdInst
  1545                           
  1546                           ;main.c: 113: printf("     * to BEGIN     ");
  1547  000EB4  0EAA               	movlw	low STR_2
  1548  000EB6  6E20               	movwf	printf@f,c
  1549  000EB8  0EFD               	movlw	high STR_2
  1550  000EBA  6E21               	movwf	printf@f+1,c
  1551  000EBC  EC4D  F005         	call	_printf	;wreg free
  1552                           
  1553                           ;main.c: 114: lcdInst(0xD4);;
  1554  000EC0  0ED4               	movlw	212
  1555  000EC2  ECB0  F009         	call	_lcdInst
  1556                           
  1557                           ;main.c: 115: printf("    # for LOGGING   ");
  1558  000EC6  0EE9               	movlw	low STR_3
  1559  000EC8  6E20               	movwf	printf@f,c
  1560  000ECA  0EFD               	movlw	high STR_3
  1561  000ECC  6E21               	movwf	printf@f+1,c
  1562  000ECE  EC4D  F005         	call	_printf	;wreg free
  1563                           
  1564                           ;main.c: 116: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1565  000ED2  0E33               	movlw	51
  1566  000ED4  6E52               	movwf	(??_main+1)& (0+255),c
  1567  000ED6  0EBB               	movlw	187
  1568  000ED8  6E51               	movwf	??_main& (0+255),c
  1569  000EDA  0EE0               	movlw	224
  1570  000EDC                     u2147:
  1571  000EDC  2EE8               	decfsz	wreg,f,c
  1572  000EDE  D7FE               	bra	u2147
  1573  000EE0  2E51               	decfsz	??_main& (0+255),f,c
  1574  000EE2  D7FC               	bra	u2147
  1575  000EE4  2E52               	decfsz	(??_main+1)& (0+255),f,c
  1576  000EE6  D7FA               	bra	u2147
  1577  000EE8  D782               	goto	l150
  1578  000EEA                     l156:
  1579                           
  1580                           ;main.c: 117: }
  1581                           ;main.c: 119: if (begin_operation) {
  1582  000EEA  5061               	movf	_begin_operation,w,c
  1583  000EEC  1062               	iorwf	_begin_operation+1,w,c
  1584  000EEE  B4D8               	btfsc	status,2,c
  1585  000EF0  D008               	goto	l158
  1586                           
  1587                           ;main.c: 120: begin_operation = 0;
  1588  000EF2  0E00               	movlw	0
  1589  000EF4  6E62               	movwf	_begin_operation+1,c
  1590  000EF6  0E00               	movlw	0
  1591  000EF8  6E61               	movwf	_begin_operation,c
  1592                           
  1593                           ;main.c: 121: operation();
  1594  000EFA  EC09  F000         	call	_operation	;wreg free
  1595                           
  1596                           ;main.c: 122: }
  1597  000EFE  EF07  F000         	goto	start
  1598  000F02                     l158:
  1599                           
  1600                           ;main.c: 123: else if (begin_logging) {
  1601  000F02  505F               	movf	_begin_logging,w,c
  1602  000F04  1060               	iorwf	_begin_logging+1,w,c
  1603  000F06  B4D8               	btfsc	status,2,c
  1604  000F08  EF07  F000         	goto	start
  1605                           
  1606                           ;main.c: 124: begin_logging = 0;
  1607  000F0C  0E00               	movlw	0
  1608  000F0E  6E60               	movwf	_begin_logging+1,c
  1609  000F10  0E00               	movlw	0
  1610  000F12  6E5F               	movwf	_begin_logging,c
  1611                           
  1612                           ;main.c: 125: logging();
  1613  000F14  ECD3  F009         	call	_logging	;wreg free
  1614  000F18  EF07  F000         	goto	start
  1615  000F1C                     __end_of_main:
  1616                           	opt stack 0
  1617                           tblptru	equ	0xFF8
  1618                           tblptrh	equ	0xFF7
  1619                           tblptrl	equ	0xFF6
  1620                           tablat	equ	0xFF5
  1621                           prodh	equ	0xFF4
  1622                           prodl	equ	0xFF3
  1623                           intcon	equ	0xFF2
  1624                           intcon3	equ	0xFF0
  1625                           postinc0	equ	0xFEE
  1626                           wreg	equ	0xFE8
  1627                           postdec1	equ	0xFE5
  1628                           fsr1l	equ	0xFE1
  1629                           indf2	equ	0xFDF
  1630                           fsr2h	equ	0xFDA
  1631                           fsr2l	equ	0xFD9
  1632                           status	equ	0xFD8
  1633                           
  1634 ;; *************** function _operation *****************
  1635 ;; Defined at:
  1636 ;;		line 129 in file "main.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;		None
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;  keypress        1   72[COMRAM] unsigned char 
  1641 ;;  keypress        1   70[COMRAM] unsigned char 
  1642 ;;  keypress        1   69[COMRAM] unsigned char 
  1643 ;;  keypress        1   66[COMRAM] unsigned char 
  1644 ;;  keypress        1   65[COMRAM] unsigned char 
  1645 ;;  keypress        1   64[COMRAM] unsigned char 
  1646 ;;  keypress        1   63[COMRAM] unsigned char 
  1647 ;;  keypress        1   62[COMRAM] unsigned char 
  1648 ;;  keypress        1   61[COMRAM] unsigned char 
  1649 ;;  keypress        1   71[COMRAM] unsigned char 
  1650 ;;  keypress        1   73[COMRAM] unsigned char 
  1651 ;;  prescription    6   74[COMRAM] int [3]
  1652 ;;  repetition      1   68[COMRAM] enum E3002
  1653 ;;  frequency       1   67[COMRAM] enum E3008
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1664 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;Total ram usage:       21 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    5
  1670 ;; This function calls:
  1671 ;;		_lcdInst
  1672 ;;		_lcd_set_cursor
  1673 ;;		_printf
  1674 ;;		_putch
  1675 ;; This function is called by:
  1676 ;;		_main
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text1
  1681  000012                     __ptext1:
  1682                           	opt stack 0
  1683  000012                     _operation:
  1684                           	opt stack 25
  1685                           
  1686                           ;main.c: 131: (INTCONbits.GIE = 0);
  1687                           
  1688                           ;incstack = 0
  1689  000012  9EF2               	bcf	intcon,7,c	;volatile
  1690                           
  1691                           ;main.c: 133: int prescription[3] = {-1, -1, -1};
  1692  000014  EE20  F065         	lfsr	2,operation@F3021
  1693  000018  EE10  F04B         	lfsr	1,operation@prescription
  1694  00001C  0E05               	movlw	5
  1695  00001E                     u1491:
  1696  00001E  CFDB FFE3          	movff	plusw2,plusw1
  1697  000022  06E8               	decf	wreg,f,c
  1698  000024  E2FC               	bc	u1491
  1699                           
  1700                           ;main.c: 134: enum rep repetition = na_rep;
  1701  000026  0E04               	movlw	4
  1702  000028  6E45               	movwf	operation@repetition,c
  1703                           
  1704                           ;main.c: 135: enum freq frequency = na_freq;
  1705  00002A  0E03               	movlw	3
  1706  00002C  6E44               	movwf	operation@frequency,c
  1707                           
  1708                           ;main.c: 137: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1709  00002E  0E01               	movlw	1
  1710  000030  ECB0  F009         	call	_lcdInst
  1711  000034  0EC3               	movlw	195
  1712  000036  6E3C               	movwf	??_operation& (0+255),c
  1713  000038  0ECD               	movlw	205
  1714  00003A                     u2157:
  1715  00003A  2EE8               	decfsz	wreg,f,c
  1716  00003C  D7FE               	bra	u2157
  1717  00003E  2E3C               	decfsz	??_operation& (0+255),f,c
  1718  000040  D7FC               	bra	u2157
  1719  000042  F000               	nop	
  1720                           
  1721                           ;main.c: 138: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1722  000044  0E80               	movlw	128
  1723  000046  ECB0  F009         	call	_lcdInst
  1724  00004A  0E41               	movlw	65
  1725  00004C  6E3C               	movwf	??_operation& (0+255),c
  1726  00004E  0EEE               	movlw	238
  1727  000050                     u2167:
  1728  000050  2EE8               	decfsz	wreg,f,c
  1729  000052  D7FE               	bra	u2167
  1730  000054  2E3C               	decfsz	??_operation& (0+255),f,c
  1731  000056  D7FC               	bra	u2167
  1732  000058  D000               	nop2	
  1733                           
  1734                           ;main.c: 139: printf("   After entering   ");
  1735  00005A  0EFE               	movlw	low STR_4
  1736  00005C  6E20               	movwf	printf@f,c
  1737  00005E  0EFD               	movlw	high STR_4
  1738  000060  6E21               	movwf	printf@f+1,c
  1739  000062  EC4D  F005         	call	_printf	;wreg free
  1740                           
  1741                           ;main.c: 140: lcdInst(0xC0);;
  1742  000066  0EC0               	movlw	192
  1743  000068  ECB0  F009         	call	_lcdInst
  1744                           
  1745                           ;main.c: 141: printf("  selection, press  ");
  1746  00006C  0E28               	movlw	low STR_5
  1747  00006E  6E20               	movwf	printf@f,c
  1748  000070  0EFE               	movlw	high STR_5
  1749  000072  6E21               	movwf	printf@f+1,c
  1750  000074  EC4D  F005         	call	_printf	;wreg free
  1751                           
  1752                           ;main.c: 142: lcdInst(0x94);;
  1753  000078  0E94               	movlw	148
  1754  00007A  ECB0  F009         	call	_lcdInst
  1755                           
  1756                           ;main.c: 143: printf("    # to confirm    ");
  1757  00007E  0ED4               	movlw	low STR_6
  1758  000080  6E20               	movwf	printf@f,c
  1759  000082  0EFD               	movlw	high STR_6
  1760  000084  6E21               	movwf	printf@f+1,c
  1761  000086  EC4D  F005         	call	_printf	;wreg free
  1762                           
  1763                           ;main.c: 144: _delay((unsigned long)((1800)*(40000000/4000.0)));
  1764  00008A  0E5C               	movlw	92
  1765  00008C  6E3D               	movwf	(??_operation+1)& (0+255),c
  1766  00008E  0E51               	movlw	81
  1767  000090  6E3C               	movwf	??_operation& (0+255),c
  1768  000092  0E60               	movlw	96
  1769  000094                     u2177:
  1770  000094  2EE8               	decfsz	wreg,f,c
  1771  000096  D7FE               	bra	u2177
  1772  000098  2E3C               	decfsz	??_operation& (0+255),f,c
  1773  00009A  D7FC               	bra	u2177
  1774  00009C  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  1775  00009E  D7FA               	bra	u2177
  1776  0000A0  D000               	nop2	
  1777  0000A2                     
  1778                           ;main.c: 148: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1779  0000A2  0E01               	movlw	1
  1780  0000A4  ECB0  F009         	call	_lcdInst
  1781  0000A8  0EC3               	movlw	195
  1782  0000AA  6E3C               	movwf	??_operation& (0+255),c
  1783  0000AC  0ECD               	movlw	205
  1784  0000AE                     u2187:
  1785  0000AE  2EE8               	decfsz	wreg,f,c
  1786  0000B0  D7FE               	bra	u2187
  1787  0000B2  2E3C               	decfsz	??_operation& (0+255),f,c
  1788  0000B4  D7FC               	bra	u2187
  1789  0000B6  F000               	nop	
  1790                           
  1791                           ;main.c: 149: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1792  0000B8  0E80               	movlw	128
  1793  0000BA  ECB0  F009         	call	_lcdInst
  1794  0000BE  0E41               	movlw	65
  1795  0000C0  6E3C               	movwf	??_operation& (0+255),c
  1796  0000C2  0EEE               	movlw	238
  1797  0000C4                     u2197:
  1798  0000C4  2EE8               	decfsz	wreg,f,c
  1799  0000C6  D7FE               	bra	u2197
  1800  0000C8  2E3C               	decfsz	??_operation& (0+255),f,c
  1801  0000CA  D7FC               	bra	u2197
  1802  0000CC  D000               	nop2	
  1803                           
  1804                           ;main.c: 150: printf("Number of pills:");
  1805  0000CE  0E21               	movlw	low STR_7
  1806  0000D0  6E20               	movwf	printf@f,c
  1807  0000D2  0EFF               	movlw	high STR_7
  1808  0000D4  6E21               	movwf	printf@f+1,c
  1809  0000D6  EC4D  F005         	call	_printf	;wreg free
  1810                           
  1811                           ;main.c: 151: lcdInst(0xC0);;
  1812  0000DA  0EC0               	movlw	192
  1813  0000DC  ECB0  F009         	call	_lcdInst
  1814                           
  1815                           ;main.c: 152: printf("   R: _");
  1816  0000E0  0EEF               	movlw	low STR_8
  1817  0000E2  6E20               	movwf	printf@f,c
  1818  0000E4  0EFF               	movlw	high STR_8
  1819  0000E6  6E21               	movwf	printf@f+1,c
  1820  0000E8  EC4D  F005         	call	_printf	;wreg free
  1821                           
  1822                           ;main.c: 153: lcdInst(0x94);;
  1823  0000EC  0E94               	movlw	148
  1824  0000EE  ECB0  F009         	call	_lcdInst
  1825                           
  1826                           ;main.c: 154: printf("   F: _");
  1827  0000F2  0EDF               	movlw	low STR_9
  1828  0000F4  6E20               	movwf	printf@f,c
  1829  0000F6  0EFF               	movlw	high STR_9
  1830  0000F8  6E21               	movwf	printf@f+1,c
  1831  0000FA  EC4D  F005         	call	_printf	;wreg free
  1832                           
  1833                           ;main.c: 155: lcdInst(0xD4);;
  1834  0000FE  0ED4               	movlw	212
  1835  000100  ECB0  F009         	call	_lcdInst
  1836                           
  1837                           ;main.c: 156: printf("   L: _");
  1838  000104  0EE7               	movlw	low STR_10
  1839  000106  6E20               	movwf	printf@f,c
  1840  000108  0EFF               	movlw	high STR_10
  1841  00010A  6E21               	movwf	printf@f+1,c
  1842  00010C  EC4D  F005         	call	_printf	;wreg free
  1843                           
  1844                           ;main.c: 157: lcd_set_cursor(6, 1);
  1845  000110  0E01               	movlw	1
  1846  000112  6E1A               	movwf	lcd_set_cursor@y,c
  1847  000114  0E06               	movlw	6
  1848  000116  EC71  F008         	call	_lcd_set_cursor
  1849                           
  1850                           ;main.c: 158: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  1851  00011A  0E0F               	movlw	15
  1852  00011C  ECB0  F009         	call	_lcdInst
  1853                           
  1854                           ;main.c: 160: prescription[0] = -1;
  1855  000120  684B               	setf	operation@prescription,c
  1856  000122  684C               	setf	operation@prescription+1,c
  1857                           
  1858                           ;main.c: 161: prescription[1] = -1;
  1859  000124  684D               	setf	operation@prescription+2,c
  1860  000126  684E               	setf	operation@prescription+3,c
  1861                           
  1862                           ;main.c: 162: prescription[2] = -1;
  1863  000128  684F               	setf	operation@prescription+4,c
  1864  00012A  6850               	setf	operation@prescription+5,c
  1865  00012C                     
  1866                           ;main.c: 166: continue;
  1867                           
  1868                           ;main.c: 165: while (PORTBbits.RB1 == 0) {
  1869  00012C  A281               	btfss	3969,1,c	;volatile
  1870  00012E  D7FE               	goto	l167
  1871                           
  1872                           ;main.c: 167: }
  1873                           ;main.c: 169: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1874  000130  3881               	swapf	3969,w,c	;volatile
  1875  000132  0B0F               	andlw	15
  1876  000134  0B0F               	andlw	15
  1877  000136  6E46               	movwf	operation@keypress,c
  1878  000138                     
  1879                           ;main.c: 172: continue;
  1880  000138  B281               	btfsc	3969,1,c	;volatile
  1881  00013A  D7FE               	goto	l172
  1882                           
  1883                           ;main.c: 173: }
  1884                           ;main.c: 175: __nop();
  1885  00013C  F000               	nop	
  1886                           
  1887                           ;main.c: 177: if (keypress == 0 || keypress == 1 || keypress == 13) {
  1888  00013E  5046               	movf	operation@keypress,w,c
  1889  000140  B4D8               	btfsc	status,2,c
  1890  000142  D007               	goto	u1540
  1891  000144  0446               	decf	operation@keypress,w,c
  1892  000146  B4D8               	btfsc	status,2,c
  1893  000148  D004               	goto	u1540
  1894  00014A  0E0D               	movlw	13
  1895  00014C  1846               	xorwf	operation@keypress,w,c
  1896  00014E  A4D8               	btfss	status,2,c
  1897  000150  D02A               	goto	l174
  1898  000152                     u1540:
  1899                           
  1900                           ;main.c: 178: lcd_set_cursor(6, 1);
  1901  000152  0E01               	movlw	1
  1902  000154  6E1A               	movwf	lcd_set_cursor@y,c
  1903  000156  0E06               	movlw	6
  1904  000158  EC71  F008         	call	_lcd_set_cursor
  1905                           
  1906                           ;main.c: 179: putch(keys[keypress]);
  1907  00015C  5046               	movf	operation@keypress,w,c
  1908  00015E  0D01               	mullw	1
  1909  000160  0E03               	movlw	low _keys
  1910  000162  24F3               	addwf	prodl,w,c
  1911  000164  6EF6               	movwf	tblptrl,c
  1912  000166  0EFD               	movlw	high _keys
  1913  000168  20F4               	addwfc	prodh,w,c
  1914  00016A  6EF7               	movwf	tblptrh,c
  1915  00016C                     	if	0	;There are less than 3 active tblptr bytes
  1916  00016C                     	endif
  1917  00016C  0008               	tblrd		*
  1918  00016E  50F5               	movf	tablat,w,c
  1919  000170  ECA6  F009         	call	_putch
  1920                           
  1921                           ;main.c: 181: switch (keypress) {
  1922  000174  D00D               	goto	l177
  1923  000176                     
  1924                           ;main.c: 183: prescription[0] = 1;
  1925  000176  0E00               	movlw	0
  1926  000178  6E4C               	movwf	operation@prescription+1,c
  1927  00017A  0E01               	movlw	1
  1928  00017C  D007               	goto	L2
  1929  00017E                     
  1930                           ;main.c: 186: prescription[0] = 2;
  1931  00017E  0E00               	movlw	0
  1932  000180  6E4C               	movwf	operation@prescription+1,c
  1933  000182  0E02               	movlw	2
  1934  000184  D003               	goto	L2
  1935  000186                     
  1936                           ;main.c: 189: prescription[0] = 0;
  1937  000186  0E00               	movlw	0
  1938  000188  6E4C               	movwf	operation@prescription+1,c
  1939  00018A  0E00               	movlw	0
  1940  00018C                     L2:
  1941  00018C  6E4B               	movwf	operation@prescription,c
  1942                           
  1943                           ;main.c: 191: }
  1944                           
  1945                           ;main.c: 190: break;
  1946  00018E  D7CE               	goto	l167
  1947  000190                     l177:
  1948  000190  5046               	movf	operation@keypress,w,c
  1949                           
  1950                           ; Switch size 1, requested type "space"
  1951                           ; Number of cases is 3, Range of values is 0 to 13
  1952                           ; switch strategies available:
  1953                           ; Name         Instructions Cycles
  1954                           ; simple_byte           10     6 (average)
  1955                           ;	Chosen strategy is simple_byte
  1956  000192  0A00               	xorlw	0	; case 0
  1957  000194  B4D8               	btfsc	status,2,c
  1958  000196  D7EF               	goto	l178
  1959  000198  0A01               	xorlw	1	; case 1
  1960  00019A  B4D8               	btfsc	status,2,c
  1961  00019C  D7F0               	goto	l180
  1962  00019E  0A0C               	xorlw	12	; case 13
  1963  0001A0  B4D8               	btfsc	status,2,c
  1964  0001A2  D7F1               	goto	l181
  1965                           
  1966                           ;main.c: 192: }
  1967  0001A4  D7C3               	goto	l167
  1968  0001A6                     l174:
  1969                           
  1970                           ;main.c: 193: else if (keypress == 14) {
  1971  0001A6  0E0E               	movlw	14
  1972  0001A8  1846               	xorwf	operation@keypress,w,c
  1973  0001AA  A4D8               	btfss	status,2,c
  1974  0001AC  D7BF               	goto	l167
  1975                           
  1976                           ;main.c: 194: if (prescription[0] != -1) {
  1977  0001AE  284B               	incf	operation@prescription,w,c
  1978  0001B0  E103               	bnz	u1560
  1979  0001B2  284C               	incf	operation@prescription+1,w,c
  1980  0001B4  B4D8               	btfsc	status,2,c
  1981  0001B6  D7BA               	goto	l167
  1982  0001B8                     u1560:
  1983                           
  1984                           ;main.c: 195: lcd_set_cursor(6, 2);
  1985  0001B8  0E02               	movlw	2
  1986  0001BA  6E1A               	movwf	lcd_set_cursor@y,c
  1987  0001BC  0E06               	movlw	6
  1988  0001BE  EC71  F008         	call	_lcd_set_cursor
  1989  0001C2                     
  1990                           ;main.c: 203: continue;
  1991                           
  1992                           ;main.c: 202: while (PORTBbits.RB1 == 0) {
  1993                           
  1994                           ;main.c: 197: }
  1995                           ;main.c: 198: }
  1996                           ;main.c: 199: }
  1997                           ;main.c: 201: while (1) {
  1998  0001C2  A281               	btfss	3969,1,c	;volatile
  1999  0001C4  D7FE               	goto	l185
  2000                           
  2001                           ;main.c: 204: }
  2002                           ;main.c: 206: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2003  0001C6  3881               	swapf	3969,w,c	;volatile
  2004  0001C8  0B0F               	andlw	15
  2005  0001CA  0B0F               	andlw	15
  2006  0001CC  6E47               	movwf	operation@keypress_383,c
  2007  0001CE                     
  2008                           ;main.c: 209: continue;
  2009  0001CE  B281               	btfsc	3969,1,c	;volatile
  2010  0001D0  D7FE               	goto	l192
  2011                           
  2012                           ;main.c: 210: }
  2013                           ;main.c: 212: __nop();
  2014  0001D2  F000               	nop	
  2015                           
  2016                           ;main.c: 214: if (keypress == 0 || keypress == 1 || keypress == 13) {
  2017  0001D4  5047               	movf	operation@keypress_383,w,c
  2018  0001D6  B4D8               	btfsc	status,2,c
  2019  0001D8  D007               	goto	u1610
  2020  0001DA  0447               	decf	operation@keypress_383,w,c
  2021  0001DC  B4D8               	btfsc	status,2,c
  2022  0001DE  D004               	goto	u1610
  2023  0001E0  0E0D               	movlw	13
  2024  0001E2  1847               	xorwf	operation@keypress_383,w,c
  2025  0001E4  A4D8               	btfss	status,2,c
  2026  0001E6  D02A               	goto	l194
  2027  0001E8                     u1610:
  2028                           
  2029                           ;main.c: 215: lcd_set_cursor(6, 2);
  2030  0001E8  0E02               	movlw	2
  2031  0001EA  6E1A               	movwf	lcd_set_cursor@y,c
  2032  0001EC  0E06               	movlw	6
  2033  0001EE  EC71  F008         	call	_lcd_set_cursor
  2034                           
  2035                           ;main.c: 216: putch(keys[keypress]);
  2036  0001F2  5047               	movf	operation@keypress_383,w,c
  2037  0001F4  0D01               	mullw	1
  2038  0001F6  0E03               	movlw	low _keys
  2039  0001F8  24F3               	addwf	prodl,w,c
  2040  0001FA  6EF6               	movwf	tblptrl,c
  2041  0001FC  0EFD               	movlw	high _keys
  2042  0001FE  20F4               	addwfc	prodh,w,c
  2043  000200  6EF7               	movwf	tblptrh,c
  2044  000202                     	if	0	;There are less than 3 active tblptr bytes
  2045  000202                     	endif
  2046  000202  0008               	tblrd		*
  2047  000204  50F5               	movf	tablat,w,c
  2048  000206  ECA6  F009         	call	_putch
  2049                           
  2050                           ;main.c: 218: switch (keypress) {
  2051  00020A  D00D               	goto	l197
  2052  00020C                     
  2053                           ;main.c: 220: prescription[1] = 1;
  2054  00020C  0E00               	movlw	0
  2055  00020E  6E4E               	movwf	operation@prescription+3,c
  2056  000210  0E01               	movlw	1
  2057  000212  D007               	goto	L4
  2058  000214                     
  2059                           ;main.c: 223: prescription[1] = 2;
  2060  000214  0E00               	movlw	0
  2061  000216  6E4E               	movwf	operation@prescription+3,c
  2062  000218  0E02               	movlw	2
  2063  00021A  D003               	goto	L4
  2064  00021C                     
  2065                           ;main.c: 226: prescription[1] = 0;
  2066  00021C  0E00               	movlw	0
  2067  00021E  6E4E               	movwf	operation@prescription+3,c
  2068  000220  0E00               	movlw	0
  2069  000222                     L4:
  2070  000222  6E4D               	movwf	operation@prescription+2,c
  2071                           
  2072                           ;main.c: 228: }
  2073                           
  2074                           ;main.c: 227: break;
  2075  000224  D7CE               	goto	l185
  2076  000226                     l197:
  2077  000226  5047               	movf	operation@keypress_383,w,c
  2078                           
  2079                           ; Switch size 1, requested type "space"
  2080                           ; Number of cases is 3, Range of values is 0 to 13
  2081                           ; switch strategies available:
  2082                           ; Name         Instructions Cycles
  2083                           ; simple_byte           10     6 (average)
  2084                           ;	Chosen strategy is simple_byte
  2085  000228  0A00               	xorlw	0	; case 0
  2086  00022A  B4D8               	btfsc	status,2,c
  2087  00022C  D7EF               	goto	l198
  2088  00022E  0A01               	xorlw	1	; case 1
  2089  000230  B4D8               	btfsc	status,2,c
  2090  000232  D7F0               	goto	l200
  2091  000234  0A0C               	xorlw	12	; case 13
  2092  000236  B4D8               	btfsc	status,2,c
  2093  000238  D7F1               	goto	l201
  2094                           
  2095                           ;main.c: 229: }
  2096  00023A  D7C3               	goto	l185
  2097  00023C                     l194:
  2098                           
  2099                           ;main.c: 230: else if (keypress == 14) {
  2100  00023C  0E0E               	movlw	14
  2101  00023E  1847               	xorwf	operation@keypress_383,w,c
  2102  000240  A4D8               	btfss	status,2,c
  2103  000242  D7BF               	goto	l185
  2104                           
  2105                           ;main.c: 231: if (prescription[1] != -1) {
  2106  000244  284D               	incf	operation@prescription+2,w,c
  2107  000246  E103               	bnz	u1630
  2108  000248  284E               	incf	operation@prescription+3,w,c
  2109  00024A  B4D8               	btfsc	status,2,c
  2110  00024C  D7BA               	goto	l185
  2111  00024E                     u1630:
  2112                           
  2113                           ;main.c: 232: lcd_set_cursor(6, 3);
  2114  00024E  0E03               	movlw	3
  2115  000250  6E1A               	movwf	lcd_set_cursor@y,c
  2116  000252  0E06               	movlw	6
  2117  000254  EC71  F008         	call	_lcd_set_cursor
  2118  000258                     
  2119                           ;main.c: 240: continue;
  2120                           
  2121                           ;main.c: 239: while (PORTBbits.RB1 == 0) {
  2122                           
  2123                           ;main.c: 234: }
  2124                           ;main.c: 235: }
  2125                           ;main.c: 236: }
  2126                           ;main.c: 238: while (1) {
  2127  000258  A281               	btfss	3969,1,c	;volatile
  2128  00025A  D7FE               	goto	l205
  2129                           
  2130                           ;main.c: 241: }
  2131                           ;main.c: 243: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2132  00025C  3881               	swapf	3969,w,c	;volatile
  2133  00025E  0B0F               	andlw	15
  2134  000260  0B0F               	andlw	15
  2135  000262  6E49               	movwf	operation@keypress_384,c
  2136  000264                     
  2137                           ;main.c: 246: continue;
  2138  000264  B281               	btfsc	3969,1,c	;volatile
  2139  000266  D7FE               	goto	l212
  2140                           
  2141                           ;main.c: 247: }
  2142                           ;main.c: 249: __nop();
  2143  000268  F000               	nop	
  2144                           
  2145                           ;main.c: 251: if (keypress == 0 || keypress == 1 || keypress == 2 || keypress == 13) {
  2146  00026A  5049               	movf	operation@keypress_384,w,c
  2147  00026C  B4D8               	btfsc	status,2,c
  2148  00026E  D00B               	goto	u1690
  2149  000270  0449               	decf	operation@keypress_384,w,c
  2150  000272  B4D8               	btfsc	status,2,c
  2151  000274  D008               	goto	u1690
  2152  000276  0E02               	movlw	2
  2153  000278  1849               	xorwf	operation@keypress_384,w,c
  2154  00027A  B4D8               	btfsc	status,2,c
  2155  00027C  D004               	goto	u1690
  2156  00027E  0E0D               	movlw	13
  2157  000280  1849               	xorwf	operation@keypress_384,w,c
  2158  000282  A4D8               	btfss	status,2,c
  2159  000284  D031               	goto	l214
  2160  000286                     u1690:
  2161                           
  2162                           ;main.c: 252: lcd_set_cursor(6, 3);
  2163  000286  0E03               	movlw	3
  2164  000288  6E1A               	movwf	lcd_set_cursor@y,c
  2165  00028A  0E06               	movlw	6
  2166  00028C  EC71  F008         	call	_lcd_set_cursor
  2167                           
  2168                           ;main.c: 253: putch(keys[keypress]);
  2169  000290  5049               	movf	operation@keypress_384,w,c
  2170  000292  0D01               	mullw	1
  2171  000294  0E03               	movlw	low _keys
  2172  000296  24F3               	addwf	prodl,w,c
  2173  000298  6EF6               	movwf	tblptrl,c
  2174  00029A  0EFD               	movlw	high _keys
  2175  00029C  20F4               	addwfc	prodh,w,c
  2176  00029E  6EF7               	movwf	tblptrh,c
  2177  0002A0                     	if	0	;There are less than 3 active tblptr bytes
  2178  0002A0                     	endif
  2179  0002A0  0008               	tblrd		*
  2180  0002A2  50F5               	movf	tablat,w,c
  2181  0002A4  ECA6  F009         	call	_putch
  2182                           
  2183                           ;main.c: 255: switch (keypress) {
  2184  0002A8  D011               	goto	l217
  2185  0002AA                     
  2186                           ;main.c: 257: prescription[2] = 1;
  2187  0002AA  0E00               	movlw	0
  2188  0002AC  6E50               	movwf	operation@prescription+5,c
  2189  0002AE  0E01               	movlw	1
  2190  0002B0  D00B               	goto	L7
  2191  0002B2                     
  2192                           ;main.c: 260: prescription[2] = 2;
  2193  0002B2  0E00               	movlw	0
  2194  0002B4  6E50               	movwf	operation@prescription+5,c
  2195  0002B6  0E02               	movlw	2
  2196  0002B8  D007               	goto	L7
  2197  0002BA                     
  2198                           ;main.c: 263: prescription[2] = 3;
  2199  0002BA  0E00               	movlw	0
  2200  0002BC  6E50               	movwf	operation@prescription+5,c
  2201  0002BE  0E03               	movlw	3
  2202  0002C0  D003               	goto	L7
  2203  0002C2                     
  2204                           ;main.c: 266: prescription[2] = 0;
  2205  0002C2  0E00               	movlw	0
  2206  0002C4  6E50               	movwf	operation@prescription+5,c
  2207  0002C6  0E00               	movlw	0
  2208  0002C8                     L7:
  2209  0002C8  6E4F               	movwf	operation@prescription+4,c
  2210                           
  2211                           ;main.c: 268: }
  2212                           
  2213                           ;main.c: 267: break;
  2214  0002CA  D7C6               	goto	l205
  2215  0002CC                     l217:
  2216  0002CC  5049               	movf	operation@keypress_384,w,c
  2217                           
  2218                           ; Switch size 1, requested type "space"
  2219                           ; Number of cases is 4, Range of values is 0 to 13
  2220                           ; switch strategies available:
  2221                           ; Name         Instructions Cycles
  2222                           ; simple_byte           13     7 (average)
  2223                           ;	Chosen strategy is simple_byte
  2224  0002CE  0A00               	xorlw	0	; case 0
  2225  0002D0  B4D8               	btfsc	status,2,c
  2226  0002D2  D7EB               	goto	l218
  2227  0002D4  0A01               	xorlw	1	; case 1
  2228  0002D6  B4D8               	btfsc	status,2,c
  2229  0002D8  D7EC               	goto	l220
  2230  0002DA  0A03               	xorlw	3	; case 2
  2231  0002DC  B4D8               	btfsc	status,2,c
  2232  0002DE  D7ED               	goto	l221
  2233  0002E0  0A0F               	xorlw	15	; case 13
  2234  0002E2  B4D8               	btfsc	status,2,c
  2235  0002E4  D7EE               	goto	l222
  2236                           
  2237                           ;main.c: 269: }
  2238  0002E6  D7B8               	goto	l205
  2239  0002E8                     l214:
  2240                           
  2241                           ;main.c: 270: else if (keypress == 14) {
  2242  0002E8  0E0E               	movlw	14
  2243  0002EA  1849               	xorwf	operation@keypress_384,w,c
  2244  0002EC  A4D8               	btfss	status,2,c
  2245  0002EE  D7B4               	goto	l205
  2246                           
  2247                           ;main.c: 271: if (prescription[2] != -1) {
  2248  0002F0  284F               	incf	operation@prescription+4,w,c
  2249  0002F2  E103               	bnz	l2446
  2250  0002F4  2850               	incf	operation@prescription+5,w,c
  2251  0002F6  B4D8               	btfsc	status,2,c
  2252  0002F8  D7AF               	goto	l205
  2253  0002FA                     l2446:
  2254                           
  2255                           ;main.c: 273: }
  2256                           ;main.c: 274: }
  2257                           ;main.c: 275: }
  2258                           ;main.c: 277: if ((prescription[0] + prescription[1] + prescription[2]) <= 4) {
  2259  0002FA  504F               	movf	operation@prescription+4,w,c
  2260  0002FC  244D               	addwf	operation@prescription+2,w,c
  2261  0002FE  6E3C               	movwf	??_operation& (0+255),c
  2262  000300  5050               	movf	operation@prescription+5,w,c
  2263  000302  204E               	addwfc	operation@prescription+3,w,c
  2264  000304  6E3D               	movwf	(??_operation+1)& (0+255),c
  2265  000306  504B               	movf	operation@prescription,w,c
  2266  000308  263C               	addwf	??_operation,f,c
  2267  00030A  504C               	movf	operation@prescription+1,w,c
  2268  00030C  223D               	addwfc	??_operation+1,f,c
  2269  00030E  BE3D               	btfsc	??_operation+1,7,c
  2270  000310  D032               	goto	l229
  2271  000312  503D               	movf	??_operation+1,w,c
  2272  000314  E104               	bnz	l2452
  2273  000316  0E05               	movlw	5
  2274  000318  5C3C               	subwf	??_operation,w,c
  2275  00031A  A0D8               	btfss	status,0,c
  2276  00031C  D02C               	goto	l229
  2277  00031E                     l2452:
  2278                           
  2279                           ;main.c: 280: else {
  2280                           ;main.c: 281: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2281  00031E  0E0C               	movlw	12
  2282  000320  ECB0  F009         	call	_lcdInst
  2283                           
  2284                           ;main.c: 282: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2285  000324  0E01               	movlw	1
  2286  000326  ECB0  F009         	call	_lcdInst
  2287  00032A  0EC3               	movlw	195
  2288  00032C  6E3C               	movwf	??_operation& (0+255),c
  2289  00032E  0ECD               	movlw	205
  2290  000330                     u2207:
  2291  000330  2EE8               	decfsz	wreg,f,c
  2292  000332  D7FE               	bra	u2207
  2293  000334  2E3C               	decfsz	??_operation& (0+255),f,c
  2294  000336  D7FC               	bra	u2207
  2295  000338  F000               	nop	
  2296                           
  2297                           ;main.c: 283: lcdInst(0xC0);;
  2298  00033A  0EC0               	movlw	192
  2299  00033C  ECB0  F009         	call	_lcdInst
  2300                           
  2301                           ;main.c: 284: printf("   INVALID INPUT    ");
  2302  000340  0EBF               	movlw	low STR_11
  2303  000342  6E20               	movwf	printf@f,c
  2304  000344  0EFD               	movlw	high STR_11
  2305  000346  6E21               	movwf	printf@f+1,c
  2306  000348  EC4D  F005         	call	_printf	;wreg free
  2307                           
  2308                           ;main.c: 285: lcdInst(0x94);;
  2309  00034C  0E94               	movlw	148
  2310  00034E  ECB0  F009         	call	_lcdInst
  2311                           
  2312                           ;main.c: 286: printf("     TRY AGAIN      ");
  2313  000352  0E80               	movlw	low STR_12
  2314  000354  6E20               	movwf	printf@f,c
  2315  000356  0EFD               	movlw	high STR_12
  2316  000358  6E21               	movwf	printf@f+1,c
  2317  00035A  EC4D  F005         	call	_printf	;wreg free
  2318                           
  2319                           ;main.c: 287: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2320  00035E  0E33               	movlw	51
  2321  000360  6E3D               	movwf	(??_operation+1)& (0+255),c
  2322  000362  0EBB               	movlw	187
  2323  000364  6E3C               	movwf	??_operation& (0+255),c
  2324  000366  0EE0               	movlw	224
  2325  000368                     u2217:
  2326  000368  2EE8               	decfsz	wreg,f,c
  2327  00036A  D7FE               	bra	u2217
  2328  00036C  2E3C               	decfsz	??_operation& (0+255),f,c
  2329  00036E  D7FC               	bra	u2217
  2330  000370  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  2331  000372  D7FA               	bra	u2217
  2332  000374  D696               	goto	l166
  2333  000376                     l229:
  2334                           
  2335                           ;main.c: 288: }
  2336                           ;main.c: 289: }
  2337                           ;main.c: 294: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2338  000376  0E01               	movlw	1
  2339  000378  ECB0  F009         	call	_lcdInst
  2340  00037C  0EC3               	movlw	195
  2341  00037E  6E3C               	movwf	??_operation& (0+255),c
  2342  000380  0ECD               	movlw	205
  2343  000382                     u2227:
  2344  000382  2EE8               	decfsz	wreg,f,c
  2345  000384  D7FE               	bra	u2227
  2346  000386  2E3C               	decfsz	??_operation& (0+255),f,c
  2347  000388  D7FC               	bra	u2227
  2348  00038A  F000               	nop	
  2349                           
  2350                           ;main.c: 295: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2351  00038C  0E80               	movlw	128
  2352  00038E  ECB0  F009         	call	_lcdInst
  2353  000392  0E41               	movlw	65
  2354  000394  6E3C               	movwf	??_operation& (0+255),c
  2355  000396  0EEE               	movlw	238
  2356  000398                     u2237:
  2357  000398  2EE8               	decfsz	wreg,f,c
  2358  00039A  D7FE               	bra	u2237
  2359  00039C  2E3C               	decfsz	??_operation& (0+255),f,c
  2360  00039E  D7FC               	bra	u2237
  2361  0003A0  D000               	nop2	
  2362                           
  2363                           ;main.c: 296: printf("Repetition: ");
  2364  0003A2  0E5F               	movlw	low STR_13
  2365  0003A4  6E20               	movwf	printf@f,c
  2366  0003A6  0EFF               	movlw	high STR_13
  2367  0003A8  6E21               	movwf	printf@f+1,c
  2368  0003AA  EC4D  F005         	call	_printf	;wreg free
  2369                           
  2370                           ;main.c: 297: lcdInst(0xC0);;
  2371  0003AE  0EC0               	movlw	192
  2372  0003B0  ECB0  F009         	call	_lcdInst
  2373                           
  2374                           ;main.c: 298: printf("(1)Morning");
  2375  0003B4  0EB6               	movlw	low STR_14
  2376  0003B6  6E20               	movwf	printf@f,c
  2377  0003B8  0EFF               	movlw	high STR_14
  2378  0003BA  6E21               	movwf	printf@f+1,c
  2379  0003BC  EC4D  F005         	call	_printf	;wreg free
  2380                           
  2381                           ;main.c: 299: lcdInst(0x94);;
  2382  0003C0  0E94               	movlw	148
  2383  0003C2  ECB0  F009         	call	_lcdInst
  2384                           
  2385                           ;main.c: 300: printf("(2)Afternoon");
  2386  0003C6  0E6C               	movlw	low STR_15
  2387  0003C8  6E20               	movwf	printf@f,c
  2388  0003CA  0EFF               	movlw	high STR_15
  2389  0003CC  6E21               	movwf	printf@f+1,c
  2390  0003CE  EC4D  F005         	call	_printf	;wreg free
  2391                           
  2392                           ;main.c: 301: lcdInst(0xD4);;
  2393  0003D2  0ED4               	movlw	212
  2394  0003D4  ECB0  F009         	call	_lcdInst
  2395                           
  2396                           ;main.c: 302: printf("(3)Both (4)Alternate");
  2397  0003D8  0E52               	movlw	low STR_16
  2398  0003DA  6E20               	movwf	printf@f,c
  2399  0003DC  0EFE               	movlw	high STR_16
  2400  0003DE  6E21               	movwf	printf@f+1,c
  2401  0003E0  EC4D  F005         	call	_printf	;wreg free
  2402                           
  2403                           ;main.c: 303: lcd_set_cursor(12, 0);
  2404  0003E4  0E00               	movlw	0
  2405  0003E6  6E1A               	movwf	lcd_set_cursor@y,c
  2406  0003E8  0E0C               	movlw	12
  2407  0003EA  EC71  F008         	call	_lcd_set_cursor
  2408  0003EE                     
  2409                           ;main.c: 307: continue;
  2410                           
  2411                           ;main.c: 306: while (PORTBbits.RB1 == 0) {
  2412  0003EE  A281               	btfss	3969,1,c	;volatile
  2413  0003F0  D7FE               	goto	l232
  2414                           
  2415                           ;main.c: 308: }
  2416                           ;main.c: 310: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2417  0003F2  3881               	swapf	3969,w,c	;volatile
  2418  0003F4  0B0F               	andlw	15
  2419  0003F6  0B0F               	andlw	15
  2420  0003F8  6E4A               	movwf	operation@keypress_391,c
  2421  0003FA                     
  2422                           ;main.c: 313: continue;
  2423  0003FA  B281               	btfsc	3969,1,c	;volatile
  2424  0003FC  D7FE               	goto	l237
  2425                           
  2426                           ;main.c: 314: }
  2427                           ;main.c: 316: __nop();
  2428  0003FE  F000               	nop	
  2429                           
  2430                           ;main.c: 318: if (keypress == 0 || keypress == 1 || keypress == 2 || keypress == 4) {
  2431  000400  504A               	movf	operation@keypress_391,w,c
  2432  000402  B4D8               	btfsc	status,2,c
  2433  000404  D00B               	goto	u1780
  2434  000406  044A               	decf	operation@keypress_391,w,c
  2435  000408  B4D8               	btfsc	status,2,c
  2436  00040A  D008               	goto	u1780
  2437  00040C  0E02               	movlw	2
  2438  00040E  184A               	xorwf	operation@keypress_391,w,c
  2439  000410  B4D8               	btfsc	status,2,c
  2440  000412  D004               	goto	u1780
  2441  000414  0E04               	movlw	4
  2442  000416  184A               	xorwf	operation@keypress_391,w,c
  2443  000418  A4D8               	btfss	status,2,c
  2444  00041A  D02B               	goto	l239
  2445  00041C                     u1780:
  2446                           
  2447                           ;main.c: 319: lcd_set_cursor(12, 0);
  2448  00041C  0E00               	movlw	0
  2449  00041E  6E1A               	movwf	lcd_set_cursor@y,c
  2450  000420  0E0C               	movlw	12
  2451  000422  EC71  F008         	call	_lcd_set_cursor
  2452                           
  2453                           ;main.c: 320: putch(keys[keypress]);
  2454  000426  504A               	movf	operation@keypress_391,w,c
  2455  000428  0D01               	mullw	1
  2456  00042A  0E03               	movlw	low _keys
  2457  00042C  24F3               	addwf	prodl,w,c
  2458  00042E  6EF6               	movwf	tblptrl,c
  2459  000430  0EFD               	movlw	high _keys
  2460  000432  20F4               	addwfc	prodh,w,c
  2461  000434  6EF7               	movwf	tblptrh,c
  2462  000436                     	if	0	;There are less than 3 active tblptr bytes
  2463  000436                     	endif
  2464  000436  0008               	tblrd		*
  2465  000438  50F5               	movf	tablat,w,c
  2466  00043A  ECA6  F009         	call	_putch
  2467                           
  2468                           ;main.c: 322: switch(keypress) {
  2469  00043E  D00B               	goto	l242
  2470  000440                     
  2471                           ;main.c: 324: repetition = morning;
  2472  000440  0E00               	movlw	0
  2473  000442  D007               	goto	L11
  2474  000444                     
  2475                           ;main.c: 327: repetition = afternoon;
  2476  000444  0E01               	movlw	1
  2477  000446  D005               	goto	L11
  2478  000448                     
  2479                           ;main.c: 330: repetition = both;
  2480  000448  0E03               	movlw	3
  2481  00044A  D003               	goto	L11
  2482  00044C                     
  2483                           ;main.c: 333: repetition = alt;
  2484  00044C  0E02               	movlw	2
  2485  00044E  D001               	goto	L11
  2486  000450                     
  2487                           ;main.c: 336: repetition = na_rep;
  2488  000450  0E04               	movlw	4
  2489  000452                     L11:
  2490  000452  6E45               	movwf	operation@repetition,c
  2491                           
  2492                           ;main.c: 338: }
  2493                           
  2494                           ;main.c: 337: break;
  2495  000454  D7CC               	goto	l232
  2496  000456                     l242:
  2497  000456  504A               	movf	operation@keypress_391,w,c
  2498                           
  2499                           ; Switch size 1, requested type "space"
  2500                           ; Number of cases is 4, Range of values is 0 to 4
  2501                           ; switch strategies available:
  2502                           ; Name         Instructions Cycles
  2503                           ; simple_byte           13     7 (average)
  2504                           ;	Chosen strategy is simple_byte
  2505  000458  0A00               	xorlw	0	; case 0
  2506  00045A  B4D8               	btfsc	status,2,c
  2507  00045C  D7F1               	goto	l243
  2508  00045E  0A01               	xorlw	1	; case 1
  2509  000460  B4D8               	btfsc	status,2,c
  2510  000462  D7F0               	goto	l245
  2511  000464  0A03               	xorlw	3	; case 2
  2512  000466  B4D8               	btfsc	status,2,c
  2513  000468  D7EF               	goto	l246
  2514  00046A  0A06               	xorlw	6	; case 4
  2515  00046C  B4D8               	btfsc	status,2,c
  2516  00046E  D7EE               	goto	l247
  2517  000470  D7EF               	goto	l248
  2518  000472                     l239:
  2519                           
  2520                           ;main.c: 340: else if (keypress == 14) {
  2521  000472  0E0E               	movlw	14
  2522  000474  184A               	xorwf	operation@keypress_391,w,c
  2523  000476  A4D8               	btfss	status,2,c
  2524  000478  D7BA               	goto	l232
  2525                           
  2526                           ;main.c: 341: if (repetition != na_rep) {
  2527  00047A  0E04               	movlw	4
  2528  00047C  1845               	xorwf	operation@repetition,w,c
  2529  00047E  B4D8               	btfsc	status,2,c
  2530  000480  D7B6               	goto	l232
  2531                           
  2532                           ;main.c: 343: }
  2533                           ;main.c: 344: }
  2534                           ;main.c: 345: }
  2535                           ;main.c: 351: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2536                           
  2537                           ;main.c: 342: break;
  2538  000482  0E01               	movlw	1
  2539  000484  ECB0  F009         	call	_lcdInst
  2540  000488  0EC3               	movlw	195
  2541  00048A  6E3C               	movwf	??_operation& (0+255),c
  2542  00048C  0ECD               	movlw	205
  2543  00048E                     u2247:
  2544  00048E  2EE8               	decfsz	wreg,f,c
  2545  000490  D7FE               	bra	u2247
  2546  000492  2E3C               	decfsz	??_operation& (0+255),f,c
  2547  000494  D7FC               	bra	u2247
  2548  000496  F000               	nop	
  2549                           
  2550                           ;main.c: 352: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2551  000498  0E80               	movlw	128
  2552  00049A  ECB0  F009         	call	_lcdInst
  2553  00049E  0E41               	movlw	65
  2554  0004A0  6E3C               	movwf	??_operation& (0+255),c
  2555  0004A2  0EEE               	movlw	238
  2556  0004A4                     u2257:
  2557  0004A4  2EE8               	decfsz	wreg,f,c
  2558  0004A6  D7FE               	bra	u2257
  2559  0004A8  2E3C               	decfsz	??_operation& (0+255),f,c
  2560  0004AA  D7FC               	bra	u2257
  2561  0004AC  D000               	nop2	
  2562                           
  2563                           ;main.c: 353: printf("Frequency: ");
  2564  0004AE  0E93               	movlw	low STR_17
  2565  0004B0  6E20               	movwf	printf@f,c
  2566  0004B2  0EFF               	movlw	high STR_17
  2567  0004B4  6E21               	movwf	printf@f+1,c
  2568  0004B6  EC4D  F005         	call	_printf	;wreg free
  2569                           
  2570                           ;main.c: 354: lcdInst(0xC0);;
  2571  0004BA  0EC0               	movlw	192
  2572  0004BC  ECB0  F009         	call	_lcdInst
  2573                           
  2574                           ;main.c: 355: printf("(1) Everyday");
  2575  0004C0  0E86               	movlw	low STR_18
  2576  0004C2  6E20               	movwf	printf@f,c
  2577  0004C4  0EFF               	movlw	high STR_18
  2578  0004C6  6E21               	movwf	printf@f+1,c
  2579  0004C8  EC4D  F005         	call	_printf	;wreg free
  2580                           
  2581                           ;main.c: 356: lcdInst(0x94);;
  2582  0004CC  0E94               	movlw	148
  2583  0004CE  ECB0  F009         	call	_lcdInst
  2584                           
  2585                           ;main.c: 357: printf("(2) Alternate (Sun)");
  2586  0004D2  0E7B               	movlw	low STR_19
  2587  0004D4  6E20               	movwf	printf@f,c
  2588  0004D6  0EFE               	movlw	high STR_19
  2589  0004D8  6E21               	movwf	printf@f+1,c
  2590  0004DA  EC4D  F005         	call	_printf	;wreg free
  2591                           
  2592                           ;main.c: 358: lcdInst(0xD4);;
  2593  0004DE  0ED4               	movlw	212
  2594  0004E0  ECB0  F009         	call	_lcdInst
  2595                           
  2596                           ;main.c: 359: printf("(3) Alternate (Mon)");
  2597  0004E4  0E67               	movlw	low STR_20
  2598  0004E6  6E20               	movwf	printf@f,c
  2599  0004E8  0EFE               	movlw	high STR_20
  2600  0004EA  6E21               	movwf	printf@f+1,c
  2601  0004EC  EC4D  F005         	call	_printf	;wreg free
  2602                           
  2603                           ;main.c: 360: lcd_set_cursor(11, 0);
  2604  0004F0  0E00               	movlw	0
  2605  0004F2  6E1A               	movwf	lcd_set_cursor@y,c
  2606  0004F4  0E0B               	movlw	11
  2607  0004F6  EC71  F008         	call	_lcd_set_cursor
  2608  0004FA                     
  2609                           ;main.c: 364: continue;
  2610                           
  2611                           ;main.c: 363: while (PORTBbits.RB1 == 0) {
  2612  0004FA  A281               	btfss	3969,1,c	;volatile
  2613  0004FC  D7FE               	goto	l254
  2614                           
  2615                           ;main.c: 365: }
  2616                           ;main.c: 367: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2617  0004FE  3881               	swapf	3969,w,c	;volatile
  2618  000500  0B0F               	andlw	15
  2619  000502  0B0F               	andlw	15
  2620  000504  6E48               	movwf	operation@keypress_396,c
  2621  000506                     
  2622                           ;main.c: 370: continue;
  2623  000506  B281               	btfsc	3969,1,c	;volatile
  2624  000508  D7FE               	goto	l259
  2625                           
  2626                           ;main.c: 371: }
  2627                           ;main.c: 373: __nop();
  2628  00050A  F000               	nop	
  2629                           
  2630                           ;main.c: 375: if (keypress == 0 || keypress == 1 || keypress == 2) {
  2631  00050C  5048               	movf	operation@keypress_396,w,c
  2632  00050E  B4D8               	btfsc	status,2,c
  2633  000510  D007               	goto	u1850
  2634  000512  0448               	decf	operation@keypress_396,w,c
  2635  000514  B4D8               	btfsc	status,2,c
  2636  000516  D004               	goto	u1850
  2637  000518  0E02               	movlw	2
  2638  00051A  1848               	xorwf	operation@keypress_396,w,c
  2639  00051C  A4D8               	btfss	status,2,c
  2640  00051E  D026               	goto	l261
  2641  000520                     u1850:
  2642                           
  2643                           ;main.c: 376: lcd_set_cursor(11, 0);
  2644  000520  0E00               	movlw	0
  2645  000522  6E1A               	movwf	lcd_set_cursor@y,c
  2646  000524  0E0B               	movlw	11
  2647  000526  EC71  F008         	call	_lcd_set_cursor
  2648                           
  2649                           ;main.c: 377: putch(keys[keypress]);
  2650  00052A  5048               	movf	operation@keypress_396,w,c
  2651  00052C  0D01               	mullw	1
  2652  00052E  0E03               	movlw	low _keys
  2653  000530  24F3               	addwf	prodl,w,c
  2654  000532  6EF6               	movwf	tblptrl,c
  2655  000534  0EFD               	movlw	high _keys
  2656  000536  20F4               	addwfc	prodh,w,c
  2657  000538  6EF7               	movwf	tblptrh,c
  2658  00053A                     	if	0	;There are less than 3 active tblptr bytes
  2659  00053A                     	endif
  2660  00053A  0008               	tblrd		*
  2661  00053C  50F5               	movf	tablat,w,c
  2662  00053E  ECA6  F009         	call	_putch
  2663                           
  2664                           ;main.c: 379: switch(keypress) {
  2665  000542  D009               	goto	l264
  2666  000544                     
  2667                           ;main.c: 381: frequency = every;
  2668  000544  0E00               	movlw	0
  2669  000546  D005               	goto	L14
  2670  000548                     
  2671                           ;main.c: 384: frequency = alt_sun;
  2672  000548  0E01               	movlw	1
  2673  00054A  D003               	goto	L14
  2674  00054C                     
  2675                           ;main.c: 387: frequency = alt_mon;
  2676  00054C  0E02               	movlw	2
  2677  00054E  D001               	goto	L14
  2678  000550                     
  2679                           ;main.c: 390: frequency = na_freq;
  2680  000550  0E03               	movlw	3
  2681  000552                     L14:
  2682  000552  6E44               	movwf	operation@frequency,c
  2683                           
  2684                           ;main.c: 392: }
  2685                           
  2686                           ;main.c: 391: break;
  2687  000554  D7D2               	goto	l254
  2688  000556                     l264:
  2689  000556  5048               	movf	operation@keypress_396,w,c
  2690                           
  2691                           ; Switch size 1, requested type "space"
  2692                           ; Number of cases is 3, Range of values is 0 to 2
  2693                           ; switch strategies available:
  2694                           ; Name         Instructions Cycles
  2695                           ; simple_byte           10     6 (average)
  2696                           ;	Chosen strategy is simple_byte
  2697  000558  0A00               	xorlw	0	; case 0
  2698  00055A  B4D8               	btfsc	status,2,c
  2699  00055C  D7F3               	goto	l265
  2700  00055E  0A01               	xorlw	1	; case 1
  2701  000560  B4D8               	btfsc	status,2,c
  2702  000562  D7F2               	goto	l267
  2703  000564  0A03               	xorlw	3	; case 2
  2704  000566  B4D8               	btfsc	status,2,c
  2705  000568  D7F1               	goto	l268
  2706  00056A  D7F2               	goto	l269
  2707  00056C                     l261:
  2708                           
  2709                           ;main.c: 394: else if (keypress == 14) {
  2710  00056C  0E0E               	movlw	14
  2711  00056E  1848               	xorwf	operation@keypress_396,w,c
  2712  000570  A4D8               	btfss	status,2,c
  2713  000572  D7C3               	goto	l254
  2714                           
  2715                           ;main.c: 395: if (repetition != na_freq) {
  2716  000574  0E03               	movlw	3
  2717  000576  1845               	xorwf	operation@repetition,w,c
  2718  000578  B4D8               	btfsc	status,2,c
  2719  00057A  D7BF               	goto	l254
  2720                           
  2721                           ;main.c: 397: }
  2722                           ;main.c: 398: }
  2723                           ;main.c: 399: }
  2724                           ;main.c: 403: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  2725                           
  2726                           ;main.c: 396: break;
  2727  00057C  0E0C               	movlw	12
  2728  00057E  ECB0  F009         	call	_lcdInst
  2729                           
  2730                           ;main.c: 404: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2731  000582  0E01               	movlw	1
  2732  000584  ECB0  F009         	call	_lcdInst
  2733  000588  0EC3               	movlw	195
  2734  00058A  6E3C               	movwf	??_operation& (0+255),c
  2735  00058C  0ECD               	movlw	205
  2736  00058E                     u2267:
  2737  00058E  2EE8               	decfsz	wreg,f,c
  2738  000590  D7FE               	bra	u2267
  2739  000592  2E3C               	decfsz	??_operation& (0+255),f,c
  2740  000594  D7FC               	bra	u2267
  2741  000596  F000               	nop	
  2742                           
  2743                           ;main.c: 405: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2744  000598  0E80               	movlw	128
  2745  00059A  ECB0  F009         	call	_lcdInst
  2746  00059E  0E41               	movlw	65
  2747  0005A0  6E3C               	movwf	??_operation& (0+255),c
  2748  0005A2  0EEE               	movlw	238
  2749  0005A4                     u2277:
  2750  0005A4  2EE8               	decfsz	wreg,f,c
  2751  0005A6  D7FE               	bra	u2277
  2752  0005A8  2E3C               	decfsz	??_operation& (0+255),f,c
  2753  0005AA  D7FC               	bra	u2277
  2754  0005AC  D000               	nop2	
  2755                           
  2756                           ;main.c: 406: printf("Prescrip. details:");
  2757  0005AE  0EB6               	movlw	low STR_21
  2758  0005B0  6E20               	movwf	printf@f,c
  2759  0005B2  0EFE               	movlw	high STR_21
  2760  0005B4  6E21               	movwf	printf@f+1,c
  2761  0005B6  EC4D  F005         	call	_printf	;wreg free
  2762                           
  2763                           ;main.c: 407: lcdInst(0xC0);;
  2764  0005BA  0EC0               	movlw	192
  2765  0005BC  ECB0  F009         	call	_lcdInst
  2766                           
  2767                           ;main.c: 408: printf("- %dR %dF %dL", prescription[0], prescription[1], prescription[2])
      +                          ;;
  2768  0005C0  0E43               	movlw	low STR_22
  2769  0005C2  6E20               	movwf	printf@f,c
  2770  0005C4  0EFF               	movlw	high STR_22
  2771  0005C6  6E21               	movwf	printf@f+1,c
  2772  0005C8  C04B  F022         	movff	operation@prescription,?_printf+2
  2773  0005CC  C04C  F023         	movff	operation@prescription+1,?_printf+3
  2774  0005D0  C04D  F024         	movff	operation@prescription+2,?_printf+4
  2775  0005D4  C04E  F025         	movff	operation@prescription+3,?_printf+5
  2776  0005D8  C04F  F026         	movff	operation@prescription+4,?_printf+6
  2777  0005DC  C050  F027         	movff	operation@prescription+5,?_printf+7
  2778  0005E0  EC4D  F005         	call	_printf	;wreg free
  2779                           
  2780                           ;main.c: 409: lcdInst(0x94);;
  2781  0005E4  0E94               	movlw	148
  2782  0005E6  ECB0  F009         	call	_lcdInst
  2783                           
  2784                           ;main.c: 410: switch (repetition) {
  2785  0005EA  D01C               	goto	l275
  2786  0005EC                     
  2787                           ;main.c: 412: printf("- Mornings");
  2788  0005EC  0EC1               	movlw	low STR_23
  2789  0005EE  6E20               	movwf	printf@f,c
  2790  0005F0  0EFF               	movlw	high STR_23
  2791  0005F2  6E21               	movwf	printf@f+1,c
  2792  0005F4  EC4D  F005         	call	_printf	;wreg free
  2793                           
  2794                           ;main.c: 413: break;
  2795  0005F8  D022               	goto	l277
  2796  0005FA                     
  2797                           ;main.c: 415: printf("- Afternoons");
  2798  0005FA  0E79               	movlw	low STR_24
  2799  0005FC  6E20               	movwf	printf@f,c
  2800  0005FE  0EFF               	movlw	high STR_24
  2801  000600  6E21               	movwf	printf@f+1,c
  2802  000602  EC4D  F005         	call	_printf	;wreg free
  2803                           
  2804                           ;main.c: 416: break;
  2805  000606  D01B               	goto	l277
  2806  000608                     
  2807                           ;main.c: 418: printf("- Morn. & Afternoon");
  2808  000608  0E8F               	movlw	low STR_25
  2809  00060A  6E20               	movwf	printf@f,c
  2810  00060C  0EFE               	movlw	high STR_25
  2811  00060E  6E21               	movwf	printf@f+1,c
  2812  000610  EC4D  F005         	call	_printf	;wreg free
  2813                           
  2814                           ;main.c: 419: break;
  2815  000614  D014               	goto	l277
  2816  000616                     
  2817                           ;main.c: 421: printf("- Alternating");
  2818  000616  0E51               	movlw	low STR_26
  2819  000618  6E20               	movwf	printf@f,c
  2820  00061A  0EFF               	movlw	high STR_26
  2821  00061C  6E21               	movwf	printf@f+1,c
  2822  00061E  EC4D  F005         	call	_printf	;wreg free
  2823                           
  2824                           ;main.c: 423: }
  2825                           
  2826                           ;main.c: 422: break;
  2827  000622  D00D               	goto	l277
  2828  000624                     l275:
  2829  000624  5045               	movf	operation@repetition,w,c
  2830                           
  2831                           ; Switch size 1, requested type "space"
  2832                           ; Number of cases is 4, Range of values is 0 to 3
  2833                           ; switch strategies available:
  2834                           ; Name         Instructions Cycles
  2835                           ; simple_byte           13     7 (average)
  2836                           ;	Chosen strategy is simple_byte
  2837  000626  0A00               	xorlw	0	; case 0
  2838  000628  B4D8               	btfsc	status,2,c
  2839  00062A  D7E0               	goto	l276
  2840  00062C  0A01               	xorlw	1	; case 1
  2841  00062E  B4D8               	btfsc	status,2,c
  2842  000630  D7E4               	goto	l278
  2843  000632  0A03               	xorlw	3	; case 2
  2844  000634  B4D8               	btfsc	status,2,c
  2845  000636  D7EF               	goto	l280
  2846  000638  0A01               	xorlw	1	; case 3
  2847  00063A  B4D8               	btfsc	status,2,c
  2848  00063C  D7E5               	goto	l279
  2849  00063E                     l277:
  2850                           
  2851                           ;main.c: 425: lcdInst(0xD4);;
  2852  00063E  0ED4               	movlw	212
  2853  000640  ECB0  F009         	call	_lcdInst
  2854                           
  2855                           ;main.c: 426: switch (frequency) {
  2856  000644  D015               	goto	l281
  2857  000646                     
  2858                           ;main.c: 428: printf("- Everyday");
  2859  000646  0ECC               	movlw	low STR_27
  2860  000648  6E20               	movwf	printf@f,c
  2861  00064A  0EFF               	movlw	high STR_27
  2862  00064C  6E21               	movwf	printf@f+1,c
  2863  00064E  EC4D  F005         	call	_printf	;wreg free
  2864                           
  2865                           ;main.c: 429: break;
  2866  000652  D018               	goto	l283
  2867  000654                     
  2868                           ;main.c: 431: printf("- Alternate (Sun)");
  2869  000654  0EDB               	movlw	low STR_28
  2870  000656  6E20               	movwf	printf@f,c
  2871  000658  0EFE               	movlw	high STR_28
  2872  00065A  6E21               	movwf	printf@f+1,c
  2873  00065C  EC4D  F005         	call	_printf	;wreg free
  2874                           
  2875                           ;main.c: 432: break;
  2876  000660  D011               	goto	l283
  2877  000662                     
  2878                           ;main.c: 434: printf("- Alternate (Mon)");
  2879  000662  0EC9               	movlw	low STR_29
  2880  000664  6E20               	movwf	printf@f,c
  2881  000666  0EFE               	movlw	high STR_29
  2882  000668  6E21               	movwf	printf@f+1,c
  2883  00066A  EC4D  F005         	call	_printf	;wreg free
  2884                           
  2885                           ;main.c: 436: }
  2886                           
  2887                           ;main.c: 435: break;
  2888  00066E  D00A               	goto	l283
  2889  000670                     l281:
  2890  000670  5044               	movf	operation@frequency,w,c
  2891                           
  2892                           ; Switch size 1, requested type "space"
  2893                           ; Number of cases is 3, Range of values is 0 to 2
  2894                           ; switch strategies available:
  2895                           ; Name         Instructions Cycles
  2896                           ; simple_byte           10     6 (average)
  2897                           ;	Chosen strategy is simple_byte
  2898  000672  0A00               	xorlw	0	; case 0
  2899  000674  B4D8               	btfsc	status,2,c
  2900  000676  D7E7               	goto	l282
  2901  000678  0A01               	xorlw	1	; case 1
  2902  00067A  B4D8               	btfsc	status,2,c
  2903  00067C  D7EB               	goto	l284
  2904  00067E  0A03               	xorlw	3	; case 2
  2905  000680  B4D8               	btfsc	status,2,c
  2906  000682  D7EF               	goto	l285
  2907  000684                     l283:
  2908                           
  2909                           ;main.c: 437: _delay((unsigned long)((3000)*(40000000/4000.0)));
  2910  000684  0E99               	movlw	153
  2911  000686  6E3D               	movwf	(??_operation+1)& (0+255),c
  2912  000688  0E31               	movlw	49
  2913  00068A  6E3C               	movwf	??_operation& (0+255),c
  2914  00068C  0EA2               	movlw	162
  2915  00068E                     u2287:
  2916  00068E  2EE8               	decfsz	wreg,f,c
  2917  000690  D7FE               	bra	u2287
  2918  000692  2E3C               	decfsz	??_operation& (0+255),f,c
  2919  000694  D7FC               	bra	u2287
  2920  000696  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  2921  000698  D7FA               	bra	u2287
  2922  00069A  D000               	nop2	
  2923                           
  2924                           ;main.c: 439: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2925  00069C  0E01               	movlw	1
  2926  00069E  ECB0  F009         	call	_lcdInst
  2927  0006A2  0EC3               	movlw	195
  2928  0006A4  6E3C               	movwf	??_operation& (0+255),c
  2929  0006A6  0ECD               	movlw	205
  2930  0006A8                     u2297:
  2931  0006A8  2EE8               	decfsz	wreg,f,c
  2932  0006AA  D7FE               	bra	u2297
  2933  0006AC  2E3C               	decfsz	??_operation& (0+255),f,c
  2934  0006AE  D7FC               	bra	u2297
  2935  0006B0  F000               	nop	
  2936                           
  2937                           ;main.c: 440: lcdInst(0xC0);;
  2938  0006B2  0EC0               	movlw	192
  2939  0006B4  ECB0  F009         	call	_lcdInst
  2940                           
  2941                           ;main.c: 441: printf("     DISPENSING     ");
  2942  0006B8  0E95               	movlw	low STR_30
  2943  0006BA  6E20               	movwf	printf@f,c
  2944  0006BC  0EFD               	movlw	high STR_30
  2945  0006BE  6E21               	movwf	printf@f+1,c
  2946  0006C0  EC4D  F005         	call	_printf	;wreg free
  2947                           
  2948                           ;main.c: 442: lcdInst(0x94);;
  2949  0006C4  0E94               	movlw	148
  2950  0006C6  ECB0  F009         	call	_lcdInst
  2951                           
  2952                           ;main.c: 443: printf("      PILLS...      ");
  2953  0006CA  0E6B               	movlw	low STR_31
  2954  0006CC  6E20               	movwf	printf@f,c
  2955  0006CE  0EFD               	movlw	high STR_31
  2956  0006D0  6E21               	movwf	printf@f+1,c
  2957  0006D2  EC4D  F005         	call	_printf	;wreg free
  2958                           
  2959                           ;main.c: 444: _delay((unsigned long)((3600)*(40000000/4000.0)));
  2960  0006D6  0EB7               	movlw	183
  2961  0006D8  6E3D               	movwf	(??_operation+1)& (0+255),c
  2962  0006DA  0EA1               	movlw	161
  2963  0006DC  6E3C               	movwf	??_operation& (0+255),c
  2964  0006DE  0EC4               	movlw	196
  2965  0006E0                     u2307:
  2966  0006E0  2EE8               	decfsz	wreg,f,c
  2967  0006E2  D7FE               	bra	u2307
  2968  0006E4  2E3C               	decfsz	??_operation& (0+255),f,c
  2969  0006E6  D7FC               	bra	u2307
  2970  0006E8  2E3D               	decfsz	(??_operation+1)& (0+255),f,c
  2971  0006EA  D7FA               	bra	u2307
  2972                           
  2973                           ;main.c: 452: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2974  0006EC  0E01               	movlw	1
  2975  0006EE  ECB0  F009         	call	_lcdInst
  2976  0006F2  0EC3               	movlw	195
  2977  0006F4  6E3C               	movwf	??_operation& (0+255),c
  2978  0006F6  0ECD               	movlw	205
  2979  0006F8                     u2317:
  2980  0006F8  2EE8               	decfsz	wreg,f,c
  2981  0006FA  D7FE               	bra	u2317
  2982  0006FC  2E3C               	decfsz	??_operation& (0+255),f,c
  2983  0006FE  D7FC               	bra	u2317
  2984  000700  F000               	nop	
  2985                           
  2986                           ;main.c: 453: lcdInst(0xC0);;
  2987  000702  0EC0               	movlw	192
  2988  000704  ECB0  F009         	call	_lcdInst
  2989                           
  2990                           ;main.c: 454: printf(" OPERATION COMPLETE ");
  2991  000708  0E3D               	movlw	low STR_32
  2992  00070A  6E20               	movwf	printf@f,c
  2993  00070C  0EFE               	movlw	high STR_32
  2994  00070E  6E21               	movwf	printf@f+1,c
  2995  000710  EC4D  F005         	call	_printf	;wreg free
  2996                           
  2997                           ;main.c: 455: lcdInst(0x94);;
  2998  000714  0E94               	movlw	148
  2999  000716  ECB0  F009         	call	_lcdInst
  3000                           
  3001                           ;main.c: 456: printf("  PRESS ANY KEY...  ");
  3002  00071A  0E13               	movlw	low STR_33
  3003  00071C  6E20               	movwf	printf@f,c
  3004  00071E  0EFE               	movlw	high STR_33
  3005  000720  6E21               	movwf	printf@f+1,c
  3006  000722  EC4D  F005         	call	_printf	;wreg free
  3007  000726                     
  3008                           ;main.c: 460: continue;
  3009                           
  3010                           ;main.c: 459: while (PORTBbits.RB1 == 0) {
  3011  000726  A281               	btfss	3969,1,c	;volatile
  3012  000728  D7FE               	goto	l286
  3013                           
  3014                           ;main.c: 461: }
  3015                           ;main.c: 463: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3016  00072A  3881               	swapf	3969,w,c	;volatile
  3017  00072C  0B0F               	andlw	15
  3018  00072E  0B0F               	andlw	15
  3019  000730  6E3E               	movwf	operation@keypress_410,c
  3020  000732                     
  3021                           ;main.c: 466: continue;
  3022  000732  B281               	btfsc	3969,1,c	;volatile
  3023  000734  D7FE               	goto	l291
  3024                           
  3025                           ;main.c: 467: }
  3026                           ;main.c: 469: __nop();
  3027  000736  F000               	nop	
  3028                           
  3029                           ;main.c: 472: }
  3030                           ;main.c: 474: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3031                           
  3032                           ;main.c: 471: break;
  3033  000738  0E01               	movlw	1
  3034  00073A  ECB0  F009         	call	_lcdInst
  3035  00073E  0EC3               	movlw	195
  3036  000740  6E3C               	movwf	??_operation& (0+255),c
  3037  000742  0ECD               	movlw	205
  3038  000744                     u2327:
  3039  000744  2EE8               	decfsz	wreg,f,c
  3040  000746  D7FE               	bra	u2327
  3041  000748  2E3C               	decfsz	??_operation& (0+255),f,c
  3042  00074A  D7FC               	bra	u2327
  3043  00074C  F000               	nop	
  3044                           
  3045                           ;main.c: 475: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3046  00074E  0E80               	movlw	128
  3047  000750  ECB0  F009         	call	_lcdInst
  3048  000754  0E41               	movlw	65
  3049  000756  6E3C               	movwf	??_operation& (0+255),c
  3050  000758  0EEE               	movlw	238
  3051  00075A                     u2337:
  3052  00075A  2EE8               	decfsz	wreg,f,c
  3053  00075C  D7FE               	bra	u2337
  3054  00075E  2E3C               	decfsz	??_operation& (0+255),f,c
  3055  000760  D7FC               	bra	u2337
  3056  000762  D000               	nop2	
  3057                           
  3058                           ;main.c: 476: printf("Run %d", num_runs);
  3059  000764  0EF7               	movlw	low STR_34
  3060  000766  6E20               	movwf	printf@f,c
  3061  000768  0EFF               	movlw	high STR_34
  3062  00076A  6E21               	movwf	printf@f+1,c
  3063  00076C  C05D  F022         	movff	_num_runs,?_printf+2
  3064  000770  C05E  F023         	movff	_num_runs+1,?_printf+3
  3065  000774  EC4D  F005         	call	_printf	;wreg free
  3066                           
  3067                           ;main.c: 477: lcdInst(0xC0);;
  3068  000778  0EC0               	movlw	192
  3069  00077A  ECB0  F009         	call	_lcdInst
  3070                           
  3071                           ;main.c: 478: printf("Total time: %d s", total_time);
  3072  00077E  0E32               	movlw	low STR_35
  3073  000780  6E20               	movwf	printf@f,c
  3074  000782  0EFF               	movlw	high STR_35
  3075  000784  6E21               	movwf	printf@f+1,c
  3076  000786  C05B  F022         	movff	_total_time,?_printf+2
  3077  00078A  C05C  F023         	movff	_total_time+1,?_printf+3
  3078  00078E  EC4D  F005         	call	_printf	;wreg free
  3079                           
  3080                           ;main.c: 479: lcdInst(0xD4);;
  3081  000792  0ED4               	movlw	212
  3082  000794  ECB0  F009         	call	_lcdInst
  3083                           
  3084                           ;main.c: 480: printf("(# to continue...)");
  3085  000798  0EA3               	movlw	low STR_36
  3086  00079A  6E20               	movwf	printf@f,c
  3087  00079C  0EFE               	movlw	high STR_36
  3088  00079E  6E21               	movwf	printf@f+1,c
  3089  0007A0  EC4D  F005         	call	_printf	;wreg free
  3090  0007A4                     
  3091                           ;main.c: 484: continue;
  3092                           
  3093                           ;main.c: 483: while (PORTBbits.RB1 == 0) {
  3094  0007A4  A281               	btfss	3969,1,c	;volatile
  3095  0007A6  D7FE               	goto	l295
  3096                           
  3097                           ;main.c: 485: }
  3098                           ;main.c: 487: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3099  0007A8  3881               	swapf	3969,w,c	;volatile
  3100  0007AA  0B0F               	andlw	15
  3101  0007AC  0B0F               	andlw	15
  3102  0007AE  6E3F               	movwf	operation@keypress_414,c
  3103  0007B0                     
  3104                           ;main.c: 490: continue;
  3105  0007B0  B281               	btfsc	3969,1,c	;volatile
  3106  0007B2  D7FE               	goto	l300
  3107                           
  3108                           ;main.c: 491: }
  3109                           ;main.c: 493: __nop();
  3110  0007B4  F000               	nop	
  3111                           
  3112                           ;main.c: 495: if (keypress == 14) {
  3113  0007B6  0E0E               	movlw	14
  3114  0007B8  183F               	xorwf	operation@keypress_414,w,c
  3115  0007BA  A4D8               	btfss	status,2,c
  3116  0007BC  D7F3               	goto	l295
  3117                           
  3118                           ;main.c: 497: }
  3119                           ;main.c: 498: }
  3120                           ;main.c: 500: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3121                           
  3122                           ;main.c: 496: break;
  3123  0007BE  0E01               	movlw	1
  3124  0007C0  ECB0  F009         	call	_lcdInst
  3125  0007C4  0EC3               	movlw	195
  3126  0007C6  6E3C               	movwf	??_operation& (0+255),c
  3127  0007C8  0ECD               	movlw	205
  3128  0007CA                     u2347:
  3129  0007CA  2EE8               	decfsz	wreg,f,c
  3130  0007CC  D7FE               	bra	u2347
  3131  0007CE  2E3C               	decfsz	??_operation& (0+255),f,c
  3132  0007D0  D7FC               	bra	u2347
  3133  0007D2  F000               	nop	
  3134                           
  3135                           ;main.c: 501: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3136  0007D4  0E80               	movlw	128
  3137  0007D6  ECB0  F009         	call	_lcdInst
  3138  0007DA  0E41               	movlw	65
  3139  0007DC  6E3C               	movwf	??_operation& (0+255),c
  3140  0007DE  0EEE               	movlw	238
  3141  0007E0                     u2357:
  3142  0007E0  2EE8               	decfsz	wreg,f,c
  3143  0007E2  D7FE               	bra	u2357
  3144  0007E4  2E3C               	decfsz	??_operation& (0+255),f,c
  3145  0007E6  D7FC               	bra	u2357
  3146  0007E8  D000               	nop2	
  3147                           
  3148                           ;main.c: 502: printf("Run %d", num_runs);
  3149  0007EA  0EF7               	movlw	low STR_34
  3150  0007EC  6E20               	movwf	printf@f,c
  3151  0007EE  0EFF               	movlw	high STR_34
  3152  0007F0  6E21               	movwf	printf@f+1,c
  3153  0007F2  C05D  F022         	movff	_num_runs,?_printf+2
  3154  0007F6  C05E  F023         	movff	_num_runs+1,?_printf+3
  3155  0007FA  EC4D  F005         	call	_printf	;wreg free
  3156                           
  3157                           ;main.c: 503: lcdInst(0xC0);;
  3158  0007FE  0EC0               	movlw	192
  3159  000800  ECB0  F009         	call	_lcdInst
  3160                           
  3161                           ;main.c: 504: printf("Prescrip.: %dR %dF %dL", prescription[0], prescription[1], prescri
      +                          ption[2]);
  3162  000804  0E54               	movlw	low STR_38
  3163  000806  6E20               	movwf	printf@f,c
  3164  000808  0EFD               	movlw	high STR_38
  3165  00080A  6E21               	movwf	printf@f+1,c
  3166  00080C  C04B  F022         	movff	operation@prescription,?_printf+2
  3167  000810  C04C  F023         	movff	operation@prescription+1,?_printf+3
  3168  000814  C04D  F024         	movff	operation@prescription+2,?_printf+4
  3169  000818  C04E  F025         	movff	operation@prescription+3,?_printf+5
  3170  00081C  C04F  F026         	movff	operation@prescription+4,?_printf+6
  3171  000820  C050  F027         	movff	operation@prescription+5,?_printf+7
  3172  000824  EC4D  F005         	call	_printf	;wreg free
  3173                           
  3174                           ;main.c: 505: lcdInst(0xD4);;
  3175  000828  0ED4               	movlw	212
  3176  00082A  ECB0  F009         	call	_lcdInst
  3177                           
  3178                           ;main.c: 506: printf("(# to continue...)");
  3179  00082E  0EA3               	movlw	low STR_36
  3180  000830  6E20               	movwf	printf@f,c
  3181  000832  0EFE               	movlw	high STR_36
  3182  000834  6E21               	movwf	printf@f+1,c
  3183  000836  EC4D  F005         	call	_printf	;wreg free
  3184  00083A                     
  3185                           ;main.c: 510: continue;
  3186                           
  3187                           ;main.c: 509: while (PORTBbits.RB1 == 0) {
  3188  00083A  A281               	btfss	3969,1,c	;volatile
  3189  00083C  D7FE               	goto	l305
  3190                           
  3191                           ;main.c: 511: }
  3192                           ;main.c: 513: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3193  00083E  3881               	swapf	3969,w,c	;volatile
  3194  000840  0B0F               	andlw	15
  3195  000842  0B0F               	andlw	15
  3196  000844  6E40               	movwf	operation@keypress_418,c
  3197  000846                     
  3198                           ;main.c: 516: continue;
  3199  000846  B281               	btfsc	3969,1,c	;volatile
  3200  000848  D7FE               	goto	l310
  3201                           
  3202                           ;main.c: 517: }
  3203                           ;main.c: 519: __nop();
  3204  00084A  F000               	nop	
  3205                           
  3206                           ;main.c: 521: if (keypress == 14) {
  3207  00084C  0E0E               	movlw	14
  3208  00084E  1840               	xorwf	operation@keypress_418,w,c
  3209  000850  A4D8               	btfss	status,2,c
  3210  000852  D7F3               	goto	l305
  3211                           
  3212                           ;main.c: 523: }
  3213                           ;main.c: 524: }
  3214                           ;main.c: 526: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3215                           
  3216                           ;main.c: 522: break;
  3217  000854  0E01               	movlw	1
  3218  000856  ECB0  F009         	call	_lcdInst
  3219  00085A  0EC3               	movlw	195
  3220  00085C  6E3C               	movwf	??_operation& (0+255),c
  3221  00085E  0ECD               	movlw	205
  3222  000860                     u2367:
  3223  000860  2EE8               	decfsz	wreg,f,c
  3224  000862  D7FE               	bra	u2367
  3225  000864  2E3C               	decfsz	??_operation& (0+255),f,c
  3226  000866  D7FC               	bra	u2367
  3227  000868  F000               	nop	
  3228                           
  3229                           ;main.c: 527: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3230  00086A  0E80               	movlw	128
  3231  00086C  ECB0  F009         	call	_lcdInst
  3232  000870  0E41               	movlw	65
  3233  000872  6E3C               	movwf	??_operation& (0+255),c
  3234  000874  0EEE               	movlw	238
  3235  000876                     u2377:
  3236  000876  2EE8               	decfsz	wreg,f,c
  3237  000878  D7FE               	bra	u2377
  3238  00087A  2E3C               	decfsz	??_operation& (0+255),f,c
  3239  00087C  D7FC               	bra	u2377
  3240  00087E  D000               	nop2	
  3241                           
  3242                           ;main.c: 528: printf("Run %d", num_runs);
  3243  000880  0EF7               	movlw	low STR_34
  3244  000882  6E20               	movwf	printf@f,c
  3245  000884  0EFF               	movlw	high STR_34
  3246  000886  6E21               	movwf	printf@f+1,c
  3247  000888  C05D  F022         	movff	_num_runs,?_printf+2
  3248  00088C  C05E  F023         	movff	_num_runs+1,?_printf+3
  3249  000890  EC4D  F005         	call	_printf	;wreg free
  3250                           
  3251                           ;main.c: 529: lcdInst(0xC0);;
  3252  000894  0EC0               	movlw	192
  3253  000896  ECB0  F009         	call	_lcdInst
  3254                           
  3255                           ;main.c: 530: printf("Repetition:");
  3256  00089A  0E9F               	movlw	low STR_41
  3257  00089C  6E20               	movwf	printf@f,c
  3258  00089E  0EFF               	movlw	high STR_41
  3259  0008A0  6E21               	movwf	printf@f+1,c
  3260  0008A2  EC4D  F005         	call	_printf	;wreg free
  3261                           
  3262                           ;main.c: 531: lcdInst(0x94);;
  3263  0008A6  0E94               	movlw	148
  3264  0008A8  ECB0  F009         	call	_lcdInst
  3265                           
  3266                           ;main.c: 532: switch (repetition) {
  3267  0008AC  D01C               	goto	l315
  3268  0008AE                     
  3269                           ;main.c: 534: printf("- Mornings");
  3270  0008AE  0EC1               	movlw	low STR_23
  3271  0008B0  6E20               	movwf	printf@f,c
  3272  0008B2  0EFF               	movlw	high STR_23
  3273  0008B4  6E21               	movwf	printf@f+1,c
  3274  0008B6  EC4D  F005         	call	_printf	;wreg free
  3275                           
  3276                           ;main.c: 535: break;
  3277  0008BA  D022               	goto	l317
  3278  0008BC                     
  3279                           ;main.c: 537: printf("- Afternoons");
  3280  0008BC  0E79               	movlw	low STR_24
  3281  0008BE  6E20               	movwf	printf@f,c
  3282  0008C0  0EFF               	movlw	high STR_24
  3283  0008C2  6E21               	movwf	printf@f+1,c
  3284  0008C4  EC4D  F005         	call	_printf	;wreg free
  3285                           
  3286                           ;main.c: 538: break;
  3287  0008C8  D01B               	goto	l317
  3288  0008CA                     
  3289                           ;main.c: 540: printf("- Morn. & Afternoon");
  3290  0008CA  0E8F               	movlw	low STR_25
  3291  0008CC  6E20               	movwf	printf@f,c
  3292  0008CE  0EFE               	movlw	high STR_25
  3293  0008D0  6E21               	movwf	printf@f+1,c
  3294  0008D2  EC4D  F005         	call	_printf	;wreg free
  3295                           
  3296                           ;main.c: 541: break;
  3297  0008D6  D014               	goto	l317
  3298  0008D8                     
  3299                           ;main.c: 543: printf("- Alternating");
  3300  0008D8  0E51               	movlw	low STR_26
  3301  0008DA  6E20               	movwf	printf@f,c
  3302  0008DC  0EFF               	movlw	high STR_26
  3303  0008DE  6E21               	movwf	printf@f+1,c
  3304  0008E0  EC4D  F005         	call	_printf	;wreg free
  3305                           
  3306                           ;main.c: 545: }
  3307                           
  3308                           ;main.c: 544: break;
  3309  0008E4  D00D               	goto	l317
  3310  0008E6                     l315:
  3311  0008E6  5045               	movf	operation@repetition,w,c
  3312                           
  3313                           ; Switch size 1, requested type "space"
  3314                           ; Number of cases is 4, Range of values is 0 to 3
  3315                           ; switch strategies available:
  3316                           ; Name         Instructions Cycles
  3317                           ; simple_byte           13     7 (average)
  3318                           ;	Chosen strategy is simple_byte
  3319  0008E8  0A00               	xorlw	0	; case 0
  3320  0008EA  B4D8               	btfsc	status,2,c
  3321  0008EC  D7E0               	goto	l316
  3322  0008EE  0A01               	xorlw	1	; case 1
  3323  0008F0  B4D8               	btfsc	status,2,c
  3324  0008F2  D7E4               	goto	l318
  3325  0008F4  0A03               	xorlw	3	; case 2
  3326  0008F6  B4D8               	btfsc	status,2,c
  3327  0008F8  D7EF               	goto	l320
  3328  0008FA  0A01               	xorlw	1	; case 3
  3329  0008FC  B4D8               	btfsc	status,2,c
  3330  0008FE  D7E5               	goto	l319
  3331  000900                     l317:
  3332                           
  3333                           ;main.c: 546: lcdInst(0xD4);;
  3334  000900  0ED4               	movlw	212
  3335  000902  ECB0  F009         	call	_lcdInst
  3336                           
  3337                           ;main.c: 547: printf("(# to continue...)");
  3338  000906  0EA3               	movlw	low STR_36
  3339  000908  6E20               	movwf	printf@f,c
  3340  00090A  0EFE               	movlw	high STR_36
  3341  00090C  6E21               	movwf	printf@f+1,c
  3342  00090E  EC4D  F005         	call	_printf	;wreg free
  3343  000912                     
  3344                           ;main.c: 553: continue;
  3345                           
  3346                           ;main.c: 552: while (PORTBbits.RB1 == 0) {
  3347  000912  A281               	btfss	3969,1,c	;volatile
  3348  000914  D7FE               	goto	l321
  3349                           
  3350                           ;main.c: 554: }
  3351                           ;main.c: 556: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3352  000916  3881               	swapf	3969,w,c	;volatile
  3353  000918  0B0F               	andlw	15
  3354  00091A  0B0F               	andlw	15
  3355  00091C  6E41               	movwf	operation@keypress_426,c
  3356  00091E                     
  3357                           ;main.c: 559: continue;
  3358  00091E  B281               	btfsc	3969,1,c	;volatile
  3359  000920  D7FE               	goto	l326
  3360                           
  3361                           ;main.c: 560: }
  3362                           ;main.c: 562: __nop();
  3363  000922  F000               	nop	
  3364                           
  3365                           ;main.c: 564: if (keypress == 14) {
  3366  000924  0E0E               	movlw	14
  3367  000926  1841               	xorwf	operation@keypress_426,w,c
  3368  000928  A4D8               	btfss	status,2,c
  3369  00092A  D7F3               	goto	l321
  3370                           
  3371                           ;main.c: 566: }
  3372                           ;main.c: 567: }
  3373                           ;main.c: 569: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3374                           
  3375                           ;main.c: 565: break;
  3376  00092C  0E01               	movlw	1
  3377  00092E  ECB0  F009         	call	_lcdInst
  3378  000932  0EC3               	movlw	195
  3379  000934  6E3C               	movwf	??_operation& (0+255),c
  3380  000936  0ECD               	movlw	205
  3381  000938                     u2387:
  3382  000938  2EE8               	decfsz	wreg,f,c
  3383  00093A  D7FE               	bra	u2387
  3384  00093C  2E3C               	decfsz	??_operation& (0+255),f,c
  3385  00093E  D7FC               	bra	u2387
  3386  000940  F000               	nop	
  3387                           
  3388                           ;main.c: 570: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3389  000942  0E80               	movlw	128
  3390  000944  ECB0  F009         	call	_lcdInst
  3391  000948  0E41               	movlw	65
  3392  00094A  6E3C               	movwf	??_operation& (0+255),c
  3393  00094C  0EEE               	movlw	238
  3394  00094E                     u2397:
  3395  00094E  2EE8               	decfsz	wreg,f,c
  3396  000950  D7FE               	bra	u2397
  3397  000952  2E3C               	decfsz	??_operation& (0+255),f,c
  3398  000954  D7FC               	bra	u2397
  3399  000956  D000               	nop2	
  3400                           
  3401                           ;main.c: 571: printf("Run %d", num_runs);
  3402  000958  0EF7               	movlw	low STR_34
  3403  00095A  6E20               	movwf	printf@f,c
  3404  00095C  0EFF               	movlw	high STR_34
  3405  00095E  6E21               	movwf	printf@f+1,c
  3406  000960  C05D  F022         	movff	_num_runs,?_printf+2
  3407  000964  C05E  F023         	movff	_num_runs+1,?_printf+3
  3408  000968  EC4D  F005         	call	_printf	;wreg free
  3409                           
  3410                           ;main.c: 572: lcdInst(0xC0);;
  3411  00096C  0EC0               	movlw	192
  3412  00096E  ECB0  F009         	call	_lcdInst
  3413                           
  3414                           ;main.c: 573: printf("Frequency:");
  3415  000972  0EAB               	movlw	low STR_48
  3416  000974  6E20               	movwf	printf@f,c
  3417  000976  0EFF               	movlw	high STR_48
  3418  000978  6E21               	movwf	printf@f+1,c
  3419  00097A  EC4D  F005         	call	_printf	;wreg free
  3420                           
  3421                           ;main.c: 574: lcdInst(0x94);;
  3422  00097E  0E94               	movlw	148
  3423  000980  ECB0  F009         	call	_lcdInst
  3424                           
  3425                           ;main.c: 575: switch (frequency) {
  3426  000984  D015               	goto	l331
  3427  000986                     
  3428                           ;main.c: 577: printf("- Everyday");
  3429  000986  0ECC               	movlw	low STR_27
  3430  000988  6E20               	movwf	printf@f,c
  3431  00098A  0EFF               	movlw	high STR_27
  3432  00098C  6E21               	movwf	printf@f+1,c
  3433  00098E  EC4D  F005         	call	_printf	;wreg free
  3434                           
  3435                           ;main.c: 578: break;
  3436  000992  D018               	goto	l333
  3437  000994                     
  3438                           ;main.c: 580: printf("- Alternate (Sun)");
  3439  000994  0EDB               	movlw	low STR_28
  3440  000996  6E20               	movwf	printf@f,c
  3441  000998  0EFE               	movlw	high STR_28
  3442  00099A  6E21               	movwf	printf@f+1,c
  3443  00099C  EC4D  F005         	call	_printf	;wreg free
  3444                           
  3445                           ;main.c: 581: break;
  3446  0009A0  D011               	goto	l333
  3447  0009A2                     
  3448                           ;main.c: 583: printf("- Alternate (Mon)");
  3449  0009A2  0EC9               	movlw	low STR_29
  3450  0009A4  6E20               	movwf	printf@f,c
  3451  0009A6  0EFE               	movlw	high STR_29
  3452  0009A8  6E21               	movwf	printf@f+1,c
  3453  0009AA  EC4D  F005         	call	_printf	;wreg free
  3454                           
  3455                           ;main.c: 585: }
  3456                           
  3457                           ;main.c: 584: break;
  3458  0009AE  D00A               	goto	l333
  3459  0009B0                     l331:
  3460  0009B0  5044               	movf	operation@frequency,w,c
  3461                           
  3462                           ; Switch size 1, requested type "space"
  3463                           ; Number of cases is 3, Range of values is 0 to 2
  3464                           ; switch strategies available:
  3465                           ; Name         Instructions Cycles
  3466                           ; simple_byte           10     6 (average)
  3467                           ;	Chosen strategy is simple_byte
  3468  0009B2  0A00               	xorlw	0	; case 0
  3469  0009B4  B4D8               	btfsc	status,2,c
  3470  0009B6  D7E7               	goto	l332
  3471  0009B8  0A01               	xorlw	1	; case 1
  3472  0009BA  B4D8               	btfsc	status,2,c
  3473  0009BC  D7EB               	goto	l334
  3474  0009BE  0A03               	xorlw	3	; case 2
  3475  0009C0  B4D8               	btfsc	status,2,c
  3476  0009C2  D7EF               	goto	l335
  3477  0009C4                     l333:
  3478                           
  3479                           ;main.c: 586: lcdInst(0xD4);;
  3480  0009C4  0ED4               	movlw	212
  3481  0009C6  ECB0  F009         	call	_lcdInst
  3482                           
  3483                           ;main.c: 587: printf("(# to continue...)");
  3484  0009CA  0EA3               	movlw	low STR_36
  3485  0009CC  6E20               	movwf	printf@f,c
  3486  0009CE  0EFE               	movlw	high STR_36
  3487  0009D0  6E21               	movwf	printf@f+1,c
  3488  0009D2  EC4D  F005         	call	_printf	;wreg free
  3489  0009D6                     
  3490                           ;main.c: 593: continue;
  3491                           
  3492                           ;main.c: 592: while (PORTBbits.RB1 == 0) {
  3493  0009D6  A281               	btfss	3969,1,c	;volatile
  3494  0009D8  D7FE               	goto	l336
  3495                           
  3496                           ;main.c: 594: }
  3497                           ;main.c: 596: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3498  0009DA  3881               	swapf	3969,w,c	;volatile
  3499  0009DC  0B0F               	andlw	15
  3500  0009DE  0B0F               	andlw	15
  3501  0009E0  6E42               	movwf	operation@keypress_433,c
  3502  0009E2                     
  3503                           ;main.c: 599: continue;
  3504  0009E2  B281               	btfsc	3969,1,c	;volatile
  3505  0009E4  D7FE               	goto	l341
  3506                           
  3507                           ;main.c: 600: }
  3508                           ;main.c: 602: __nop();
  3509  0009E6  F000               	nop	
  3510                           
  3511                           ;main.c: 604: if (keypress == 14) {
  3512  0009E8  0E0E               	movlw	14
  3513  0009EA  1842               	xorwf	operation@keypress_433,w,c
  3514  0009EC  A4D8               	btfss	status,2,c
  3515  0009EE  D7F3               	goto	l336
  3516                           
  3517                           ;main.c: 606: }
  3518                           ;main.c: 607: }
  3519                           ;main.c: 609: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3520                           
  3521                           ;main.c: 605: break;
  3522  0009F0  0E01               	movlw	1
  3523  0009F2  ECB0  F009         	call	_lcdInst
  3524  0009F6  0EC3               	movlw	195
  3525  0009F8  6E3C               	movwf	??_operation& (0+255),c
  3526  0009FA  0ECD               	movlw	205
  3527  0009FC                     u2407:
  3528  0009FC  2EE8               	decfsz	wreg,f,c
  3529  0009FE  D7FE               	bra	u2407
  3530  000A00  2E3C               	decfsz	??_operation& (0+255),f,c
  3531  000A02  D7FC               	bra	u2407
  3532  000A04  F000               	nop	
  3533                           
  3534                           ;main.c: 610: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3535  000A06  0E80               	movlw	128
  3536  000A08  ECB0  F009         	call	_lcdInst
  3537  000A0C  0E41               	movlw	65
  3538  000A0E  6E3C               	movwf	??_operation& (0+255),c
  3539  000A10  0EEE               	movlw	238
  3540  000A12                     u2417:
  3541  000A12  2EE8               	decfsz	wreg,f,c
  3542  000A14  D7FE               	bra	u2417
  3543  000A16  2E3C               	decfsz	??_operation& (0+255),f,c
  3544  000A18  D7FC               	bra	u2417
  3545  000A1A  D000               	nop2	
  3546                           
  3547                           ;main.c: 611: printf("Run %d ", num_runs);
  3548  000A1C  0ED7               	movlw	low STR_53
  3549  000A1E  6E20               	movwf	printf@f,c
  3550  000A20  0EFF               	movlw	high STR_53
  3551  000A22  6E21               	movwf	printf@f+1,c
  3552  000A24  C05D  F022         	movff	_num_runs,?_printf+2
  3553  000A28  C05E  F023         	movff	_num_runs+1,?_printf+3
  3554  000A2C  EC4D  F005         	call	_printf	;wreg free
  3555                           
  3556                           ;main.c: 612: lcdInst(0xC0);;
  3557  000A30  0EC0               	movlw	192
  3558  000A32  ECB0  F009         	call	_lcdInst
  3559                           
  3560                           ;main.c: 613: printf("Pills Remaining:");
  3561  000A36  0E10               	movlw	low STR_54
  3562  000A38  6E20               	movwf	printf@f,c
  3563  000A3A  0EFF               	movlw	high STR_54
  3564  000A3C  6E21               	movwf	printf@f+1,c
  3565  000A3E  EC4D  F005         	call	_printf	;wreg free
  3566                           
  3567                           ;main.c: 614: lcdInst(0x94);;
  3568  000A42  0E94               	movlw	148
  3569  000A44  ECB0  F009         	call	_lcdInst
  3570                           
  3571                           ;main.c: 615: printf("R: %d F: %d L: %d", 0, 0, 0);
  3572  000A48  0EED               	movlw	low STR_55
  3573  000A4A  6E20               	movwf	printf@f,c
  3574  000A4C  0EFE               	movlw	high STR_55
  3575  000A4E  6E21               	movwf	printf@f+1,c
  3576  000A50  0E00               	movlw	0
  3577  000A52  6E23               	movwf	?_printf+3,c
  3578  000A54  0E00               	movlw	0
  3579  000A56  6E22               	movwf	?_printf+2,c
  3580  000A58  0E00               	movlw	0
  3581  000A5A  6E25               	movwf	?_printf+5,c
  3582  000A5C  0E00               	movlw	0
  3583  000A5E  6E24               	movwf	?_printf+4,c
  3584  000A60  0E00               	movlw	0
  3585  000A62  6E27               	movwf	?_printf+7,c
  3586  000A64  0E00               	movlw	0
  3587  000A66  6E26               	movwf	?_printf+6,c
  3588  000A68  EC4D  F005         	call	_printf	;wreg free
  3589                           
  3590                           ;main.c: 616: lcdInst(0xD4);;
  3591  000A6C  0ED4               	movlw	212
  3592  000A6E  ECB0  F009         	call	_lcdInst
  3593                           
  3594                           ;main.c: 617: printf("(# to continue...)");
  3595  000A72  0EA3               	movlw	low STR_36
  3596  000A74  6E20               	movwf	printf@f,c
  3597  000A76  0EFE               	movlw	high STR_36
  3598  000A78  6E21               	movwf	printf@f+1,c
  3599  000A7A  EC4D  F005         	call	_printf	;wreg free
  3600  000A7E                     
  3601                           ;main.c: 621: continue;
  3602                           
  3603                           ;main.c: 620: while (PORTBbits.RB1 == 0) {
  3604  000A7E  A281               	btfss	3969,1,c	;volatile
  3605  000A80  D7FE               	goto	l346
  3606                           
  3607                           ;main.c: 622: }
  3608                           ;main.c: 624: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3609  000A82  3881               	swapf	3969,w,c	;volatile
  3610  000A84  0B0F               	andlw	15
  3611  000A86  0B0F               	andlw	15
  3612  000A88  6E43               	movwf	operation@keypress_438,c
  3613  000A8A                     
  3614                           ;main.c: 627: continue;
  3615  000A8A  B281               	btfsc	3969,1,c	;volatile
  3616  000A8C  D7FE               	goto	l351
  3617                           
  3618                           ;main.c: 628: }
  3619                           ;main.c: 630: __nop();
  3620  000A8E  F000               	nop	
  3621                           
  3622                           ;main.c: 632: if (keypress == 14) {
  3623  000A90  0E0E               	movlw	14
  3624  000A92  1843               	xorwf	operation@keypress_438,w,c
  3625  000A94  B4D8               	btfsc	status,2,c
  3626  000A96  0012               	return	
  3627  000A98  D7F2               	goto	l346
  3628  000A9A                     __end_of_operation:
  3629                           	opt stack 0
  3630                           tblptru	equ	0xFF8
  3631                           tblptrh	equ	0xFF7
  3632                           tblptrl	equ	0xFF6
  3633                           tablat	equ	0xFF5
  3634                           prodh	equ	0xFF4
  3635                           prodl	equ	0xFF3
  3636                           intcon	equ	0xFF2
  3637                           intcon3	equ	0xFF0
  3638                           postinc0	equ	0xFEE
  3639                           wreg	equ	0xFE8
  3640                           postdec1	equ	0xFE5
  3641                           plusw1	equ	0xFE3
  3642                           fsr1l	equ	0xFE1
  3643                           indf2	equ	0xFDF
  3644                           plusw2	equ	0xFDB
  3645                           fsr2h	equ	0xFDA
  3646                           fsr2l	equ	0xFD9
  3647                           status	equ	0xFD8
  3648                           
  3649 ;; *************** function _printf *****************
  3650 ;; Defined at:
  3651 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  f               2   31[COMRAM] PTR const unsigned char 
  3654 ;;		 -> STR_56(19), STR_55(18), STR_54(17), STR_53(8), 
  3655 ;;		 -> STR_52(19), STR_51(18), STR_50(18), STR_49(11), 
  3656 ;;		 -> STR_48(11), STR_47(7), STR_46(19), STR_45(14), 
  3657 ;;		 -> STR_44(20), STR_43(13), STR_42(11), STR_41(12), 
  3658 ;;		 -> STR_40(7), STR_39(19), STR_38(23), STR_37(7), 
  3659 ;;		 -> STR_36(19), STR_35(17), STR_34(7), STR_33(21), 
  3660 ;;		 -> STR_32(21), STR_31(21), STR_30(21), STR_29(18), 
  3661 ;;		 -> STR_28(18), STR_27(11), STR_26(14), STR_25(20), 
  3662 ;;		 -> STR_24(13), STR_23(11), STR_22(14), STR_21(19), 
  3663 ;;		 -> STR_20(20), STR_19(20), STR_18(13), STR_17(12), 
  3664 ;;		 -> STR_16(21), STR_15(13), STR_14(11), STR_13(13), 
  3665 ;;		 -> STR_12(21), STR_11(21), STR_10(8), STR_9(8), 
  3666 ;;		 -> STR_8(8), STR_7(17), STR_6(21), STR_5(21), 
  3667 ;;		 -> STR_4(21), STR_3(21), STR_2(21), STR_1(33), 
  3668 ;; Auto vars:     Size  Location     Type
  3669 ;;  idx             1   49[COMRAM] unsigned char 
  3670 ;;  tmpval          4    0        struct .
  3671 ;;  cp              3    0        PTR const unsigned char 
  3672 ;;  width           2   56[COMRAM] int 
  3673 ;;  val             2   53[COMRAM] unsigned int 
  3674 ;;  ap              2   50[COMRAM] PTR void [1]
  3675 ;;		 -> ?_printf(2), 
  3676 ;;  len             2    0        unsigned int 
  3677 ;;  c               1   58[COMRAM] char 
  3678 ;;  flag            1   55[COMRAM] unsigned char 
  3679 ;;  prec            1   52[COMRAM] char 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  2   31[COMRAM] int 
  3682 ;; Registers used:
  3683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3689 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;Total ram usage:       28 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    3
  3696 ;; This function calls:
  3697 ;;		___lwdiv
  3698 ;;		___lwmod
  3699 ;;		___wmul
  3700 ;;		_isdigit
  3701 ;;		_putch
  3702 ;; This function is called by:
  3703 ;;		_main
  3704 ;;		_operation
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text2
  3709  000A9A                     __ptext2:
  3710                           	opt stack 0
  3711  000A9A                     _printf:
  3712                           	opt stack 27
  3713                           
  3714                           ;doprnt.c: 466: va_list ap;
  3715                           ;doprnt.c: 499: signed char c;
  3716                           ;doprnt.c: 501: int width;
  3717                           ;doprnt.c: 506: signed char prec;
  3718                           ;doprnt.c: 508: unsigned char flag;
  3719                           ;doprnt.c: 523: union {
  3720                           ;doprnt.c: 524: unsigned long vd;
  3721                           ;doprnt.c: 525: double integ;
  3722                           ;doprnt.c: 526: } tmpval;
  3723                           ;doprnt.c: 528: unsigned int val;
  3724                           ;doprnt.c: 529: unsigned len;
  3725                           ;doprnt.c: 530: const char * cp;
  3726                           ;doprnt.c: 533: *ap = __va_start();
  3727                           
  3728                           ;incstack = 0
  3729  000A9A  0E22               	movlw	low (?_printf+2)
  3730  000A9C  6E33               	movwf	printf@ap,c
  3731  000A9E  0E00               	movlw	high (?_printf+2)
  3732  000AA0  6E34               	movwf	printf@ap+1,c
  3733                           
  3734                           ;doprnt.c: 536: while(c = *f++) {
  3735  000AA2  D174               	goto	u1430
  3736  000AA4                     
  3737                           ;doprnt.c: 538: if(c != '%')
  3738  000AA4  0E25               	movlw	37
  3739  000AA6  183B               	xorwf	printf@c,w,c
  3740  000AA8  B4D8               	btfsc	status,2,c
  3741  000AAA  D004               	goto	l431
  3742                           
  3743                           ;doprnt.c: 540: {
  3744                           ;doprnt.c: 541: (putch(c) );
  3745  000AAC  503B               	movf	printf@c,w,c
  3746  000AAE  ECA6  F009         	call	_putch
  3747                           
  3748                           ;doprnt.c: 542: continue;
  3749  000AB2  D16C               	goto	u1430
  3750  000AB4                     l431:
  3751                           
  3752                           ;doprnt.c: 543: }
  3753                           ;doprnt.c: 546: width = 0;
  3754  000AB4  0E00               	movlw	0
  3755  000AB6  6E3A               	movwf	printf@width+1,c
  3756  000AB8  0E00               	movlw	0
  3757  000ABA  6E39               	movwf	printf@width,c
  3758                           
  3759                           ;doprnt.c: 548: flag = 0;
  3760  000ABC  0E00               	movlw	0
  3761  000ABE  6E38               	movwf	printf@flag,c
  3762                           
  3763                           ;doprnt.c: 551: switch(*f) {
  3764                           
  3765                           ;doprnt.c: 550: for(;;) {
  3766  000AC0  D003               	goto	l433
  3767  000AC2                     
  3768                           ;doprnt.c: 580: flag |= 0x04;
  3769  000AC2  8438               	bsf	printf@flag,2,c
  3770                           
  3771                           ;doprnt.c: 581: f++;
  3772  000AC4  4A20               	infsnz	printf@f,f,c
  3773  000AC6  2A21               	incf	printf@f+1,f,c
  3774  000AC8                     l433:
  3775  000AC8  C020  FFF6         	movff	printf@f,tblptrl
  3776  000ACC  C021  FFF7         	movff	printf@f+1,tblptrh
  3777  000AD0                     	if	0	;tblptru may be non-zero
  3778  000AD0                     	endif
  3779  000AD0                     	if	0	;tblptru may be non-zero
  3780  000AD0                     	endif
  3781  000AD0  0008               	tblrd		*
  3782  000AD2  50F5               	movf	tablat,w,c
  3783                           
  3784                           ; Switch size 1, requested type "space"
  3785                           ; Number of cases is 1, Range of values is 48 to 48
  3786                           ; switch strategies available:
  3787                           ; Name         Instructions Cycles
  3788                           ; simple_byte            4     3 (average)
  3789                           ;	Chosen strategy is simple_byte
  3790  000AD4  0A30               	xorlw	48	; case 48
  3791  000AD6  B4D8               	btfsc	status,2,c
  3792  000AD8  D7F4               	goto	l434
  3793                           
  3794                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3795                           
  3796                           ;doprnt.c: 586: }
  3797                           
  3798                           ;doprnt.c: 585: break;
  3799  000ADA  C020  FFF6         	movff	printf@f,tblptrl
  3800  000ADE  C021  FFF7         	movff	printf@f+1,tblptrh
  3801  000AE2                     	if	0	;tblptru may be non-zero
  3802  000AE2                     	endif
  3803  000AE2                     	if	0	;tblptru may be non-zero
  3804  000AE2                     	endif
  3805  000AE2  0008               	tblrd		*
  3806  000AE4  50F5               	movf	tablat,w,c
  3807  000AE6  EC89  F009         	call	_isdigit
  3808  000AEA  A0D8               	btfss	status,0,c
  3809  000AEC  D035               	goto	l441
  3810                           
  3811                           ;doprnt.c: 598: width = 0;
  3812  000AEE  0E00               	movlw	0
  3813  000AF0  6E3A               	movwf	printf@width+1,c
  3814  000AF2  0E00               	movlw	0
  3815  000AF4  6E39               	movwf	printf@width,c
  3816  000AF6                     
  3817                           ;doprnt.c: 600: width *= 10;
  3818  000AF6  C039  F014         	movff	printf@width,___wmul@multiplier
  3819  000AFA  C03A  F015         	movff	printf@width+1,___wmul@multiplier+1
  3820  000AFE  0E00               	movlw	0
  3821  000B00  6E17               	movwf	___wmul@multiplicand+1,c
  3822  000B02  0E0A               	movlw	10
  3823  000B04  6E16               	movwf	___wmul@multiplicand,c
  3824  000B06  EC64  F009         	call	___wmul	;wreg free
  3825  000B0A  C014  F039         	movff	?___wmul,printf@width
  3826  000B0E  C015  F03A         	movff	?___wmul+1,printf@width+1
  3827                           
  3828                           ;doprnt.c: 601: width += *f++ - '0';
  3829  000B12  0ED0               	movlw	208
  3830  000B14  6E2E               	movwf	??_printf& (0+255),c
  3831  000B16  0EFF               	movlw	255
  3832  000B18  6E2F               	movwf	(??_printf+1)& (0+255),c
  3833  000B1A  C020  FFF6         	movff	printf@f,tblptrl
  3834  000B1E  C021  FFF7         	movff	printf@f+1,tblptrh
  3835  000B22                     	if	0	;tblptru may be non-zero
  3836  000B22                     	endif
  3837  000B22                     	if	0	;tblptru may be non-zero
  3838  000B22                     	endif
  3839  000B22  0008               	tblrd		*
  3840  000B24  50F5               	movf	tablat,w,c
  3841  000B26  6E30               	movwf	(??_printf+2)& (0+255),c
  3842  000B28  6A31               	clrf	(??_printf+3)& (0+255),c
  3843  000B2A  502E               	movf	??_printf,w,c
  3844  000B2C  2630               	addwf	??_printf+2,f,c
  3845  000B2E  502F               	movf	??_printf+1,w,c
  3846  000B30  2231               	addwfc	??_printf+3,f,c
  3847  000B32  5030               	movf	??_printf+2,w,c
  3848  000B34  2639               	addwf	printf@width,f,c
  3849  000B36  5031               	movf	??_printf+3,w,c
  3850  000B38  223A               	addwfc	printf@width+1,f,c
  3851  000B3A  4A20               	infsnz	printf@f,f,c
  3852  000B3C  2A21               	incf	printf@f+1,f,c
  3853                           
  3854                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3855  000B3E  C020  FFF6         	movff	printf@f,tblptrl
  3856  000B42  C021  FFF7         	movff	printf@f+1,tblptrh
  3857  000B46                     	if	0	;tblptru may be non-zero
  3858  000B46                     	endif
  3859  000B46                     	if	0	;tblptru may be non-zero
  3860  000B46                     	endif
  3861  000B46  0008               	tblrd		*
  3862  000B48  50F5               	movf	tablat,w,c
  3863  000B4A  EC89  F009         	call	_isdigit
  3864  000B4E  A0D8               	btfss	status,0,c
  3865  000B50  D003               	goto	l441
  3866  000B52  D7D1               	goto	l439
  3867  000B54                     
  3868                           ;doprnt.c: 721: flag |= 0x80;
  3869  000B54  8E38               	bsf	printf@flag,7,c
  3870                           
  3871                           ;doprnt.c: 723: break;
  3872  000B56  D017               	goto	l446
  3873  000B58                     l441:
  3874  000B58  C020  FFF6         	movff	printf@f,tblptrl
  3875  000B5C  C021  FFF7         	movff	printf@f+1,tblptrh
  3876  000B60  4A20               	infsnz	printf@f,f,c
  3877  000B62  2A21               	incf	printf@f+1,f,c
  3878  000B64                     	if	0	;tblptru may be non-zero
  3879  000B64                     	endif
  3880  000B64                     	if	0	;tblptru may be non-zero
  3881  000B64                     	endif
  3882  000B64  0008               	tblrd		*
  3883  000B66  CFF5 F03B          	movff	tablat,printf@c
  3884  000B6A  503B               	movf	printf@c,w,c
  3885                           
  3886                           ; Switch size 1, requested type "space"
  3887                           ; Number of cases is 4, Range of values is 0 to 120
  3888                           ; switch strategies available:
  3889                           ; Name         Instructions Cycles
  3890                           ; simple_byte           13     7 (average)
  3891                           ;	Chosen strategy is simple_byte
  3892  000B6C  0A00               	xorlw	0	; case 0
  3893  000B6E  B4D8               	btfsc	status,2,c
  3894  000B70  0012               	return	
  3895  000B72  0A64               	xorlw	100	; case 100
  3896  000B74  B4D8               	btfsc	status,2,c
  3897  000B76  D007               	goto	l446
  3898  000B78  0A0D               	xorlw	13	; case 105
  3899  000B7A  B4D8               	btfsc	status,2,c
  3900  000B7C  D004               	goto	l446
  3901  000B7E  0A11               	xorlw	17	; case 120
  3902  000B80  B4D8               	btfsc	status,2,c
  3903  000B82  D7E8               	goto	l447
  3904  000B84  D103               	goto	u1430
  3905  000B86                     l446:
  3906                           
  3907                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3908  000B86  BE38               	btfsc	printf@flag,7,c
  3909  000B88  D015               	goto	l449
  3910                           
  3911                           ;doprnt.c: 1253: {
  3912                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3913  000B8A  C033  FFD9         	movff	printf@ap,fsr2l
  3914  000B8E  C034  FFDA         	movff	printf@ap+1,fsr2h
  3915  000B92  CFDE F036          	movff	postinc2,printf@val
  3916  000B96  CFDD F037          	movff	postdec2,printf@val+1
  3917  000B9A  0E02               	movlw	2
  3918  000B9C  2633               	addwf	printf@ap,f,c
  3919  000B9E  0E00               	movlw	0
  3920  000BA0  2234               	addwfc	printf@ap+1,f,c
  3921                           
  3922                           ;doprnt.c: 1261: if((int)val < 0) {
  3923  000BA2  AE37               	btfss	printf@val+1,7,c
  3924  000BA4  D044               	goto	l452
  3925                           
  3926                           ;doprnt.c: 1262: flag |= 0x03;
  3927  000BA6  0E03               	movlw	3
  3928  000BA8  1238               	iorwf	printf@flag,f,c
  3929                           
  3930                           ;doprnt.c: 1263: val = -val;
  3931  000BAA  6C36               	negf	printf@val,c
  3932  000BAC  1E37               	comf	printf@val+1,f,c
  3933  000BAE  B0D8               	btfsc	status,0,c
  3934  000BB0  2A37               	incf	printf@val+1,f,c
  3935                           
  3936                           ;doprnt.c: 1264: }
  3937                           ;doprnt.c: 1266: }
  3938  000BB2  D03D               	goto	l452
  3939  000BB4                     l449:
  3940                           
  3941                           ;doprnt.c: 1268: else
  3942                           ;doprnt.c: 1273: {
  3943                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3944  000BB4  C033  FFD9         	movff	printf@ap,fsr2l
  3945  000BB8  C034  FFDA         	movff	printf@ap+1,fsr2h
  3946  000BBC  CFDE F036          	movff	postinc2,printf@val
  3947  000BC0  CFDD F037          	movff	postdec2,printf@val+1
  3948  000BC4  0E02               	movlw	2
  3949  000BC6  2633               	addwf	printf@ap,f,c
  3950  000BC8  0E00               	movlw	0
  3951  000BCA  2234               	addwfc	printf@ap+1,f,c
  3952                           
  3953                           ;doprnt.c: 1287: }
  3954                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3955  000BCC  D030               	goto	l452
  3956  000BCE                     
  3957                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3958  000BCE  0E01               	movlw	1
  3959  000BD0  6E3B               	movwf	printf@c,c
  3960  000BD2                     l2184:
  3961  000BD2  0E05               	movlw	5
  3962  000BD4  183B               	xorwf	printf@c,w,c
  3963  000BD6  B4D8               	btfsc	status,2,c
  3964  000BD8  D032               	goto	l457
  3965                           
  3966                           ;doprnt.c: 1306: if(val < dpowers[c])
  3967  000BDA  503B               	movf	printf@c,w,c
  3968  000BDC  0D02               	mullw	2
  3969  000BDE  0E14               	movlw	low _dpowers
  3970  000BE0  24F3               	addwf	prodl,w,c
  3971  000BE2  6EF6               	movwf	tblptrl,c
  3972  000BE4  0EFD               	movlw	high _dpowers
  3973  000BE6  20F4               	addwfc	prodh,w,c
  3974  000BE8  6EF7               	movwf	tblptrh,c
  3975  000BEA                     	if	0	;There are less than 3 active tblptr bytes
  3976  000BEA                     	endif
  3977  000BEA  0009               	tblrd		*+
  3978  000BEC  50F5               	movf	tablat,w,c
  3979  000BEE  5C36               	subwf	printf@val,w,c
  3980  000BF0  0009               	tblrd		*+
  3981  000BF2  50F5               	movf	tablat,w,c
  3982  000BF4  5837               	subwfb	printf@val+1,w,c
  3983  000BF6  A0D8               	btfss	status,0,c
  3984  000BF8  D022               	goto	l457
  3985                           
  3986                           ;doprnt.c: 1307: break;
  3987  000BFA  2A3B               	incf	printf@c,f,c
  3988  000BFC  D7EA               	goto	l2184
  3989  000BFE                     
  3990                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3991  000BFE  0E01               	movlw	1
  3992  000C00  6E3B               	movwf	printf@c,c
  3993  000C02                     l2198:
  3994  000C02  0E04               	movlw	4
  3995  000C04  183B               	xorwf	printf@c,w,c
  3996  000C06  B4D8               	btfsc	status,2,c
  3997  000C08  D01A               	goto	l457
  3998                           
  3999                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4000  000C0A  503B               	movf	printf@c,w,c
  4001  000C0C  0D02               	mullw	2
  4002  000C0E  0E1E               	movlw	low _hexpowers
  4003  000C10  24F3               	addwf	prodl,w,c
  4004  000C12  6EF6               	movwf	tblptrl,c
  4005  000C14  0EFD               	movlw	high _hexpowers
  4006  000C16  20F4               	addwfc	prodh,w,c
  4007  000C18  6EF7               	movwf	tblptrh,c
  4008  000C1A                     	if	0	;There are less than 3 active tblptr bytes
  4009  000C1A                     	endif
  4010  000C1A  0009               	tblrd		*+
  4011  000C1C  50F5               	movf	tablat,w,c
  4012  000C1E  5C36               	subwf	printf@val,w,c
  4013  000C20  0009               	tblrd		*+
  4014  000C22  50F5               	movf	tablat,w,c
  4015  000C24  5837               	subwfb	printf@val+1,w,c
  4016  000C26  A0D8               	btfss	status,0,c
  4017  000C28  D00A               	goto	l457
  4018                           
  4019                           ;doprnt.c: 1318: break;
  4020  000C2A  2A3B               	incf	printf@c,f,c
  4021  000C2C  D7EA               	goto	l2198
  4022  000C2E                     l452:
  4023  000C2E  5038               	movf	printf@flag,w,c
  4024  000C30  0B80               	andlw	128
  4025                           
  4026                           ; Switch size 1, requested type "space"
  4027                           ; Number of cases is 2, Range of values is 0 to 128
  4028                           ; switch strategies available:
  4029                           ; Name         Instructions Cycles
  4030                           ; simple_byte            7     4 (average)
  4031                           ;	Chosen strategy is simple_byte
  4032  000C32  0A00               	xorlw	0	; case 0
  4033  000C34  B4D8               	btfsc	status,2,c
  4034  000C36  D7CB               	goto	l453
  4035  000C38  0A80               	xorlw	128	; case 128
  4036  000C3A  B4D8               	btfsc	status,2,c
  4037  000C3C  D7E0               	goto	l458
  4038  000C3E                     l457:
  4039                           
  4040                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4041  000C3E  5039               	movf	printf@width,w,c
  4042  000C40  103A               	iorwf	printf@width+1,w,c
  4043  000C42  B4D8               	btfsc	status,2,c
  4044  000C44  D009               	goto	l462
  4045  000C46  C038  F02E         	movff	printf@flag,??_printf
  4046  000C4A  0E03               	movlw	3
  4047  000C4C  162E               	andwf	??_printf,f,c
  4048  000C4E  B4D8               	btfsc	status,2,c
  4049  000C50  D003               	goto	l462
  4050                           
  4051                           ;doprnt.c: 1346: width--;
  4052  000C52  0639               	decf	printf@width,f,c
  4053  000C54  A0D8               	btfss	status,0,c
  4054  000C56  063A               	decf	printf@width+1,f,c
  4055  000C58                     l462:
  4056                           
  4057                           ;doprnt.c: 1381: if(width > c)
  4058  000C58  0E80               	movlw	128
  4059  000C5A  BE3B               	btfsc	printf@c,7,c
  4060  000C5C  0E7F               	movlw	127
  4061  000C5E  6E2E               	movwf	??_printf& (0+255),c
  4062  000C60  5039               	movf	printf@width,w,c
  4063  000C62  5C3B               	subwf	printf@c,w,c
  4064  000C64  503A               	movf	printf@width+1,w,c
  4065  000C66  0A80               	xorlw	128
  4066  000C68  582E               	subwfb	??_printf& (0+255),w,c
  4067  000C6A  B0D8               	btfsc	status,0,c
  4068  000C6C  D007               	goto	l463
  4069                           
  4070                           ;doprnt.c: 1382: width -= c;
  4071  000C6E  503B               	movf	printf@c,w,c
  4072  000C70  5E39               	subwf	printf@width,f,c
  4073  000C72  0E00               	movlw	0
  4074  000C74  BE3B               	btfsc	printf@c,7,c
  4075  000C76  0EFF               	movlw	255
  4076  000C78  5A3A               	subwfb	printf@width+1,f,c
  4077  000C7A  D004               	goto	l464
  4078  000C7C                     l463:
  4079                           
  4080                           ;doprnt.c: 1383: else
  4081                           ;doprnt.c: 1384: width = 0;
  4082  000C7C  0E00               	movlw	0
  4083  000C7E  6E3A               	movwf	printf@width+1,c
  4084  000C80  0E00               	movlw	0
  4085  000C82  6E39               	movwf	printf@width,c
  4086  000C84                     l464:
  4087                           
  4088                           ;doprnt.c: 1387: if(flag & 0x04) {
  4089  000C84  A438               	btfss	printf@flag,2,c
  4090  000C86  D014               	goto	l465
  4091                           
  4092                           ;doprnt.c: 1392: if(flag & 0x03)
  4093  000C88  C038  F02E         	movff	printf@flag,??_printf
  4094  000C8C  0E03               	movlw	3
  4095  000C8E  162E               	andwf	??_printf,f,c
  4096  000C90  B4D8               	btfsc	status,2,c
  4097  000C92  D003               	goto	l466
  4098                           
  4099                           ;doprnt.c: 1393: (putch('-') );
  4100  000C94  0E2D               	movlw	45
  4101  000C96  ECA6  F009         	call	_putch
  4102  000C9A                     l466:
  4103                           
  4104                           ;doprnt.c: 1415: if(width)
  4105  000C9A  5039               	movf	printf@width,w,c
  4106  000C9C  103A               	iorwf	printf@width+1,w,c
  4107  000C9E  B4D8               	btfsc	status,2,c
  4108  000CA0  D01E               	goto	l474
  4109                           
  4110                           ;doprnt.c: 1417: (putch('0') );
  4111                           
  4112                           ;doprnt.c: 1416: do
  4113  000CA2  0E30               	movlw	48
  4114  000CA4  ECA6  F009         	call	_putch
  4115                           
  4116                           ;doprnt.c: 1418: while(--width);
  4117  000CA8  0639               	decf	printf@width,f,c
  4118  000CAA  A0D8               	btfss	status,0,c
  4119  000CAC  063A               	decf	printf@width+1,f,c
  4120  000CAE  D7F5               	goto	l466
  4121  000CB0                     l465:
  4122                           
  4123                           ;doprnt.c: 1422: {
  4124                           ;doprnt.c: 1424: if(width
  4125                           ;doprnt.c: 1428: )
  4126  000CB0  5039               	movf	printf@width,w,c
  4127  000CB2  103A               	iorwf	printf@width+1,w,c
  4128  000CB4  B4D8               	btfsc	status,2,c
  4129  000CB6  D00A               	goto	u1410
  4130  000CB8                     u1400:
  4131                           
  4132                           ;doprnt.c: 1430: (putch(' ') );
  4133                           
  4134                           ;doprnt.c: 1429: do
  4135  000CB8  0E20               	movlw	32
  4136  000CBA  ECA6  F009         	call	_putch
  4137                           
  4138                           ;doprnt.c: 1431: while(--width);
  4139  000CBE  0639               	decf	printf@width,f,c
  4140  000CC0  A0D8               	btfss	status,0,c
  4141  000CC2  063A               	decf	printf@width+1,f,c
  4142  000CC4  5039               	movf	printf@width,w,c
  4143  000CC6  103A               	iorwf	printf@width+1,w,c
  4144  000CC8  A4D8               	btfss	status,2,c
  4145  000CCA  D7F6               	goto	u1400
  4146  000CCC                     u1410:
  4147                           
  4148                           ;doprnt.c: 1438: if(flag & 0x03)
  4149  000CCC  C038  F02E         	movff	printf@flag,??_printf
  4150  000CD0  0E03               	movlw	3
  4151  000CD2  162E               	andwf	??_printf,f,c
  4152  000CD4  B4D8               	btfsc	status,2,c
  4153  000CD6  D003               	goto	l474
  4154                           
  4155                           ;doprnt.c: 1439: (putch('-') );
  4156  000CD8  0E2D               	movlw	45
  4157  000CDA  ECA6  F009         	call	_putch
  4158  000CDE                     l474:
  4159                           
  4160                           ;doprnt.c: 1469: }
  4161                           ;doprnt.c: 1472: prec = c;
  4162  000CDE  C03B  F035         	movff	printf@c,printf@prec
  4163                           
  4164                           ;doprnt.c: 1474: while(prec--) {
  4165  000CE2  D050               	goto	l475
  4166  000CE4                     
  4167                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4168  000CE4  5035               	movf	printf@prec,w,c
  4169  000CE6  0D02               	mullw	2
  4170  000CE8  0E14               	movlw	low _dpowers
  4171  000CEA  24F3               	addwf	prodl,w,c
  4172  000CEC  6EF6               	movwf	tblptrl,c
  4173  000CEE  0EFD               	movlw	high _dpowers
  4174  000CF0  20F4               	addwfc	prodh,w,c
  4175  000CF2  6EF7               	movwf	tblptrh,c
  4176  000CF4                     	if	0	;There are less than 3 active tblptr bytes
  4177  000CF4                     	endif
  4178  000CF4  0009               	tblrd		*+
  4179  000CF6  CFF5 F016          	movff	tablat,___lwdiv@divisor
  4180  000CFA  000A               	tblrd		*-
  4181  000CFC  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
  4182  000D00  C036  F014         	movff	printf@val,___lwdiv@dividend
  4183  000D04  C037  F015         	movff	printf@val+1,___lwdiv@dividend+1
  4184  000D08  ECD7  F008         	call	___lwdiv	;wreg free
  4185  000D0C  C014  F01B         	movff	?___lwdiv,___lwmod@dividend
  4186  000D10  C015  F01C         	movff	?___lwdiv+1,___lwmod@dividend+1
  4187  000D14  0E00               	movlw	0
  4188  000D16  6E1E               	movwf	___lwmod@divisor+1,c
  4189  000D18  0E0A               	movlw	10
  4190  000D1A  6E1D               	movwf	___lwmod@divisor,c
  4191  000D1C  EC26  F009         	call	___lwmod	;wreg free
  4192  000D20  501B               	movf	?___lwmod,w,c
  4193  000D22  0F30               	addlw	48
  4194  000D24  6E3B               	movwf	printf@c,c
  4195                           
  4196                           ;doprnt.c: 1491: break;
  4197  000D26  D02B               	goto	l479
  4198  000D28                     
  4199                           ;doprnt.c: 1499: {
  4200                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4201  000D28  C036  F014         	movff	printf@val,___lwdiv@dividend
  4202  000D2C  C037  F015         	movff	printf@val+1,___lwdiv@dividend+1
  4203  000D30  5035               	movf	printf@prec,w,c
  4204  000D32  0D02               	mullw	2
  4205  000D34  0E1E               	movlw	low _hexpowers
  4206  000D36  24F3               	addwf	prodl,w,c
  4207  000D38  6EF6               	movwf	tblptrl,c
  4208  000D3A  0EFD               	movlw	high _hexpowers
  4209  000D3C  20F4               	addwfc	prodh,w,c
  4210  000D3E  6EF7               	movwf	tblptrh,c
  4211  000D40                     	if	0	;There are less than 3 active tblptr bytes
  4212  000D40                     	endif
  4213  000D40  0009               	tblrd		*+
  4214  000D42  CFF5 F016          	movff	tablat,___lwdiv@divisor
  4215  000D46  000A               	tblrd		*-
  4216  000D48  CFF5 F017          	movff	tablat,___lwdiv@divisor+1
  4217  000D4C  ECD7  F008         	call	___lwdiv	;wreg free
  4218  000D50  5014               	movf	?___lwdiv,w,c
  4219  000D52  0B0F               	andlw	15
  4220  000D54  6E32               	movwf	printf@idx,c
  4221                           
  4222                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4223  000D56  5032               	movf	printf@idx,w,c
  4224  000D58  0D01               	mullw	1
  4225  000D5A  0EFF               	movlw	low STR_57
  4226  000D5C  24F3               	addwf	prodl,w,c
  4227  000D5E  6EF6               	movwf	tblptrl,c
  4228  000D60  0EFE               	movlw	high STR_57
  4229  000D62  20F4               	addwfc	prodh,w,c
  4230  000D64  6EF7               	movwf	tblptrh,c
  4231  000D66                     	if	0	;There are less than 3 active tblptr bytes
  4232  000D66                     	endif
  4233  000D66  0008               	tblrd		*
  4234  000D68  CFF5 F03B          	movff	tablat,printf@c
  4235                           
  4236                           ;doprnt.c: 1523: }
  4237                           
  4238                           ;doprnt.c: 1508: }
  4239                           ;doprnt.c: 1510: break;
  4240  000D6C  D008               	goto	l479
  4241  000D6E  5038               	movf	printf@flag,w,c
  4242  000D70  0B80               	andlw	128
  4243                           
  4244                           ; Switch size 1, requested type "space"
  4245                           ; Number of cases is 2, Range of values is 0 to 128
  4246                           ; switch strategies available:
  4247                           ; Name         Instructions Cycles
  4248                           ; simple_byte            7     4 (average)
  4249                           ;	Chosen strategy is simple_byte
  4250  000D72  0A00               	xorlw	0	; case 0
  4251  000D74  B4D8               	btfsc	status,2,c
  4252  000D76  D7B6               	goto	l478
  4253  000D78  0A80               	xorlw	128	; case 128
  4254  000D7A  B4D8               	btfsc	status,2,c
  4255  000D7C  D7D5               	goto	l480
  4256  000D7E                     l479:
  4257                           
  4258                           ;doprnt.c: 1524: (putch(c) );
  4259  000D7E  503B               	movf	printf@c,w,c
  4260  000D80  ECA6  F009         	call	_putch
  4261  000D84                     l475:
  4262  000D84  0635               	decf	printf@prec,f,c
  4263  000D86  2835               	incf	printf@prec,w,c
  4264  000D88  A4D8               	btfss	status,2,c
  4265  000D8A  D7F1               	goto	l477
  4266  000D8C                     u1430:
  4267  000D8C  C020  FFF6         	movff	printf@f,tblptrl
  4268  000D90  C021  FFF7         	movff	printf@f+1,tblptrh
  4269  000D94  4A20               	infsnz	printf@f,f,c
  4270  000D96  2A21               	incf	printf@f+1,f,c
  4271  000D98                     	if	0	;tblptru may be non-zero
  4272  000D98                     	endif
  4273  000D98                     	if	0	;tblptru may be non-zero
  4274  000D98                     	endif
  4275  000D98  0008               	tblrd		*
  4276  000D9A  CFF5 F03B          	movff	tablat,printf@c
  4277  000D9E  503B               	movf	printf@c,w,c
  4278  000DA0  B4D8               	btfsc	status,2,c
  4279  000DA2  0012               	return	
  4280  000DA4  D67F               	goto	l430
  4281  000DA6                     __end_of_printf:
  4282                           	opt stack 0
  4283                           tblptru	equ	0xFF8
  4284                           tblptrh	equ	0xFF7
  4285                           tblptrl	equ	0xFF6
  4286                           tablat	equ	0xFF5
  4287                           prodh	equ	0xFF4
  4288                           prodl	equ	0xFF3
  4289                           intcon	equ	0xFF2
  4290                           intcon3	equ	0xFF0
  4291                           postinc0	equ	0xFEE
  4292                           wreg	equ	0xFE8
  4293                           postdec1	equ	0xFE5
  4294                           plusw1	equ	0xFE3
  4295                           fsr1l	equ	0xFE1
  4296                           indf2	equ	0xFDF
  4297                           postinc2	equ	0xFDE
  4298                           postdec2	equ	0xFDD
  4299                           plusw2	equ	0xFDB
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function _putch *****************
  4305 ;; Defined at:
  4306 ;;		line 24 in file "lcd.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  data            1    wreg     unsigned char 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  data            1   21[COMRAM] unsigned char 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg, status,2, status,0, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;Total ram usage:        1 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    2
  4327 ;; This function calls:
  4328 ;;		_lcdNibble
  4329 ;; This function is called by:
  4330 ;;		_operation
  4331 ;;		_printf
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text3
  4336  00134C                     __ptext3:
  4337                           	opt stack 0
  4338  00134C                     _putch:
  4339                           	opt stack 27
  4340                           
  4341                           ;incstack = 0
  4342                           ;putch@data stored from wreg
  4343  00134C  6E16               	movwf	putch@data,c
  4344                           
  4345                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4346  00134E  848C               	bsf	3980,2,c	;volatile
  4347                           
  4348                           ;lcd.c: 33: lcdNibble(data);
  4349  001350  5016               	movf	putch@data,w,c
  4350  001352  EC32  F008         	call	_lcdNibble
  4351                           
  4352                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4353  001356  0EC8               	movlw	200
  4354  001358                     u2427:
  4355  001358  D000               	nop2	
  4356  00135A  2EE8               	decfsz	wreg,f,c
  4357  00135C  D7FD               	bra	u2427
  4358  00135E  0012               	return		;funcret
  4359  001360                     __end_of_putch:
  4360                           	opt stack 0
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           prodh	equ	0xFF4
  4366                           prodl	equ	0xFF3
  4367                           intcon	equ	0xFF2
  4368                           intcon3	equ	0xFF0
  4369                           postinc0	equ	0xFEE
  4370                           wreg	equ	0xFE8
  4371                           postdec1	equ	0xFE5
  4372                           plusw1	equ	0xFE3
  4373                           fsr1l	equ	0xFE1
  4374                           indf2	equ	0xFDF
  4375                           postinc2	equ	0xFDE
  4376                           postdec2	equ	0xFDD
  4377                           plusw2	equ	0xFDB
  4378                           fsr2h	equ	0xFDA
  4379                           fsr2l	equ	0xFD9
  4380                           status	equ	0xFD8
  4381                           
  4382 ;; *************** function _isdigit *****************
  4383 ;; Defined at:
  4384 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;  c               1    wreg     unsigned char 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;  c               1   21[COMRAM] unsigned char 
  4389 ;; Return value:  Size  Location     Type
  4390 ;;		None               void
  4391 ;; Registers used:
  4392 ;;		wreg, status,2, status,0
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;Total ram usage:        3 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:    1
  4405 ;; This function calls:
  4406 ;;		Nothing
  4407 ;; This function is called by:
  4408 ;;		_printf
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text4
  4413  001312                     __ptext4:
  4414                           	opt stack 0
  4415  001312                     _isdigit:
  4416                           	opt stack 28
  4417                           
  4418                           ;incstack = 0
  4419                           ;isdigit@c stored from wreg
  4420  001312  6E16               	movwf	isdigit@c,c
  4421  001314  0E00               	movlw	0
  4422  001316  6E15               	movwf	_isdigit$822,c
  4423  001318  0E3A               	movlw	58
  4424  00131A  6016               	cpfslt	isdigit@c,c
  4425  00131C  D005               	goto	l813
  4426  00131E  0E2F               	movlw	47
  4427  001320  6416               	cpfsgt	isdigit@c,c
  4428  001322  D002               	goto	l813
  4429  001324  0E01               	movlw	1
  4430  001326  6E15               	movwf	_isdigit$822,c
  4431  001328                     l813:
  4432  001328  C015  F014         	movff	_isdigit$822,??_isdigit
  4433  00132C  3014               	rrcf	??_isdigit,w,c
  4434  00132E  0012               	return	
  4435  001330                     __end_of_isdigit:
  4436                           	opt stack 0
  4437                           tblptru	equ	0xFF8
  4438                           tblptrh	equ	0xFF7
  4439                           tblptrl	equ	0xFF6
  4440                           tablat	equ	0xFF5
  4441                           prodh	equ	0xFF4
  4442                           prodl	equ	0xFF3
  4443                           intcon	equ	0xFF2
  4444                           intcon3	equ	0xFF0
  4445                           postinc0	equ	0xFEE
  4446                           wreg	equ	0xFE8
  4447                           postdec1	equ	0xFE5
  4448                           plusw1	equ	0xFE3
  4449                           fsr1l	equ	0xFE1
  4450                           indf2	equ	0xFDF
  4451                           postinc2	equ	0xFDE
  4452                           postdec2	equ	0xFDD
  4453                           plusw2	equ	0xFDB
  4454                           fsr2h	equ	0xFDA
  4455                           fsr2l	equ	0xFD9
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function ___wmul *****************
  4459 ;; Defined at:
  4460 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;  multiplier      2   19[COMRAM] unsigned int 
  4463 ;;  multiplicand    2   21[COMRAM] unsigned int 
  4464 ;; Auto vars:     Size  Location     Type
  4465 ;;  product         2   23[COMRAM] unsigned int 
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  2   19[COMRAM] unsigned int 
  4468 ;; Registers used:
  4469 ;;		wreg, status,2, status,0, prodl, prodh
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4475 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4478 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;Total ram usage:        6 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    1
  4482 ;; This function calls:
  4483 ;;		Nothing
  4484 ;; This function is called by:
  4485 ;;		_printf
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text5
  4490  0012C8                     __ptext5:
  4491                           	opt stack 0
  4492  0012C8                     ___wmul:
  4493                           	opt stack 28
  4494                           
  4495                           ;incstack = 0
  4496  0012C8  5014               	movf	___wmul@multiplier,w,c
  4497  0012CA  0216               	mulwf	___wmul@multiplicand,c
  4498  0012CC  CFF3 F018          	movff	prodl,___wmul@product
  4499  0012D0  CFF4 F019          	movff	prodh,___wmul@product+1
  4500  0012D4  5014               	movf	___wmul@multiplier,w,c
  4501  0012D6  0217               	mulwf	___wmul@multiplicand+1,c
  4502  0012D8  50F3               	movf	prodl,w,c
  4503  0012DA  2619               	addwf	___wmul@product+1,f,c
  4504  0012DC  5015               	movf	___wmul@multiplier+1,w,c
  4505  0012DE  0216               	mulwf	___wmul@multiplicand,c
  4506  0012E0  50F3               	movf	prodl,w,c
  4507  0012E2  2619               	addwf	___wmul@product+1,f,c
  4508  0012E4  C018  F014         	movff	___wmul@product,?___wmul
  4509  0012E8  C019  F015         	movff	___wmul@product+1,?___wmul+1
  4510  0012EC  0012               	return	
  4511  0012EE                     __end_of___wmul:
  4512                           	opt stack 0
  4513                           tblptru	equ	0xFF8
  4514                           tblptrh	equ	0xFF7
  4515                           tblptrl	equ	0xFF6
  4516                           tablat	equ	0xFF5
  4517                           prodh	equ	0xFF4
  4518                           prodl	equ	0xFF3
  4519                           intcon	equ	0xFF2
  4520                           intcon3	equ	0xFF0
  4521                           postinc0	equ	0xFEE
  4522                           wreg	equ	0xFE8
  4523                           postdec1	equ	0xFE5
  4524                           plusw1	equ	0xFE3
  4525                           fsr1l	equ	0xFE1
  4526                           indf2	equ	0xFDF
  4527                           postinc2	equ	0xFDE
  4528                           postdec2	equ	0xFDD
  4529                           plusw2	equ	0xFDB
  4530                           fsr2h	equ	0xFDA
  4531                           fsr2l	equ	0xFD9
  4532                           status	equ	0xFD8
  4533                           
  4534 ;; *************** function ___lwmod *****************
  4535 ;; Defined at:
  4536 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;  dividend        2   26[COMRAM] unsigned int 
  4539 ;;  divisor         2   28[COMRAM] unsigned int 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  counter         1   30[COMRAM] unsigned char 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  2   26[COMRAM] unsigned int 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:        5 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    1
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		_printf
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text6
  4566  00124C                     __ptext6:
  4567                           	opt stack 0
  4568  00124C                     ___lwmod:
  4569                           	opt stack 28
  4570                           
  4571                           ;incstack = 0
  4572  00124C  501D               	movf	___lwmod@divisor,w,c
  4573  00124E  101E               	iorwf	___lwmod@divisor+1,w,c
  4574  001250  B4D8               	btfsc	status,2,c
  4575  001252  D018               	goto	l907
  4576  001254  0E01               	movlw	1
  4577  001256  6E1F               	movwf	___lwmod@counter,c
  4578  001258  D004               	goto	l902
  4579  00125A  90D8               	bcf	status,0,c
  4580  00125C  361D               	rlcf	___lwmod@divisor,f,c
  4581  00125E  361E               	rlcf	___lwmod@divisor+1,f,c
  4582  001260  2A1F               	incf	___lwmod@counter,f,c
  4583  001262                     l902:
  4584  001262  AE1E               	btfss	___lwmod@divisor+1,7,c
  4585  001264  D7FA               	goto	l903
  4586  001266                     u1200:
  4587  001266  501D               	movf	___lwmod@divisor,w,c
  4588  001268  5C1B               	subwf	___lwmod@dividend,w,c
  4589  00126A  501E               	movf	___lwmod@divisor+1,w,c
  4590  00126C  581C               	subwfb	___lwmod@dividend+1,w,c
  4591  00126E  A0D8               	btfss	status,0,c
  4592  001270  D004               	goto	l906
  4593  001272  501D               	movf	___lwmod@divisor,w,c
  4594  001274  5E1B               	subwf	___lwmod@dividend,f,c
  4595  001276  501E               	movf	___lwmod@divisor+1,w,c
  4596  001278  5A1C               	subwfb	___lwmod@dividend+1,f,c
  4597  00127A                     l906:
  4598  00127A  90D8               	bcf	status,0,c
  4599  00127C  321E               	rrcf	___lwmod@divisor+1,f,c
  4600  00127E  321D               	rrcf	___lwmod@divisor,f,c
  4601  001280  2E1F               	decfsz	___lwmod@counter,f,c
  4602  001282  D7F1               	goto	u1200
  4603  001284                     l907:
  4604  001284  C01B  F01B         	movff	___lwmod@dividend,?___lwmod
  4605  001288  C01C  F01C         	movff	___lwmod@dividend+1,?___lwmod+1
  4606  00128C  0012               	return		;funcret
  4607  00128E                     __end_of___lwmod:
  4608                           	opt stack 0
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           intcon	equ	0xFF2
  4616                           intcon3	equ	0xFF0
  4617                           postinc0	equ	0xFEE
  4618                           wreg	equ	0xFE8
  4619                           postdec1	equ	0xFE5
  4620                           plusw1	equ	0xFE3
  4621                           fsr1l	equ	0xFE1
  4622                           indf2	equ	0xFDF
  4623                           postinc2	equ	0xFDE
  4624                           postdec2	equ	0xFDD
  4625                           plusw2	equ	0xFDB
  4626                           fsr2h	equ	0xFDA
  4627                           fsr2l	equ	0xFD9
  4628                           status	equ	0xFD8
  4629                           
  4630 ;; *************** function ___lwdiv *****************
  4631 ;; Defined at:
  4632 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  dividend        2   19[COMRAM] unsigned int 
  4635 ;;  divisor         2   21[COMRAM] unsigned int 
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;  quotient        2   23[COMRAM] unsigned int 
  4638 ;;  counter         1   25[COMRAM] unsigned char 
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  2   19[COMRAM] unsigned int 
  4641 ;; Registers used:
  4642 ;;		wreg, status,2, status,0
  4643 ;; Tracked objects:
  4644 ;;		On entry : 0/0
  4645 ;;		On exit  : 0/0
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4648 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;Total ram usage:        7 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; Hardware stack levels required when called:    1
  4655 ;; This function calls:
  4656 ;;		Nothing
  4657 ;; This function is called by:
  4658 ;;		_printf
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text7
  4663  0011AE                     __ptext7:
  4664                           	opt stack 0
  4665  0011AE                     ___lwdiv:
  4666                           	opt stack 28
  4667                           
  4668                           ;incstack = 0
  4669  0011AE  0E00               	movlw	0
  4670  0011B0  6E19               	movwf	___lwdiv@quotient+1,c
  4671  0011B2  0E00               	movlw	0
  4672  0011B4  6E18               	movwf	___lwdiv@quotient,c
  4673  0011B6  5016               	movf	___lwdiv@divisor,w,c
  4674  0011B8  1017               	iorwf	___lwdiv@divisor+1,w,c
  4675  0011BA  B4D8               	btfsc	status,2,c
  4676  0011BC  D01C               	goto	l897
  4677  0011BE  0E01               	movlw	1
  4678  0011C0  6E1A               	movwf	___lwdiv@counter,c
  4679  0011C2  D004               	goto	l892
  4680  0011C4  90D8               	bcf	status,0,c
  4681  0011C6  3616               	rlcf	___lwdiv@divisor,f,c
  4682  0011C8  3617               	rlcf	___lwdiv@divisor+1,f,c
  4683  0011CA  2A1A               	incf	___lwdiv@counter,f,c
  4684  0011CC                     l892:
  4685  0011CC  AE17               	btfss	___lwdiv@divisor+1,7,c
  4686  0011CE  D7FA               	goto	l893
  4687  0011D0                     u1170:
  4688  0011D0  90D8               	bcf	status,0,c
  4689  0011D2  3618               	rlcf	___lwdiv@quotient,f,c
  4690  0011D4  3619               	rlcf	___lwdiv@quotient+1,f,c
  4691  0011D6  5016               	movf	___lwdiv@divisor,w,c
  4692  0011D8  5C14               	subwf	___lwdiv@dividend,w,c
  4693  0011DA  5017               	movf	___lwdiv@divisor+1,w,c
  4694  0011DC  5815               	subwfb	___lwdiv@dividend+1,w,c
  4695  0011DE  A0D8               	btfss	status,0,c
  4696  0011E0  D005               	goto	l896
  4697  0011E2  5016               	movf	___lwdiv@divisor,w,c
  4698  0011E4  5E14               	subwf	___lwdiv@dividend,f,c
  4699  0011E6  5017               	movf	___lwdiv@divisor+1,w,c
  4700  0011E8  5A15               	subwfb	___lwdiv@dividend+1,f,c
  4701  0011EA  8018               	bsf	___lwdiv@quotient,0,c
  4702  0011EC                     l896:
  4703  0011EC  90D8               	bcf	status,0,c
  4704  0011EE  3217               	rrcf	___lwdiv@divisor+1,f,c
  4705  0011F0  3216               	rrcf	___lwdiv@divisor,f,c
  4706  0011F2  2E1A               	decfsz	___lwdiv@counter,f,c
  4707  0011F4  D7ED               	goto	u1170
  4708  0011F6                     l897:
  4709  0011F6  C018  F014         	movff	___lwdiv@quotient,?___lwdiv
  4710  0011FA  C019  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4711  0011FE  0012               	return		;funcret
  4712  001200                     __end_of___lwdiv:
  4713                           	opt stack 0
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           intcon	equ	0xFF2
  4721                           intcon3	equ	0xFF0
  4722                           postinc0	equ	0xFEE
  4723                           wreg	equ	0xFE8
  4724                           postdec1	equ	0xFE5
  4725                           plusw1	equ	0xFE3
  4726                           fsr1l	equ	0xFE1
  4727                           indf2	equ	0xFDF
  4728                           postinc2	equ	0xFDE
  4729                           postdec2	equ	0xFDD
  4730                           plusw2	equ	0xFDB
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8
  4734                           
  4735 ;; *************** function _lcd_set_cursor *****************
  4736 ;; Defined at:
  4737 ;;		line 80 in file "lcd.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  x               1    wreg     unsigned char 
  4740 ;;  y               1   25[COMRAM] unsigned char 
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;  x               1   27[COMRAM] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4752 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;Total ram usage:        3 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    4
  4759 ;; This function calls:
  4760 ;;		_lcdInst
  4761 ;;		_lcd_shift_cursor
  4762 ;; This function is called by:
  4763 ;;		_operation
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text8
  4768  0010E2                     __ptext8:
  4769                           	opt stack 0
  4770  0010E2                     _lcd_set_cursor:
  4771                           	opt stack 25
  4772                           
  4773                           ;incstack = 0
  4774                           ;lcd_set_cursor@x stored from wreg
  4775  0010E2  6E1C               	movwf	lcd_set_cursor@x,c
  4776                           
  4777                           ;lcd.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4778  0010E4  0E80               	movlw	128
  4779  0010E6  ECB0  F009         	call	_lcdInst
  4780  0010EA  0E41               	movlw	65
  4781  0010EC  6E1B               	movwf	??_lcd_set_cursor& (0+255),c
  4782  0010EE  0EEE               	movlw	238
  4783  0010F0                     u2437:
  4784  0010F0  2EE8               	decfsz	wreg,f,c
  4785  0010F2  D7FE               	bra	u2437
  4786  0010F4  2E1B               	decfsz	??_lcd_set_cursor& (0+255),f,c
  4787  0010F6  D7FC               	bra	u2437
  4788  0010F8  D000               	nop2	
  4789                           
  4790                           ;lcd.c: 92: switch (y) {
  4791  0010FA  D018               	goto	l41
  4792  0010FC                     
  4793                           ;lcd.c: 94: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4794  0010FC  0E80               	movlw	128
  4795  0010FE  ECB0  F009         	call	_lcdInst
  4796  001102  0E41               	movlw	65
  4797  001104  6E1B               	movwf	??_lcd_set_cursor& (0+255),c
  4798  001106  0EEE               	movlw	238
  4799  001108                     u2447:
  4800  001108  2EE8               	decfsz	wreg,f,c
  4801  00110A  D7FE               	bra	u2447
  4802  00110C  2E1B               	decfsz	??_lcd_set_cursor& (0+255),f,c
  4803  00110E  D7FC               	bra	u2447
  4804  001110  D000               	nop2	
  4805                           
  4806                           ;lcd.c: 95: break;
  4807  001112  D019               	goto	l43
  4808  001114                     
  4809                           ;lcd.c: 97: lcdInst(0xC0);;
  4810  001114  0EC0               	movlw	192
  4811  001116  ECB0  F009         	call	_lcdInst
  4812                           
  4813                           ;lcd.c: 98: break;
  4814  00111A  D015               	goto	l43
  4815  00111C                     
  4816                           ;lcd.c: 100: lcdInst(0x94);;
  4817  00111C  0E94               	movlw	148
  4818  00111E  ECB0  F009         	call	_lcdInst
  4819                           
  4820                           ;lcd.c: 101: break;
  4821  001122  D011               	goto	l43
  4822  001124                     
  4823                           ;lcd.c: 103: lcdInst(0xD4);;
  4824  001124  0ED4               	movlw	212
  4825  001126  ECB0  F009         	call	_lcdInst
  4826                           
  4827                           ;lcd.c: 105: }
  4828                           
  4829                           ;lcd.c: 104: break;
  4830  00112A  D00D               	goto	l43
  4831  00112C                     l41:
  4832  00112C  501A               	movf	lcd_set_cursor@y,w,c
  4833                           
  4834                           ; Switch size 1, requested type "space"
  4835                           ; Number of cases is 4, Range of values is 0 to 3
  4836                           ; switch strategies available:
  4837                           ; Name         Instructions Cycles
  4838                           ; simple_byte           13     7 (average)
  4839                           ;	Chosen strategy is simple_byte
  4840  00112E  0A00               	xorlw	0	; case 0
  4841  001130  B4D8               	btfsc	status,2,c
  4842  001132  D7E4               	goto	l42
  4843  001134  0A01               	xorlw	1	; case 1
  4844  001136  B4D8               	btfsc	status,2,c
  4845  001138  D7ED               	goto	l44
  4846  00113A  0A03               	xorlw	3	; case 2
  4847  00113C  B4D8               	btfsc	status,2,c
  4848  00113E  D7EE               	goto	l45
  4849  001140  0A01               	xorlw	1	; case 3
  4850  001142  B4D8               	btfsc	status,2,c
  4851  001144  D7EF               	goto	l46
  4852  001146                     l43:
  4853                           
  4854                           ;lcd.c: 107: lcd_shift_cursor(x, 1);
  4855  001146  0E01               	movlw	1
  4856  001148  6E17               	movwf	lcd_shift_cursor@direction,c
  4857  00114A  501C               	movf	lcd_set_cursor@x,w,c
  4858  00114C  EC98  F009         	call	_lcd_shift_cursor
  4859  001150  0012               	return		;funcret
  4860  001152                     __end_of_lcd_set_cursor:
  4861                           	opt stack 0
  4862                           tblptru	equ	0xFF8
  4863                           tblptrh	equ	0xFF7
  4864                           tblptrl	equ	0xFF6
  4865                           tablat	equ	0xFF5
  4866                           prodh	equ	0xFF4
  4867                           prodl	equ	0xFF3
  4868                           intcon	equ	0xFF2
  4869                           intcon3	equ	0xFF0
  4870                           postinc0	equ	0xFEE
  4871                           wreg	equ	0xFE8
  4872                           postdec1	equ	0xFE5
  4873                           plusw1	equ	0xFE3
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           plusw2	equ	0xFDB
  4879                           fsr2h	equ	0xFDA
  4880                           fsr2l	equ	0xFD9
  4881                           status	equ	0xFD8
  4882                           
  4883 ;; *************** function _lcd_shift_cursor *****************
  4884 ;; Defined at:
  4885 ;;		line 110 in file "lcd.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;  numChars        1    wreg     unsigned char 
  4888 ;;  direction       1   22[COMRAM] unsigned char 
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;  numChars        1   23[COMRAM] unsigned char 
  4891 ;;  n               1   24[COMRAM] unsigned char 
  4892 ;; Return value:  Size  Location     Type
  4893 ;;                  1    wreg      void 
  4894 ;; Registers used:
  4895 ;;		wreg, status,2, status,0, cstack
  4896 ;; Tracked objects:
  4897 ;;		On entry : 0/0
  4898 ;;		On exit  : 0/0
  4899 ;;		Unchanged: 0/0
  4900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4901 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4904 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4905 ;;Total ram usage:        3 bytes
  4906 ;; Hardware stack levels used:    1
  4907 ;; Hardware stack levels required when called:    3
  4908 ;; This function calls:
  4909 ;;		_lcdInst
  4910 ;; This function is called by:
  4911 ;;		_lcd_set_cursor
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text9
  4916  001330                     __ptext9:
  4917                           	opt stack 0
  4918  001330                     _lcd_shift_cursor:
  4919                           	opt stack 25
  4920                           
  4921                           ;incstack = 0
  4922                           ;lcd_shift_cursor@numChars stored from wreg
  4923  001330  6E18               	movwf	lcd_shift_cursor@numChars,c
  4924                           
  4925                           ;lcd.c: 122: for(unsigned char n = numChars; n > 0; n--){
  4926  001332  C018  F019         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  4927  001336                     l2050:
  4928  001336  5019               	movf	lcd_shift_cursor@n,w,c
  4929  001338  B4D8               	btfsc	status,2,c
  4930  00133A  0012               	return	
  4931                           
  4932                           ;lcd.c: 125: lcdInst((unsigned char)(0x10 | (direction << 2)));
  4933  00133C  4417               	rlncf	lcd_shift_cursor@direction,w,c
  4934  00133E  46E8               	rlncf	wreg,f,c
  4935  001340  0BFC               	andlw	252
  4936  001342  0910               	iorlw	16
  4937  001344  ECB0  F009         	call	_lcdInst
  4938  001348  0619               	decf	lcd_shift_cursor@n,f,c
  4939  00134A  D7F5               	goto	l2050
  4940  00134C                     __end_of_lcd_shift_cursor:
  4941                           	opt stack 0
  4942                           tblptru	equ	0xFF8
  4943                           tblptrh	equ	0xFF7
  4944                           tblptrl	equ	0xFF6
  4945                           tablat	equ	0xFF5
  4946                           prodh	equ	0xFF4
  4947                           prodl	equ	0xFF3
  4948                           intcon	equ	0xFF2
  4949                           intcon3	equ	0xFF0
  4950                           postinc0	equ	0xFEE
  4951                           wreg	equ	0xFE8
  4952                           postdec1	equ	0xFE5
  4953                           plusw1	equ	0xFE3
  4954                           fsr1l	equ	0xFE1
  4955                           indf2	equ	0xFDF
  4956                           postinc2	equ	0xFDE
  4957                           postdec2	equ	0xFDD
  4958                           plusw2	equ	0xFDB
  4959                           fsr2h	equ	0xFDA
  4960                           fsr2l	equ	0xFD9
  4961                           status	equ	0xFD8
  4962                           
  4963 ;; *************** function _logging *****************
  4964 ;; Defined at:
  4965 ;;		line 642 in file "main.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;		None
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;		None
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  1    wreg      void 
  4972 ;; Registers used:
  4973 ;;		None
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : 0/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;Total ram usage:        0 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:    1
  4986 ;; This function calls:
  4987 ;;		Nothing
  4988 ;; This function is called by:
  4989 ;;		_main
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text10
  4994  0013A6                     __ptext10:
  4995                           	opt stack 0
  4996  0013A6                     _logging:
  4997                           	opt stack 29
  4998                           
  4999                           ;main.c: 643: return;
  5000                           
  5001                           ;incstack = 0
  5002  0013A6  0012               	return		;funcret
  5003  0013A8                     __end_of_logging:
  5004                           	opt stack 0
  5005                           tblptru	equ	0xFF8
  5006                           tblptrh	equ	0xFF7
  5007                           tblptrl	equ	0xFF6
  5008                           tablat	equ	0xFF5
  5009                           prodh	equ	0xFF4
  5010                           prodl	equ	0xFF3
  5011                           intcon	equ	0xFF2
  5012                           intcon3	equ	0xFF0
  5013                           postinc0	equ	0xFEE
  5014                           wreg	equ	0xFE8
  5015                           postdec1	equ	0xFE5
  5016                           plusw1	equ	0xFE3
  5017                           fsr1l	equ	0xFE1
  5018                           indf2	equ	0xFDF
  5019                           postinc2	equ	0xFDE
  5020                           postdec2	equ	0xFDD
  5021                           plusw2	equ	0xFDB
  5022                           fsr2h	equ	0xFDA
  5023                           fsr2l	equ	0xFD9
  5024                           status	equ	0xFD8
  5025                           
  5026 ;; *************** function _initLCD *****************
  5027 ;; Defined at:
  5028 ;;		line 60 in file "lcd.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;		None
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      void 
  5035 ;; Registers used:
  5036 ;;		wreg, status,2, status,0, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;Total ram usage:        1 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    3
  5049 ;; This function calls:
  5050 ;;		_lcdInst
  5051 ;; This function is called by:
  5052 ;;		_main
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text11
  5057  001200                     __ptext11:
  5058                           	opt stack 0
  5059  001200                     _initLCD:
  5060                           	opt stack 27
  5061                           
  5062                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  5063                           
  5064                           ;incstack = 0
  5065  001200  0EC3               	movlw	195
  5066  001202  6E17               	movwf	??_initLCD& (0+255),c
  5067  001204  0ECD               	movlw	205
  5068  001206                     u2457:
  5069  001206  2EE8               	decfsz	wreg,f,c
  5070  001208  D7FE               	bra	u2457
  5071  00120A  2E17               	decfsz	??_initLCD& (0+255),f,c
  5072  00120C  D7FC               	bra	u2457
  5073  00120E  F000               	nop	
  5074                           
  5075                           ;lcd.c: 69: lcdInst(0b00110011);
  5076  001210  0E33               	movlw	51
  5077  001212  ECB0  F009         	call	_lcdInst
  5078                           
  5079                           ;lcd.c: 70: lcdInst(0b00110010);
  5080  001216  0E32               	movlw	50
  5081  001218  ECB0  F009         	call	_lcdInst
  5082                           
  5083                           ;lcd.c: 71: lcdInst(0b00101000);
  5084  00121C  0E28               	movlw	40
  5085  00121E  ECB0  F009         	call	_lcdInst
  5086                           
  5087                           ;lcd.c: 72: lcdInst(0b00001111);
  5088  001222  0E0F               	movlw	15
  5089  001224  ECB0  F009         	call	_lcdInst
  5090                           
  5091                           ;lcd.c: 73: lcdInst(0b00000110);
  5092  001228  0E06               	movlw	6
  5093  00122A  ECB0  F009         	call	_lcdInst
  5094                           
  5095                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5096  00122E  0E01               	movlw	1
  5097  001230  ECB0  F009         	call	_lcdInst
  5098  001234  0EC3               	movlw	195
  5099  001236  6E17               	movwf	??_initLCD& (0+255),c
  5100  001238  0ECD               	movlw	205
  5101  00123A                     u2467:
  5102  00123A  2EE8               	decfsz	wreg,f,c
  5103  00123C  D7FE               	bra	u2467
  5104  00123E  2E17               	decfsz	??_initLCD& (0+255),f,c
  5105  001240  D7FC               	bra	u2467
  5106  001242  F000               	nop	
  5107                           
  5108                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  5109  001244  0E0F               	movlw	15
  5110  001246  ECB0  F009         	call	_lcdInst
  5111  00124A  0012               	return		;funcret
  5112  00124C                     __end_of_initLCD:
  5113                           	opt stack 0
  5114                           tblptru	equ	0xFF8
  5115                           tblptrh	equ	0xFF7
  5116                           tblptrl	equ	0xFF6
  5117                           tablat	equ	0xFF5
  5118                           prodh	equ	0xFF4
  5119                           prodl	equ	0xFF3
  5120                           intcon	equ	0xFF2
  5121                           intcon3	equ	0xFF0
  5122                           postinc0	equ	0xFEE
  5123                           wreg	equ	0xFE8
  5124                           postdec1	equ	0xFE5
  5125                           plusw1	equ	0xFE3
  5126                           fsr1l	equ	0xFE1
  5127                           indf2	equ	0xFDF
  5128                           postinc2	equ	0xFDE
  5129                           postdec2	equ	0xFDD
  5130                           plusw2	equ	0xFDB
  5131                           fsr2h	equ	0xFDA
  5132                           fsr2l	equ	0xFD9
  5133                           status	equ	0xFD8
  5134                           
  5135 ;; *************** function _lcdInst *****************
  5136 ;; Defined at:
  5137 ;;		line 11 in file "lcd.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  data            1    wreg     unsigned char 
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;  data            1   21[COMRAM] unsigned char 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;Total ram usage:        1 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    2
  5158 ;; This function calls:
  5159 ;;		_lcdNibble
  5160 ;; This function is called by:
  5161 ;;		_initLCD
  5162 ;;		_lcd_set_cursor
  5163 ;;		_lcd_shift_cursor
  5164 ;;		_main
  5165 ;;		_operation
  5166 ;;		_lcd_shift_display
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           	psect	text12
  5171  001360                     __ptext12:
  5172                           	opt stack 0
  5173  001360                     _lcdInst:
  5174                           	opt stack 25
  5175                           
  5176                           ;incstack = 0
  5177                           ;lcdInst@data stored from wreg
  5178  001360  6E16               	movwf	lcdInst@data,c
  5179                           
  5180                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  5181  001362  948C               	bcf	3980,2,c	;volatile
  5182                           
  5183                           ;lcd.c: 20: lcdNibble(data);
  5184  001364  5016               	movf	lcdInst@data,w,c
  5185  001366  EC32  F008         	call	_lcdNibble
  5186                           
  5187                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5188  00136A  0EC8               	movlw	200
  5189  00136C                     u2477:
  5190  00136C  D000               	nop2	
  5191  00136E  2EE8               	decfsz	wreg,f,c
  5192  001370  D7FD               	bra	u2477
  5193  001372  0012               	return		;funcret
  5194  001374                     __end_of_lcdInst:
  5195                           	opt stack 0
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           intcon3	equ	0xFF0
  5204                           postinc0	equ	0xFEE
  5205                           wreg	equ	0xFE8
  5206                           postdec1	equ	0xFE5
  5207                           plusw1	equ	0xFE3
  5208                           fsr1l	equ	0xFE1
  5209                           indf2	equ	0xFDF
  5210                           postinc2	equ	0xFDE
  5211                           postdec2	equ	0xFDD
  5212                           plusw2	equ	0xFDB
  5213                           fsr2h	equ	0xFDA
  5214                           fsr2l	equ	0xFD9
  5215                           status	equ	0xFD8
  5216                           
  5217 ;; *************** function _lcdNibble *****************
  5218 ;; Defined at:
  5219 ;;		line 37 in file "lcd.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;  data            1    wreg     unsigned char 
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;  data            1   20[COMRAM] unsigned char 
  5224 ;;  temp            1   19[COMRAM] unsigned char 
  5225 ;; Return value:  Size  Location     Type
  5226 ;;                  1    wreg      void 
  5227 ;; Registers used:
  5228 ;;		wreg, status,2, status,0
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5237 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;Total ram usage:        2 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:    1
  5241 ;; This function calls:
  5242 ;;		Nothing
  5243 ;; This function is called by:
  5244 ;;		_lcdInst
  5245 ;;		_putch
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text13
  5250  001064                     __ptext13:
  5251                           	opt stack 0
  5252  001064                     _lcdNibble:
  5253                           	opt stack 27
  5254                           
  5255                           ;incstack = 0
  5256                           ;lcdNibble@data stored from wreg
  5257  001064  6E15               	movwf	lcdNibble@data,c
  5258                           
  5259                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  5260  001066  5015               	movf	lcdNibble@data,w,c
  5261  001068  0BF0               	andlw	240
  5262  00106A  6E14               	movwf	lcdNibble@temp,c
  5263                           
  5264                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  5265  00106C  508C               	movf	3980,w,c	;volatile
  5266  00106E  0B0F               	andlw	15
  5267  001070  6E8C               	movwf	3980,c	;volatile
  5268                           
  5269                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  5270  001072  5014               	movf	lcdNibble@temp,w,c
  5271  001074  108C               	iorwf	3980,w,c	;volatile
  5272  001076  6E8C               	movwf	3980,c	;volatile
  5273                           
  5274                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5275  001078  0E00               	movlw	0
  5276  00107A  BEF2               	btfsc	intcon,7,c	;volatile
  5277  00107C  0E01               	movlw	1
  5278  00107E  6E64               	movwf	_LCDinterruptState,c
  5279  001080  9EF2               	bcf	intcon,7,c	;volatile
  5280  001082  868C               	bsf	3980,3,c	;volatile
  5281  001084  0E53               	movlw	83
  5282  001086                     u2487:
  5283  001086  2EE8               	decfsz	wreg,f,c
  5284  001088  D7FE               	bra	u2487
  5285  00108A  F000               	nop	
  5286  00108C  968C               	bcf	3980,3,c	;volatile
  5287  00108E  0EC8               	movlw	200
  5288  001090                     u2497:
  5289  001090  D000               	nop2	
  5290  001092  2EE8               	decfsz	wreg,f,c
  5291  001094  D7FD               	bra	u2497
  5292  001096  B064               	btfsc	_LCDinterruptState,0,c
  5293  001098  D002               	bra	u15
  5294  00109A  9EF2               	bcf	intcon,7,c	;volatile
  5295  00109C  D001               	bra	u16
  5296  00109E                     u15:
  5297  00109E  8EF2               	bsf	intcon,7,c	;volatile
  5298  0010A0                     u16:
  5299                           
  5300                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  5301  0010A0  3815               	swapf	lcdNibble@data,w,c
  5302  0010A2  0BF0               	andlw	240
  5303  0010A4  6E15               	movwf	lcdNibble@data,c
  5304                           
  5305                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  5306  0010A6  5015               	movf	lcdNibble@data,w,c
  5307  0010A8  0BF0               	andlw	240
  5308  0010AA  6E14               	movwf	lcdNibble@temp,c
  5309                           
  5310                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  5311  0010AC  508C               	movf	3980,w,c	;volatile
  5312  0010AE  0B0F               	andlw	15
  5313  0010B0  6E8C               	movwf	3980,c	;volatile
  5314                           
  5315                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  5316  0010B2  5014               	movf	lcdNibble@temp,w,c
  5317  0010B4  108C               	iorwf	3980,w,c	;volatile
  5318  0010B6  6E8C               	movwf	3980,c	;volatile
  5319                           
  5320                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5321  0010B8  0E00               	movlw	0
  5322  0010BA  BEF2               	btfsc	intcon,7,c	;volatile
  5323  0010BC  0E01               	movlw	1
  5324  0010BE  6E64               	movwf	_LCDinterruptState,c
  5325  0010C0  9EF2               	bcf	intcon,7,c	;volatile
  5326  0010C2  868C               	bsf	3980,3,c	;volatile
  5327  0010C4  0E53               	movlw	83
  5328  0010C6                     u2507:
  5329  0010C6  2EE8               	decfsz	wreg,f,c
  5330  0010C8  D7FE               	bra	u2507
  5331  0010CA  F000               	nop	
  5332  0010CC  968C               	bcf	3980,3,c	;volatile
  5333  0010CE  0EC8               	movlw	200
  5334  0010D0                     u2517:
  5335  0010D0  D000               	nop2	
  5336  0010D2  2EE8               	decfsz	wreg,f,c
  5337  0010D4  D7FD               	bra	u2517
  5338  0010D6  B064               	btfsc	_LCDinterruptState,0,c
  5339  0010D8  D002               	bra	u25
  5340  0010DA  9EF2               	bcf	intcon,7,c	;volatile
  5341  0010DC  D001               	bra	u26
  5342  0010DE                     u25:
  5343  0010DE  8EF2               	bsf	intcon,7,c	;volatile
  5344  0010E0                     u26:
  5345  0010E0  0012               	return		;funcret
  5346  0010E2                     __end_of_lcdNibble:
  5347                           	opt stack 0
  5348                           tblptru	equ	0xFF8
  5349                           tblptrh	equ	0xFF7
  5350                           tblptrl	equ	0xFF6
  5351                           tablat	equ	0xFF5
  5352                           prodh	equ	0xFF4
  5353                           prodl	equ	0xFF3
  5354                           intcon	equ	0xFF2
  5355                           intcon3	equ	0xFF0
  5356                           postinc0	equ	0xFEE
  5357                           wreg	equ	0xFE8
  5358                           postdec1	equ	0xFE5
  5359                           plusw1	equ	0xFE3
  5360                           fsr1l	equ	0xFE1
  5361                           indf2	equ	0xFDF
  5362                           postinc2	equ	0xFDE
  5363                           postdec2	equ	0xFDD
  5364                           plusw2	equ	0xFDB
  5365                           fsr2h	equ	0xFDA
  5366                           fsr2l	equ	0xFD9
  5367                           status	equ	0xFD8
  5368                           
  5369 ;; *************** function _I2C_Master_Write *****************
  5370 ;; Defined at:
  5371 ;;		line 108 in file "I2C.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;  byteToWrite     2   20[COMRAM] unsigned int 
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;		None
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  1    wreg      void 
  5378 ;; Registers used:
  5379 ;;		wreg, status,2, status,0, cstack
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 0/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5385 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;Total ram usage:        2 bytes
  5390 ;; Hardware stack levels used:    1
  5391 ;; Hardware stack levels required when called:    2
  5392 ;; This function calls:
  5393 ;;		_I2C_Master_Wait
  5394 ;; This function is called by:
  5395 ;;		_main
  5396 ;;		_RTC_setTime
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           	psect	text14
  5401  001386                     __ptext14:
  5402                           	opt stack 0
  5403  001386                     _I2C_Master_Write:
  5404                           	opt stack 28
  5405                           
  5406                           ;I2C.c: 116: I2C_Master_Wait();
  5407                           
  5408                           ;incstack = 0
  5409  001386  ECBA  F009         	call	_I2C_Master_Wait	;wreg free
  5410                           
  5411                           ;I2C.c: 117: SSPBUF = byteToWrite;
  5412  00138A  C015  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  5413  00138E  0012               	return		;funcret
  5414  001390                     __end_of_I2C_Master_Write:
  5415                           	opt stack 0
  5416                           tblptru	equ	0xFF8
  5417                           tblptrh	equ	0xFF7
  5418                           tblptrl	equ	0xFF6
  5419                           tablat	equ	0xFF5
  5420                           prodh	equ	0xFF4
  5421                           prodl	equ	0xFF3
  5422                           intcon	equ	0xFF2
  5423                           intcon3	equ	0xFF0
  5424                           postinc0	equ	0xFEE
  5425                           wreg	equ	0xFE8
  5426                           postdec1	equ	0xFE5
  5427                           plusw1	equ	0xFE3
  5428                           fsr1l	equ	0xFE1
  5429                           indf2	equ	0xFDF
  5430                           postinc2	equ	0xFDE
  5431                           postdec2	equ	0xFDD
  5432                           plusw2	equ	0xFDB
  5433                           fsr2h	equ	0xFDA
  5434                           fsr2l	equ	0xFD9
  5435                           status	equ	0xFD8
  5436                           
  5437 ;; *************** function _I2C_Master_Stop *****************
  5438 ;; Defined at:
  5439 ;;		line 95 in file "I2C.c"
  5440 ;; Parameters:    Size  Location     Type
  5441 ;;		None
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;		None
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  1    wreg      void 
  5446 ;; Registers used:
  5447 ;;		wreg, status,2, status,0, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;Total ram usage:        0 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    2
  5460 ;; This function calls:
  5461 ;;		_I2C_Master_Wait
  5462 ;; This function is called by:
  5463 ;;		_main
  5464 ;;		_RTC_setTime
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           	psect	text15
  5469  001390                     __ptext15:
  5470                           	opt stack 0
  5471  001390                     _I2C_Master_Stop:
  5472                           	opt stack 28
  5473                           
  5474                           ;I2C.c: 104: I2C_Master_Wait();
  5475                           
  5476                           ;incstack = 0
  5477  001390  ECBA  F009         	call	_I2C_Master_Wait	;wreg free
  5478                           
  5479                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  5480  001394  84C5               	bsf	4037,2,c	;volatile
  5481  001396  0012               	return		;funcret
  5482  001398                     __end_of_I2C_Master_Stop:
  5483                           	opt stack 0
  5484                           tblptru	equ	0xFF8
  5485                           tblptrh	equ	0xFF7
  5486                           tblptrl	equ	0xFF6
  5487                           tablat	equ	0xFF5
  5488                           prodh	equ	0xFF4
  5489                           prodl	equ	0xFF3
  5490                           intcon	equ	0xFF2
  5491                           intcon3	equ	0xFF0
  5492                           postinc0	equ	0xFEE
  5493                           wreg	equ	0xFE8
  5494                           postdec1	equ	0xFE5
  5495                           plusw1	equ	0xFE3
  5496                           fsr1l	equ	0xFE1
  5497                           indf2	equ	0xFDF
  5498                           postinc2	equ	0xFDE
  5499                           postdec2	equ	0xFDD
  5500                           plusw2	equ	0xFDB
  5501                           fsr2h	equ	0xFDA
  5502                           fsr2l	equ	0xFD9
  5503                           status	equ	0xFD8
  5504                           
  5505 ;; *************** function _I2C_Master_Start *****************
  5506 ;; Defined at:
  5507 ;;		line 69 in file "I2C.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;		None
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;		None
  5512 ;; Return value:  Size  Location     Type
  5513 ;;                  1    wreg      void 
  5514 ;; Registers used:
  5515 ;;		wreg, status,2, status,0, cstack
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5525 ;;Total ram usage:        0 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:    2
  5528 ;; This function calls:
  5529 ;;		_I2C_Master_Wait
  5530 ;; This function is called by:
  5531 ;;		_main
  5532 ;;		_RTC_setTime
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536                           	psect	text16
  5537  001398                     __ptext16:
  5538                           	opt stack 0
  5539  001398                     _I2C_Master_Start:
  5540                           	opt stack 28
  5541                           
  5542                           ;I2C.c: 78: I2C_Master_Wait();
  5543                           
  5544                           ;incstack = 0
  5545  001398  ECBA  F009         	call	_I2C_Master_Wait	;wreg free
  5546                           
  5547                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  5548  00139C  80C5               	bsf	4037,0,c	;volatile
  5549  00139E  0012               	return		;funcret
  5550  0013A0                     __end_of_I2C_Master_Start:
  5551                           	opt stack 0
  5552                           tblptru	equ	0xFF8
  5553                           tblptrh	equ	0xFF7
  5554                           tblptrl	equ	0xFF6
  5555                           tablat	equ	0xFF5
  5556                           prodh	equ	0xFF4
  5557                           prodl	equ	0xFF3
  5558                           intcon	equ	0xFF2
  5559                           intcon3	equ	0xFF0
  5560                           postinc0	equ	0xFEE
  5561                           wreg	equ	0xFE8
  5562                           postdec1	equ	0xFE5
  5563                           plusw1	equ	0xFE3
  5564                           fsr1l	equ	0xFE1
  5565                           indf2	equ	0xFDF
  5566                           postinc2	equ	0xFDE
  5567                           postdec2	equ	0xFDD
  5568                           plusw2	equ	0xFDB
  5569                           fsr2h	equ	0xFDA
  5570                           fsr2l	equ	0xFD9
  5571                           status	equ	0xFD8
  5572                           
  5573 ;; *************** function _I2C_Master_Read *****************
  5574 ;; Defined at:
  5575 ;;		line 120 in file "I2C.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  ackBit          1    wreg     unsigned char 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;  ackBit          1   20[COMRAM] unsigned char 
  5580 ;;  receivedByte    1   21[COMRAM] unsigned char 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;                  1    wreg      unsigned char 
  5583 ;; Registers used:
  5584 ;;		wreg, status,2, status,0, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;Total ram usage:        2 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    2
  5597 ;; This function calls:
  5598 ;;		_I2C_Master_Wait
  5599 ;; This function is called by:
  5600 ;;		_main
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text17
  5605  0012EE                     __ptext17:
  5606                           	opt stack 0
  5607  0012EE                     _I2C_Master_Read:
  5608                           	opt stack 28
  5609                           
  5610                           ;incstack = 0
  5611                           ;I2C_Master_Read@ackBit stored from wreg
  5612  0012EE  6E15               	movwf	I2C_Master_Read@ackBit,c
  5613                           
  5614                           ;I2C.c: 130: unsigned char receivedByte;
  5615                           ;I2C.c: 132: I2C_Master_Wait();
  5616  0012F0  ECBA  F009         	call	_I2C_Master_Wait	;wreg free
  5617                           
  5618                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  5619  0012F4  86C5               	bsf	4037,3,c	;volatile
  5620                           
  5621                           ;I2C.c: 135: I2C_Master_Wait();
  5622  0012F6  ECBA  F009         	call	_I2C_Master_Wait	;wreg free
  5623                           
  5624                           ;I2C.c: 136: receivedByte = SSPBUF;
  5625  0012FA  CFC9 F016          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  5626                           
  5627                           ;I2C.c: 138: I2C_Master_Wait();
  5628  0012FE  ECBA  F009         	call	_I2C_Master_Wait	;wreg free
  5629                           
  5630                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  5631  001302  B015               	btfsc	I2C_Master_Read@ackBit,0,c
  5632  001304  D002               	bra	u425
  5633  001306  9AC5               	bcf	4037,5,c	;volatile
  5634  001308  D001               	bra	u426
  5635  00130A                     u425:
  5636  00130A  8AC5               	bsf	4037,5,c	;volatile
  5637  00130C                     u426:
  5638                           
  5639                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  5640  00130C  88C5               	bsf	4037,4,c	;volatile
  5641                           
  5642                           ;I2C.c: 142: return receivedByte;
  5643  00130E  5016               	movf	I2C_Master_Read@receivedByte,w,c
  5644  001310  0012               	return	
  5645  001312                     __end_of_I2C_Master_Read:
  5646                           	opt stack 0
  5647                           tblptru	equ	0xFF8
  5648                           tblptrh	equ	0xFF7
  5649                           tblptrl	equ	0xFF6
  5650                           tablat	equ	0xFF5
  5651                           prodh	equ	0xFF4
  5652                           prodl	equ	0xFF3
  5653                           intcon	equ	0xFF2
  5654                           intcon3	equ	0xFF0
  5655                           postinc0	equ	0xFEE
  5656                           wreg	equ	0xFE8
  5657                           postdec1	equ	0xFE5
  5658                           plusw1	equ	0xFE3
  5659                           fsr1l	equ	0xFE1
  5660                           indf2	equ	0xFDF
  5661                           postinc2	equ	0xFDE
  5662                           postdec2	equ	0xFDD
  5663                           plusw2	equ	0xFDB
  5664                           fsr2h	equ	0xFDA
  5665                           fsr2l	equ	0xFD9
  5666                           status	equ	0xFD8
  5667                           
  5668 ;; *************** function _I2C_Master_Wait *****************
  5669 ;; Defined at:
  5670 ;;		line 51 in file "I2C.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;		None
  5673 ;; Auto vars:     Size  Location     Type
  5674 ;;		None
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      void 
  5677 ;; Registers used:
  5678 ;;		wreg, status,2, status,0
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : 0/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;Total ram usage:        1 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    1
  5691 ;; This function calls:
  5692 ;;		Nothing
  5693 ;; This function is called by:
  5694 ;;		_I2C_Master_Start
  5695 ;;		_I2C_Master_Stop
  5696 ;;		_I2C_Master_Write
  5697 ;;		_I2C_Master_Read
  5698 ;;		_I2C_Master_RepeatedStart
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           	psect	text18
  5703  001374                     __ptext18:
  5704                           	opt stack 0
  5705  001374                     _I2C_Master_Wait:
  5706                           	opt stack 28
  5707                           
  5708                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5709                           
  5710                           ;incstack = 0
  5711  001374  B4C7               	btfsc	4039,2,c	;volatile
  5712  001376  D7FE               	goto	_I2C_Master_Wait
  5713  001378  CFC5 F014          	movff	4037,??_I2C_Master_Wait	;volatile
  5714  00137C  0E1F               	movlw	31
  5715  00137E  1614               	andwf	??_I2C_Master_Wait,f,c
  5716  001380  B4D8               	btfsc	status,2,c
  5717  001382  0012               	return	
  5718  001384  D7F7               	goto	_I2C_Master_Wait
  5719  001386                     __end_of_I2C_Master_Wait:
  5720                           	opt stack 0
  5721                           tblptru	equ	0xFF8
  5722                           tblptrh	equ	0xFF7
  5723                           tblptrl	equ	0xFF6
  5724                           tablat	equ	0xFF5
  5725                           prodh	equ	0xFF4
  5726                           prodl	equ	0xFF3
  5727                           intcon	equ	0xFF2
  5728                           intcon3	equ	0xFF0
  5729                           postinc0	equ	0xFEE
  5730                           wreg	equ	0xFE8
  5731                           postdec1	equ	0xFE5
  5732                           plusw1	equ	0xFE3
  5733                           fsr1l	equ	0xFE1
  5734                           indf2	equ	0xFDF
  5735                           postinc2	equ	0xFDE
  5736                           postdec2	equ	0xFDD
  5737                           plusw2	equ	0xFDB
  5738                           fsr2h	equ	0xFDA
  5739                           fsr2l	equ	0xFD9
  5740                           status	equ	0xFD8
  5741                           
  5742 ;; *************** function _I2C_Master_Init *****************
  5743 ;; Defined at:
  5744 ;;		line 14 in file "I2C.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;  clockFreq       4   32[COMRAM] const unsigned long 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;		None
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  1    wreg      void 
  5751 ;; Registers used:
  5752 ;;		wreg, status,2, status,0, cstack
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5758 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5760 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5761 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5762 ;;Total ram usage:        8 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    2
  5765 ;; This function calls:
  5766 ;;		___lldiv
  5767 ;; This function is called by:
  5768 ;;		_main
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           	psect	text19
  5773  001152                     __ptext19:
  5774                           	opt stack 0
  5775  001152                     _I2C_Master_Init:
  5776                           	opt stack 28
  5777                           
  5778                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  5779                           
  5780                           ;incstack = 0
  5781  001152  9AC6               	bcf	4038,5,c	;volatile
  5782                           
  5783                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  5784  001154  8694               	bsf	3988,3,c	;volatile
  5785                           
  5786                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  5787  001156  8894               	bsf	3988,4,c	;volatile
  5788                           
  5789                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  5790  001158  0E80               	movlw	128
  5791  00115A  6EC7               	movwf	4039,c	;volatile
  5792                           
  5793                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  5794  00115C  0E28               	movlw	40
  5795  00115E  6EC6               	movwf	4038,c	;volatile
  5796                           
  5797                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  5798  001160  0E00               	movlw	0
  5799  001162  6EC5               	movwf	4037,c	;volatile
  5800                           
  5801                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  5802  001164  0E00               	movlw	0
  5803  001166  6E14               	movwf	___lldiv@dividend,c
  5804  001168  0E5A               	movlw	90
  5805  00116A  6E15               	movwf	___lldiv@dividend+1,c
  5806  00116C  0E62               	movlw	98
  5807  00116E  6E16               	movwf	___lldiv@dividend+2,c
  5808  001170  0E02               	movlw	2
  5809  001172  6E17               	movwf	___lldiv@dividend+3,c
  5810  001174  C021  F025         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  5811  001178  C022  F026         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  5812  00117C  C023  F027         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  5813  001180  C024  F028         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  5814  001184  0E02               	movlw	2
  5815  001186                     u1485:
  5816  001186  90D8               	bcf	status,0,c
  5817  001188  3625               	rlcf	??_I2C_Master_Init,f,c
  5818  00118A  3626               	rlcf	??_I2C_Master_Init+1,f,c
  5819  00118C  3627               	rlcf	??_I2C_Master_Init+2,f,c
  5820  00118E  3628               	rlcf	??_I2C_Master_Init+3,f,c
  5821  001190  2EE8               	decfsz	wreg,f,c
  5822  001192  D7F9               	goto	u1485
  5823  001194  C025  F018         	movff	??_I2C_Master_Init,___lldiv@divisor
  5824  001198  C026  F019         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5825  00119C  C027  F01A         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5826  0011A0  C028  F01B         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5827  0011A4  ECF1  F007         	call	___lldiv	;wreg free
  5828  0011A8  0414               	decf	?___lldiv,w,c
  5829  0011AA  6EC8               	movwf	4040,c	;volatile
  5830  0011AC  0012               	return		;funcret
  5831  0011AE                     __end_of_I2C_Master_Init:
  5832                           	opt stack 0
  5833                           tblptru	equ	0xFF8
  5834                           tblptrh	equ	0xFF7
  5835                           tblptrl	equ	0xFF6
  5836                           tablat	equ	0xFF5
  5837                           prodh	equ	0xFF4
  5838                           prodl	equ	0xFF3
  5839                           intcon	equ	0xFF2
  5840                           intcon3	equ	0xFF0
  5841                           postinc0	equ	0xFEE
  5842                           wreg	equ	0xFE8
  5843                           postdec1	equ	0xFE5
  5844                           plusw1	equ	0xFE3
  5845                           fsr1l	equ	0xFE1
  5846                           indf2	equ	0xFDF
  5847                           postinc2	equ	0xFDE
  5848                           postdec2	equ	0xFDD
  5849                           plusw2	equ	0xFDB
  5850                           fsr2h	equ	0xFDA
  5851                           fsr2l	equ	0xFD9
  5852                           status	equ	0xFD8
  5853                           
  5854 ;; *************** function ___lldiv *****************
  5855 ;; Defined at:
  5856 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  dividend        4   19[COMRAM] unsigned long 
  5859 ;;  divisor         4   23[COMRAM] unsigned long 
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;  quotient        4   27[COMRAM] unsigned long 
  5862 ;;  counter         1   31[COMRAM] unsigned char 
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  4   19[COMRAM] unsigned long 
  5865 ;; Registers used:
  5866 ;;		wreg, status,2, status,0
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5872 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;Total ram usage:       13 bytes
  5877 ;; Hardware stack levels used:    1
  5878 ;; Hardware stack levels required when called:    1
  5879 ;; This function calls:
  5880 ;;		Nothing
  5881 ;; This function is called by:
  5882 ;;		_I2C_Master_Init
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           	psect	text20
  5887  000FE2                     __ptext20:
  5888                           	opt stack 0
  5889  000FE2                     ___lldiv:
  5890                           	opt stack 28
  5891                           
  5892                           ;incstack = 0
  5893  000FE2  0E00               	movlw	0
  5894  000FE4  6E1C               	movwf	___lldiv@quotient,c
  5895  000FE6  0E00               	movlw	0
  5896  000FE8  6E1D               	movwf	___lldiv@quotient+1,c
  5897  000FEA  0E00               	movlw	0
  5898  000FEC  6E1E               	movwf	___lldiv@quotient+2,c
  5899  000FEE  0E00               	movlw	0
  5900  000FF0  6E1F               	movwf	___lldiv@quotient+3,c
  5901  000FF2  5018               	movf	___lldiv@divisor,w,c
  5902  000FF4  1019               	iorwf	___lldiv@divisor+1,w,c
  5903  000FF6  101A               	iorwf	___lldiv@divisor+2,w,c
  5904  000FF8  101B               	iorwf	___lldiv@divisor+3,w,c
  5905  000FFA  B4D8               	btfsc	status,2,c
  5906  000FFC  D02A               	goto	l844
  5907  000FFE  0E01               	movlw	1
  5908  001000  6E20               	movwf	___lldiv@counter,c
  5909  001002  D006               	goto	l839
  5910  001004  90D8               	bcf	status,0,c
  5911  001006  3618               	rlcf	___lldiv@divisor,f,c
  5912  001008  3619               	rlcf	___lldiv@divisor+1,f,c
  5913  00100A  361A               	rlcf	___lldiv@divisor+2,f,c
  5914  00100C  361B               	rlcf	___lldiv@divisor+3,f,c
  5915  00100E  2A20               	incf	___lldiv@counter,f,c
  5916  001010                     l839:
  5917  001010  AE1B               	btfss	___lldiv@divisor+3,7,c
  5918  001012  D7F8               	goto	l840
  5919  001014                     u1460:
  5920  001014  90D8               	bcf	status,0,c
  5921  001016  361C               	rlcf	___lldiv@quotient,f,c
  5922  001018  361D               	rlcf	___lldiv@quotient+1,f,c
  5923  00101A  361E               	rlcf	___lldiv@quotient+2,f,c
  5924  00101C  361F               	rlcf	___lldiv@quotient+3,f,c
  5925  00101E  5018               	movf	___lldiv@divisor,w,c
  5926  001020  5C14               	subwf	___lldiv@dividend,w,c
  5927  001022  5019               	movf	___lldiv@divisor+1,w,c
  5928  001024  5815               	subwfb	___lldiv@dividend+1,w,c
  5929  001026  501A               	movf	___lldiv@divisor+2,w,c
  5930  001028  5816               	subwfb	___lldiv@dividend+2,w,c
  5931  00102A  501B               	movf	___lldiv@divisor+3,w,c
  5932  00102C  5817               	subwfb	___lldiv@dividend+3,w,c
  5933  00102E  A0D8               	btfss	status,0,c
  5934  001030  D009               	goto	l843
  5935  001032  5018               	movf	___lldiv@divisor,w,c
  5936  001034  5E14               	subwf	___lldiv@dividend,f,c
  5937  001036  5019               	movf	___lldiv@divisor+1,w,c
  5938  001038  5A15               	subwfb	___lldiv@dividend+1,f,c
  5939  00103A  501A               	movf	___lldiv@divisor+2,w,c
  5940  00103C  5A16               	subwfb	___lldiv@dividend+2,f,c
  5941  00103E  501B               	movf	___lldiv@divisor+3,w,c
  5942  001040  5A17               	subwfb	___lldiv@dividend+3,f,c
  5943  001042  801C               	bsf	___lldiv@quotient,0,c
  5944  001044                     l843:
  5945  001044  90D8               	bcf	status,0,c
  5946  001046  321B               	rrcf	___lldiv@divisor+3,f,c
  5947  001048  321A               	rrcf	___lldiv@divisor+2,f,c
  5948  00104A  3219               	rrcf	___lldiv@divisor+1,f,c
  5949  00104C  3218               	rrcf	___lldiv@divisor,f,c
  5950  00104E  2E20               	decfsz	___lldiv@counter,f,c
  5951  001050  D7E1               	goto	u1460
  5952  001052                     l844:
  5953  001052  C01C  F014         	movff	___lldiv@quotient,?___lldiv
  5954  001056  C01D  F015         	movff	___lldiv@quotient+1,?___lldiv+1
  5955  00105A  C01E  F016         	movff	___lldiv@quotient+2,?___lldiv+2
  5956  00105E  C01F  F017         	movff	___lldiv@quotient+3,?___lldiv+3
  5957  001062  0012               	return		;funcret
  5958  001064                     __end_of___lldiv:
  5959                           	opt stack 0
  5960                           tblptru	equ	0xFF8
  5961                           tblptrh	equ	0xFF7
  5962                           tblptrl	equ	0xFF6
  5963                           tablat	equ	0xFF5
  5964                           prodh	equ	0xFF4
  5965                           prodl	equ	0xFF3
  5966                           intcon	equ	0xFF2
  5967                           intcon3	equ	0xFF0
  5968                           postinc0	equ	0xFEE
  5969                           wreg	equ	0xFE8
  5970                           postdec1	equ	0xFE5
  5971                           plusw1	equ	0xFE3
  5972                           fsr1l	equ	0xFE1
  5973                           indf2	equ	0xFDF
  5974                           postinc2	equ	0xFDE
  5975                           postdec2	equ	0xFDD
  5976                           plusw2	equ	0xFDB
  5977                           fsr2h	equ	0xFDA
  5978                           fsr2l	equ	0xFD9
  5979                           status	equ	0xFD8
  5980                           
  5981 ;; *************** function _interruptHandler *****************
  5982 ;; Defined at:
  5983 ;;		line 659 in file "main.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;		None
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;  keypress        1   18[COMRAM] unsigned char 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  1    wreg      void 
  5990 ;; Registers used:
  5991 ;;		wreg, status,2, status,0
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5998 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6000 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;Total ram usage:       19 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; This function calls:
  6004 ;;		Nothing
  6005 ;; This function is called by:
  6006 ;;		Interrupt level 2
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	intcode
  6011  000008                     __pintcode:
  6012                           	opt stack 0
  6013  000008                     _interruptHandler:
  6014                           	opt stack 25
  6015                           
  6016                           ;incstack = 0
  6017  000008  826B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6018  00000A  ED8E  F007         	call	int_func,f	;refresh shadow registers
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           intcon3	equ	0xFF0
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           postdec1	equ	0xFE5
  6030                           plusw1	equ	0xFE3
  6031                           fsr1l	equ	0xFE1
  6032                           indf2	equ	0xFDF
  6033                           postinc2	equ	0xFDE
  6034                           postdec2	equ	0xFDD
  6035                           plusw2	equ	0xFDB
  6036                           fsr2h	equ	0xFDA
  6037                           fsr2l	equ	0xFD9
  6038                           status	equ	0xFD8
  6039                           
  6040                           	psect	intcode_body
  6041  000F1C                     __pintcode_body:
  6042                           	opt stack 25
  6043  000F1C                     int_func:
  6044                           	opt stack 25
  6045  000F1C  0006               	pop		; remove dummy address from shadow register refresh
  6046  000F1E  CFFA F001          	movff	pclath,??_interruptHandler
  6047  000F22  CFFB F002          	movff	pclatu,??_interruptHandler+1
  6048  000F26  CFE9 F003          	movff	fsr0l,??_interruptHandler+2
  6049  000F2A  CFEA F004          	movff	fsr0h,??_interruptHandler+3
  6050  000F2E  CFE1 F005          	movff	fsr1l,??_interruptHandler+4
  6051  000F32  CFE2 F006          	movff	fsr1h,??_interruptHandler+5
  6052  000F36  CFD9 F007          	movff	fsr2l,??_interruptHandler+6
  6053  000F3A  CFDA F008          	movff	fsr2h,??_interruptHandler+7
  6054  000F3E  CFF3 F009          	movff	prodl,??_interruptHandler+8
  6055  000F42  CFF4 F00A          	movff	prodh,??_interruptHandler+9
  6056  000F46  CFF6 F00B          	movff	tblptrl,??_interruptHandler+10
  6057  000F4A  CFF7 F00C          	movff	tblptrh,??_interruptHandler+11
  6058  000F4E  CFF8 F00D          	movff	tblptru,??_interruptHandler+12
  6059  000F52  CFF5 F00E          	movff	tablat,??_interruptHandler+13
  6060  000F56  C06B  F00F         	movff	btemp,??_interruptHandler+14
  6061  000F5A  C06C  F010         	movff	btemp+1,??_interruptHandler+15
  6062  000F5E  C06D  F011         	movff	btemp+2,??_interruptHandler+16
  6063  000F62  C06E  F012         	movff	btemp+3,??_interruptHandler+17
  6064                           
  6065                           ;main.c: 661: if (INT1IF) {
  6066  000F66  A0F0               	btfss	intcon3,0,c	;volatile
  6067  000F68  D016               	goto	i2l373
  6068                           
  6069                           ;main.c: 664: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6070  000F6A  3881               	swapf	3969,w,c	;volatile
  6071  000F6C  0B0F               	andlw	15
  6072  000F6E  0B0F               	andlw	15
  6073  000F70  6E13               	movwf	interruptHandler@keypress,c
  6074                           
  6075                           ;main.c: 666: if (keypress == 12) {
  6076  000F72  0E0C               	movlw	12
  6077  000F74  1813               	xorwf	interruptHandler@keypress,w,c
  6078  000F76  A4D8               	btfss	status,2,c
  6079  000F78  D005               	goto	i2l370
  6080                           
  6081                           ;main.c: 667: begin_operation = 1;
  6082  000F7A  0E00               	movlw	0
  6083  000F7C  6E62               	movwf	_begin_operation+1,c
  6084  000F7E  0E01               	movlw	1
  6085  000F80  6E61               	movwf	_begin_operation,c
  6086  000F82  D008               	goto	i2l2042
  6087  000F84                     i2l370:
  6088                           
  6089                           ;main.c: 670: else if (keypress == 14) {
  6090  000F84  0E0E               	movlw	14
  6091  000F86  1813               	xorwf	interruptHandler@keypress,w,c
  6092  000F88  A4D8               	btfss	status,2,c
  6093  000F8A  D004               	goto	i2l2042
  6094                           
  6095                           ;main.c: 671: begin_logging = 1;
  6096  000F8C  0E00               	movlw	0
  6097  000F8E  6E60               	movwf	_begin_logging+1,c
  6098  000F90  0E01               	movlw	1
  6099  000F92  6E5F               	movwf	_begin_logging,c
  6100  000F94                     i2l2042:
  6101                           
  6102                           ;main.c: 674: else {
  6103                           ;main.c: 675: INT1IF = 0;
  6104                           
  6105                           ;main.c: 673: }
  6106                           
  6107                           ;main.c: 672: INT1IF = 0;
  6108  000F94  90F0               	bcf	intcon3,0,c	;volatile
  6109  000F96                     i2l373:
  6110  000F96  C012  F06E         	movff	??_interruptHandler+17,btemp+3
  6111  000F9A  C011  F06D         	movff	??_interruptHandler+16,btemp+2
  6112  000F9E  C010  F06C         	movff	??_interruptHandler+15,btemp+1
  6113  000FA2  C00F  F06B         	movff	??_interruptHandler+14,btemp
  6114  000FA6  C00E  FFF5         	movff	??_interruptHandler+13,tablat
  6115  000FAA  C00D  FFF8         	movff	??_interruptHandler+12,tblptru
  6116  000FAE  C00C  FFF7         	movff	??_interruptHandler+11,tblptrh
  6117  000FB2  C00B  FFF6         	movff	??_interruptHandler+10,tblptrl
  6118  000FB6  C00A  FFF4         	movff	??_interruptHandler+9,prodh
  6119  000FBA  C009  FFF3         	movff	??_interruptHandler+8,prodl
  6120  000FBE  C008  FFDA         	movff	??_interruptHandler+7,fsr2h
  6121  000FC2  C007  FFD9         	movff	??_interruptHandler+6,fsr2l
  6122  000FC6  C006  FFE2         	movff	??_interruptHandler+5,fsr1h
  6123  000FCA  C005  FFE1         	movff	??_interruptHandler+4,fsr1l
  6124  000FCE  C004  FFEA         	movff	??_interruptHandler+3,fsr0h
  6125  000FD2  C003  FFE9         	movff	??_interruptHandler+2,fsr0l
  6126  000FD6  C002  FFFB         	movff	??_interruptHandler+1,pclatu
  6127  000FDA  C001  FFFA         	movff	??_interruptHandler,pclath
  6128  000FDE  926B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6129  000FE0  0011               	retfie		f
  6130  000FE2                     __end_of_interruptHandler:
  6131                           	opt stack 0
  6132                           pclatu	equ	0xFFB
  6133                           pclath	equ	0xFFA
  6134                           tblptru	equ	0xFF8
  6135                           tblptrh	equ	0xFF7
  6136                           tblptrl	equ	0xFF6
  6137                           tablat	equ	0xFF5
  6138                           prodh	equ	0xFF4
  6139                           prodl	equ	0xFF3
  6140                           intcon	equ	0xFF2
  6141                           intcon3	equ	0xFF0
  6142                           postinc0	equ	0xFEE
  6143                           fsr0h	equ	0xFEA
  6144                           fsr0l	equ	0xFE9
  6145                           wreg	equ	0xFE8
  6146                           postdec1	equ	0xFE5
  6147                           plusw1	equ	0xFE3
  6148                           fsr1h	equ	0xFE2
  6149                           fsr1l	equ	0xFE1
  6150                           indf2	equ	0xFDF
  6151                           postinc2	equ	0xFDE
  6152                           postdec2	equ	0xFDD
  6153                           plusw2	equ	0xFDB
  6154                           fsr2h	equ	0xFDA
  6155                           fsr2l	equ	0xFD9
  6156                           status	equ	0xFD8
  6157                           pclatu	equ	0xFFB
  6158                           pclath	equ	0xFFA
  6159                           tblptru	equ	0xFF8
  6160                           tblptrh	equ	0xFF7
  6161                           tblptrl	equ	0xFF6
  6162                           tablat	equ	0xFF5
  6163                           prodh	equ	0xFF4
  6164                           prodl	equ	0xFF3
  6165                           intcon	equ	0xFF2
  6166                           intcon3	equ	0xFF0
  6167                           postinc0	equ	0xFEE
  6168                           fsr0h	equ	0xFEA
  6169                           fsr0l	equ	0xFE9
  6170                           wreg	equ	0xFE8
  6171                           postdec1	equ	0xFE5
  6172                           plusw1	equ	0xFE3
  6173                           fsr1h	equ	0xFE2
  6174                           fsr1l	equ	0xFE1
  6175                           indf2	equ	0xFDF
  6176                           postinc2	equ	0xFDE
  6177                           postdec2	equ	0xFDD
  6178                           plusw2	equ	0xFDB
  6179                           fsr2h	equ	0xFDA
  6180                           fsr2l	equ	0xFD9
  6181                           status	equ	0xFD8
  6182                           
  6183                           	psect	rparam
  6184  0000                     pclatu	equ	0xFFB
  6185                           pclath	equ	0xFFA
  6186                           tblptru	equ	0xFF8
  6187                           tblptrh	equ	0xFF7
  6188                           tblptrl	equ	0xFF6
  6189                           tablat	equ	0xFF5
  6190                           prodh	equ	0xFF4
  6191                           prodl	equ	0xFF3
  6192                           intcon	equ	0xFF2
  6193                           intcon3	equ	0xFF0
  6194                           postinc0	equ	0xFEE
  6195                           fsr0h	equ	0xFEA
  6196                           fsr0l	equ	0xFE9
  6197                           wreg	equ	0xFE8
  6198                           postdec1	equ	0xFE5
  6199                           plusw1	equ	0xFE3
  6200                           fsr1h	equ	0xFE2
  6201                           fsr1l	equ	0xFE1
  6202                           indf2	equ	0xFDF
  6203                           postinc2	equ	0xFDE
  6204                           postdec2	equ	0xFDD
  6205                           plusw2	equ	0xFDB
  6206                           fsr2h	equ	0xFDA
  6207                           fsr2l	equ	0xFD9
  6208                           status	equ	0xFD8
  6209                           
  6210                           	psect	temp
  6211  00006B                     btemp:
  6212                           	opt stack 0
  6213  00006B                     	ds	1
  6214  0000                     int$flags	set	btemp
  6215  0000                     wtemp6	set	btemp+1
  6216                           pclatu	equ	0xFFB
  6217                           pclath	equ	0xFFA
  6218                           tblptru	equ	0xFF8
  6219                           tblptrh	equ	0xFF7
  6220                           tblptrl	equ	0xFF6
  6221                           tablat	equ	0xFF5
  6222                           prodh	equ	0xFF4
  6223                           prodl	equ	0xFF3
  6224                           intcon	equ	0xFF2
  6225                           intcon3	equ	0xFF0
  6226                           postinc0	equ	0xFEE
  6227                           fsr0h	equ	0xFEA
  6228                           fsr0l	equ	0xFE9
  6229                           wreg	equ	0xFE8
  6230                           postdec1	equ	0xFE5
  6231                           plusw1	equ	0xFE3
  6232                           fsr1h	equ	0xFE2
  6233                           fsr1l	equ	0xFE1
  6234                           indf2	equ	0xFDF
  6235                           postinc2	equ	0xFDE
  6236                           postdec2	equ	0xFDD
  6237                           plusw2	equ	0xFDB
  6238                           fsr2h	equ	0xFDA
  6239                           fsr2l	equ	0xFD9
  6240                           status	equ	0xFD8


Data Sizes:
    Strings     715
    Constant    48
    Data        6
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     106
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_56(CODE[19]), STR_55(CODE[18]), STR_54(CODE[17]), STR_53(CODE[8]), 
		 -> STR_52(CODE[19]), STR_51(CODE[18]), STR_50(CODE[18]), STR_49(CODE[11]), 
		 -> STR_48(CODE[11]), STR_47(CODE[7]), STR_46(CODE[19]), STR_45(CODE[14]), 
		 -> STR_44(CODE[20]), STR_43(CODE[13]), STR_42(CODE[11]), STR_41(CODE[12]), 
		 -> STR_40(CODE[7]), STR_39(CODE[19]), STR_38(CODE[23]), STR_37(CODE[7]), 
		 -> STR_36(CODE[19]), STR_35(CODE[17]), STR_34(CODE[7]), STR_33(CODE[21]), 
		 -> STR_32(CODE[21]), STR_31(CODE[21]), STR_30(CODE[21]), STR_29(CODE[18]), 
		 -> STR_28(CODE[18]), STR_27(CODE[11]), STR_26(CODE[14]), STR_25(CODE[20]), 
		 -> STR_24(CODE[13]), STR_23(CODE[11]), STR_22(CODE[14]), STR_21(CODE[19]), 
		 -> STR_20(CODE[20]), STR_19(CODE[20]), STR_18(CODE[13]), STR_17(CODE[12]), 
		 -> STR_16(CODE[21]), STR_15(CODE[13]), STR_14(CODE[11]), STR_13(CODE[13]), 
		 -> STR_12(CODE[21]), STR_11(CODE[21]), STR_10(CODE[8]), STR_9(CODE[8]), 
		 -> STR_8(CODE[8]), STR_7(CODE[17]), STR_6(CODE[21]), STR_5(CODE[21]), 
		 -> STR_4(CODE[21]), STR_3(CODE[21]), STR_2(CODE[21]), STR_1(CODE[33]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_operation
    _operation->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   17142
                                             80 COMRAM    10    10      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _initLCD
                            _lcdInst
                            _logging
                          _operation
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                           21    21      0    9290
                                             59 COMRAM    21    21      0
                            _lcdInst
                     _lcd_set_cursor
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              37    23     14    6499
                                             31 COMRAM    28    14     14
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                             21 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             26 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                             19 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_set_cursor                                       3     2      1    1150
                                             25 COMRAM     3     2      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (3) _lcd_shift_cursor                                     3     2      1     256
                                             22 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _logging                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                             22 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0      90
                                             21 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     478
                                             20 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      2     2      0      30
                                             20 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      1     1      0       0
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             32 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                             19 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interruptHandler                                    19    19      0      30
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _logging
   _operation
     _lcdInst
       _lcdNibble
     _lcd_set_cursor
       _lcdInst
         _lcdNibble
       _lcd_shift_cursor
         _lcdInst
           _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _putch
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      6A       1       84.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6A      34        0.0%
DATA                 0      0      6A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Feb 04 21:50:13 2018

         operation@frequency 0044                           l41 112C                           l42 10FC  
                         l43 1146                           l44 1114                           l45 111C  
                         l46 1124                           u15 109E                           u16 10A0  
                         u25 10DE                           u26 10E0                  __CFG_CPD$ON 000000  
        ___wmul@multiplicand 0016                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l200 0214                          l201 021C                          l300 07B0  
                        l220 02B2                          l212 0264                          l221 02BA  
                        l205 0258                          l310 0846                          l214 02E8  
                        l222 02C2                          l150 0DEE                          l151 0E2A  
                        l320 08D8                          l232 03EE                          l321 0912  
                        l305 083A                          l217 02CC                          l242 0456  
                        l218 02AA                          l331 09B0                          l315 08E6  
                        l243 0440                          l332 0986                          l316 08AE  
                        l180 017E                          l172 0138                          l156 0EEA  
                        l341 09E2                          l333 09C4                          l317 0900  
                        l261 056C                          l245 0444                          l237 03FA  
                        l229 0376                          l181 0186                          l430 0AA4  
                        l334 0994                          l326 091E                          l318 08BC  
                        l254 04FA                          l246 0448                          l174 01A6  
                        l166 00A2                          l158 0F02                          l431 0AB4  
                        l351 0A8A                          l335 09A2                          l319 08CA  
                        l239 0472                          l247 044C                          l167 012C  
                        l336 09D6                          l280 0616                          l264 0556  
                        l248 0450                          l192 01CE                          l441 0B58  
                        l433 0AC8                          l281 0670                          l265 0544  
                        l185 01C2                          l177 0190                          l434 0AC2  
                        l346 0A7E                          l282 0646                          l194 023C  
                        l178 0176                          l291 0732                          l283 0684  
                        l275 0624                          l267 0548                          l259 0506  
                        l452 0C2E                          l284 0654                          l276 05EC  
                        l268 054C                          l453 0BCE                          l285 0662  
                        l277 063E                          l269 0550                          l197 0226  
                        l462 0C58                          l446 0B86                          l286 0726  
                        l278 05FA                          l198 020C                          l463 0C7C  
                        l447 0B54                          l439 0AF6                          l295 07A4  
                        l279 0608                          l480 0D28                          l464 0C84  
                        l465 0CB0                          l457 0C3E                          l449 0BB4  
                        l474 0CDE                          l466 0C9A                          l458 0BFE  
                        l475 0D84                          l813 1328                          l477 0D6E  
                        l902 1262                          l478 0CE4                          l903 125A  
                        l479 0D7E                          l840 1004                          l906 127A  
                        l843 1044                          l907 1284                          l844 1052  
                        l839 1010                          l892 11CC                          l893 11C4  
                        l896 11EC                          l897 11F6                 __CFG_CPB$OFF 000000  
                        u425 130A                          u426 130C                          prod 000FF3  
                        wreg 000FE8              ?_lcd_set_cursor 001A                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l2050 1336                         l2184 0BD2  
                       l2452 031E                         l2198 0C02                         l2446 02FA  
                       l2802 0E22                         STR_1 FD33                         STR_2 FDAA  
                       STR_3 FDE9                         STR_4 FDFE                         STR_5 FE28  
                       STR_6 FDD4                         STR_7 FF21                         STR_8 FFEF  
                       STR_9 FFDF                         u1200 1266                         u1400 0CB8  
                       u1170 11D0                         u1410 0CCC                         u2060 0E46  
                       _LATA 000F89                         u1430 0D8C                         _LATB 000F8A  
                       u2207 0330                         _LATC 000F8B                         _LATD 000F8C  
                       u2217 0368                         u2137 0E74                         _LATE 000F8D  
                       u1610 01E8                         u2307 06E0                         u2227 0382  
                       u2147 0EDC                         u1460 1014                         u1540 0152  
                       u2317 06F8                         u2237 0398                         u2157 003A  
                       u1630 024E                         u2407 09FC                         u2327 0744  
                       u2247 048E                         u2167 0050                         u1560 01B8  
                       u2417 0A12                         u2337 075A                         u2257 04A4  
                       u2177 0094                         u2507 10C6                         u2427 1358  
                       u2347 07CA                         u2267 058E                         u2187 00AE  
                       u1491 001E                         u1485 1186                         u2517 10D0  
                       u2437 10F0                         u2357 07E0                         u2277 05A4  
                       u2197 00C4                         u2447 1108                         u2367 0860  
                       u2287 068E                         u2457 1206                         u2377 0876  
                       u2297 06A8                         u1850 0520                         u1690 0286  
                       u2467 123A                         u2387 0938                         u1780 041C  
                       u2477 136C                         u2397 094E                         u2487 1086  
                       u2497 1090                         _main 0DA6     __end_of_interruptHandler 0FE2  
                       _keys FD03                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 006B  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
           __end_of_LCD_LEFT FD2E          operation@repetition 0045        I2C_Master_Read@ackBit 0015  
           ?_I2C_Master_Init 0021             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001                        STR_10 FFE7  
                      STR_11 FDBF                        STR_20 FE67                        STR_12 FD80  
                      STR_13 FF5F                        STR_21 FEB6                        STR_14 FFB6  
                      STR_22 FF43                        STR_30 FD95                        STR_23 FFC1  
                      STR_15 FF6C                        STR_31 FD6B                        STR_40 FFF7  
                      STR_24 FF79                        STR_16 FE52                        STR_32 FE3D  
                      STR_41 FF9F                        STR_17 FF93                        STR_25 FE8F  
                      STR_33 FE13                        STR_50 FEDB                        STR_42 FFC1  
                      STR_34 FFF7                        STR_18 FF86                        STR_26 FF51  
                      STR_51 FEC9                        STR_43 FF79                        STR_27 FFCC  
                      STR_35 FF32                        STR_19 FE7B                        STR_52 FEA3  
                      STR_44 FE8F                        STR_28 FEDB                        STR_36 FEA3  
                      STR_37 FFF7                        STR_45 FF51                        STR_53 FFD7  
                      STR_29 FEC9                        STR_46 FEA3                        STR_54 FF10  
                      STR_38 FD54                        STR_39 FEA3                        STR_47 FFF7  
                      STR_55 FEED                        STR_56 FEA3                        STR_48 FFAB  
                      STR_49 FFCC                        STR_57 FEFF              __end_of___lldiv 1064  
            __end_of___lwdiv 1200              __end_of___lwmod 128E                        i2l370 0F84  
                      i2l373 0F96                        _PORTB 000F81                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 1374               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
            __end_of_initLCD 124C               __CFG_EBTRB$OFF 000000              __end_of_dpowers FD1E  
            __end_of_isdigit 1330              __end_of_logging 13A8                        _putch 134C  
                      main@i 005A                        pclath 000FFA                        tablat 000FF5  
          _LCDinterruptState 0064                        plusw1 000FE3                        plusw2 000FDB  
                      status 000FD8  I2C_Master_Read@receivedByte 0016                        wtemp6 006C  
             __CFG_PBADEN$ON 000000              __initialization 128E                 __end_of_main 0F1C  
               __end_of_keys FD14            ?_lcd_shift_cursor 0017               __CFG_OSC$HSPLL 000000  
          __end_of_LCD_RIGHT FD2F                       ??_main 0051           ??_lcd_shift_cursor 0018  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0015  
         ??_I2C_Master_Start 0015                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0017                       ?_putch 0001        operation@keypress_410 003E  
      operation@keypress_414 003F        operation@keypress_433 0042        operation@keypress_426 0041  
      operation@keypress_418 0040        operation@keypress_438 0043        operation@keypress_391 004A  
      operation@keypress_383 0047        operation@keypress_384 0049        operation@keypress_396 0048  
                     _INT1IE 007F83                       _INT1IF 007F80                       i2l2042 0F94  
                     _SSPADD 000FC8                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
                     ___wmul 12C8               __CFG_STVREN$ON 000000                    ??___lldiv 001C  
           __end_of_currDate FD2D                    ??___lwdiv 0018                    ??___lwmod 001F  
                     clear_0 12B4                    ??_lcdInst 0016                       _printf 0A9A  
                  ??_initLCD 0017                 __pdataCOMRAM 0065                    ??_isdigit 0014  
                  ??_logging 0014                 __mediumconst FD02                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                   __accesstop 0080  
    __end_of__initialization 12BA                ___rparam_used 000001               __pcstackCOMRAM 0001  
              __end_of_putch 1360             ??_lcd_set_cursor 001B           __size_of_lcdNibble 007E  
                    ??_putch 0016            ?_interruptHandler 0001           ??_interruptHandler 0001  
                    ?___wmul 0014                      ?_printf 0020           __size_of_operation 0A88  
       lcd@LCDinterruptState 0063                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7            __end_of_lcdNibble 10E2                      __Hparam 0000  
      operation@prescription 004B                      __Lparam 0000                      ___lldiv 0FE2  
            __size_of___wmul 0026                      ___lwdiv 11AE                      ___lwmod 124C  
   interruptHandler@keypress 0013               operation@F3021 0065                      __pcinit 128E  
                    __ramtop 1000                      _lcdInst 1360                      __ptext0 0DA6  
                    __ptext1 0012                      __ptext2 0A9A                      __ptext3 134C  
                    __ptext4 1312                      __ptext5 12C8                      __ptext6 124C  
                    __ptext7 11AE                      __ptext8 10E2                      __ptext9 1330  
            __size_of_printf 030C                      _initLCD 1200            __end_of_hexpowers FD26  
                    _dpowers FD14                      _isdigit 1312                      _logging 13A6  
                  _LCD_RIGHT FD2E     __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Read 0024  
   __size_of_I2C_Master_Wait 0012     __size_of_I2C_Master_Stop 0008               __pintcode_body 0F1C  
  __size_of_lcd_shift_cursor 001C         end_of_initialization 12BA                _begin_logging 005F  
      __end_of_LCD_SIZE_HORZ FD31        __end_of_LCD_SIZE_VERT FD30                __Lmediumconst FD02  
                    int_func 0F1C            __end_of_operation 0A9A    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0018              ___lldiv@counter 0020  
                    printf@c 003B                      printf@f 0020                      postdec1 000FE5  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
                  _PORTBbits 000F81                    _TRISCbits 000F94            operation@keypress 0046  
                 _total_time 005B                  printf@width 0039    lcd_shift_cursor@direction 0017  
             __end_of___wmul 12EE                __pidataCOMRAM 13A0               __end_of_printf 0DA6  
        start_initialization 128E            ??_I2C_Master_Init 0025            ??_I2C_Master_Read 0015  
          ??_I2C_Master_Wait 0014            ??_I2C_Master_Stop 0015                     ??___wmul 0018  
   I2C_Master_Init@clockFreq 0021             __CFG_LPT1OSC$OFF 000000                     ??_printf 002E  
  __size_of_interruptHandler 0FDA                  __pbssCOMRAM 005B             _lcd_shift_cursor 1330  
           _I2C_Master_Start 1398             _I2C_Master_Write 1386             ___lwdiv@dividend 0014  
          __CFG_CCP2MX$PORTC 000000                    __pintcode 0008                __pmediumconst FD02  
                  _lcdNibble 1064                     ?___lldiv 0014                     ?___lwdiv 0014  
                   ?___lwmod 001B                     ?_lcdInst 0001                     ?_initLCD 0001  
                   ?_isdigit 0001                     ?_logging 0001                    _hexpowers FD1E  
           ___lwdiv@quotient 0018               __size_of_putch 0014                     _LCD_LEFT FD2D  
    __size_of_lcd_set_cursor 0070               ___wmul@product 0018                     _LATDbits 000F8C  
            lcd_set_cursor@x 001C              lcd_set_cursor@y 001A                    _operation 0012  
           __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001            ___wmul@multiplier 0014  
              lcdNibble@data 0015                   printf@flag 0038                lcdNibble@temp 0014  
                 printf@prec 0035               _LCD_HORZ_LIMIT FD32                    copy_data0 12A2  
                   __Hrparam 0000                   ?_operation 0001                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000              _begin_operation 0061             __size_of___lldiv 0082  
           __size_of___lwdiv 0052             __size_of___lwmod 0042             _interruptHandler 0008  
                _isdigit$822 0015             __size_of_lcdInst 0014              _I2C_Master_Init 1152  
            _I2C_Master_Read 12EE             __size_of_initLCD 004C              _I2C_Master_Wait 1374  
            _I2C_Master_Stop 1390       __end_of_LCD_HORZ_LIMIT FD33             __size_of_isdigit 001E  
           __size_of_logging 0002              ___lwdiv@divisor 0016              ___lwdiv@counter 001A  
                   __ptext10 13A6                     __ptext11 1200                     __ptext20 0FE2  
                   __ptext12 1360                     __ptext13 1064                     __ptext14 1386  
                   __ptext15 1390                     __ptext16 1398                     __ptext17 12EE  
                   __ptext18 1374                     __ptext19 1152               _LCD_VERT_LIMIT FD31  
                   _currDate FD26                __size_of_main 0176                  ??_lcdNibble 0014  
                   _num_runs 005D                     int$flags 006B     __end_of_lcd_shift_cursor 134C  
                  printf@idx 0032                    printf@val 0036                     main@time 0053  
I2C_Master_Write@byteToWrite 0015            lcd_shift_cursor@n 0019                    putch@data 0016  
   __end_of_I2C_Master_Start 13A0     __end_of_I2C_Master_Write 1390                   _INTCONbits 000FF2  
     __end_of_LCD_VERT_LIMIT FD32                     isdigit@c 0016                     intlevel2 0000  
             _lcd_set_cursor 10E2                _LCD_SIZE_HORZ FD30             ___lwmod@dividend 001B  
              _LCD_SIZE_VERT FD2F             ___lldiv@dividend 0014                  ??_operation 003C  
                   printf@ap 0033      __end_of_I2C_Master_Init 11AE      __end_of_I2C_Master_Read 1312  
    __end_of_I2C_Master_Wait 1386      __end_of_I2C_Master_Stop 1398                  lcdInst@data 0016  
           ___lldiv@quotient 001C              ___lwmod@divisor 001D              ___lwmod@counter 001F  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5       __end_of_lcd_set_cursor 1152  
   lcd_shift_cursor@numChars 0018  
